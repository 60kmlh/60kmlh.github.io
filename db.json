{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/gandalfr/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/css/gandalfr.css","path":"css/gandalfr.css","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/css/gandalfr.css.map","path":"css/gandalfr.css.map","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/scss/gandalfr.scss","path":"scss/gandalfr.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d956ec462e841a1031e50c5183ba36f08c8871a9","modified":1504444701922},{"_id":"themes/gandalfr/LICENSE","hash":"e80157fea03e4ee45500ea818fceaf6ca388c17d","modified":1550499284718},{"_id":"themes/gandalfr/README.md","hash":"b60c04f45cebaef0c8cf721aa88c662aaf051c9f","modified":1550499284718},{"_id":"themes/gandalfr/TODO.md","hash":"c20ea4cb6aec891d53fc60707f6102e049e7955c","modified":1550499284718},{"_id":"themes/gandalfr/_config.yml","hash":"ae3d342586ddd721e9345eae9439d92faef36844","modified":1551011684926},{"_id":"themes/gandalfr/_config.yml.example","hash":"b651f982ee554ef597451e07e6f8c86048d0cade","modified":1550499284718},{"_id":"themes/gandalfr/gulpfile.js","hash":"cb1123f7f21b8d37a651599f2f40b7bc4d11963b","modified":1550499284718},{"_id":"themes/gandalfr/package.json","hash":"694fd825847a2b330db53be5c2f68f28086f865f","modified":1550499284718},{"_id":"themes/gandalfr/.gitignore","hash":"def5f0c9ac6f013028d5b4e9938cbd679cb1c4bf","modified":1550499284718},{"_id":"source/_posts/FormData笔记.md","hash":"341ea15f26ba25d48515c056b01e615efc7806f7","modified":1499588619066},{"_id":"source/_posts/babel常用配置记录.md","hash":"088eabb08412b75bf04b8841c58c723b334e1a1c","modified":1507817820062},{"_id":"source/_posts/html标签语义化的区别.md","hash":"52adb4391e6b46af180a7afbeac1ec55ff8b8145","modified":1508940467215},{"_id":"source/_posts/iOS的iframe宽度bug.md","hash":"dd39c18e1ac78bbfe2641321537303be72a32974","modified":1550927211148},{"_id":"source/_posts/javascripts权威指南笔记-6.md","hash":"2f570e979f5571b52ba677059aebcd7608376bb2","modified":1491298322049},{"_id":"source/_posts/javascripts权威指南笔记-6.md~","hash":"2f570e979f5571b52ba677059aebcd7608376bb2","modified":1491298321829},{"_id":"source/_posts/javascripts权威指南笔记-8.md","hash":"4015eeb9fea7f75467631940c5c74a90e24fdf2b","modified":1491393976186},{"_id":"source/_posts/javascripts权威指南笔记-8.md~","hash":"4015eeb9fea7f75467631940c5c74a90e24fdf2b","modified":1491393946174},{"_id":"source/_posts/promise.md","hash":"df6c8d6c0e88af5bb1e05424bf1a081270d2a822","modified":1551011097394},{"_id":"source/_posts/vue的Runtime   Compiler vs. Runtime-only.md","hash":"822b43266366282c69ce15418680d334161daafd","modified":1507817781866},{"_id":"source/_posts/vue项目总结.md","hash":"6e1a958fce378a13ad30fad2be17c47632d8c61b","modified":1499589680698},{"_id":"source/_posts/《图解http》第一章笔记.md","hash":"7b5065d0d4c132faab92b4466e689a06360ae89a","modified":1506609290862},{"_id":"source/_posts/《图解http》第三章笔记.md","hash":"401d0e787a12be0f14e4f376e95beb396b24c20f","modified":1506608954614},{"_id":"source/_posts/《图解http》第二章笔记.md","hash":"57d91b743298918337320bd7f6acaf64a7a4d223","modified":1506608933210},{"_id":"source/_posts/《图解http》第五章笔记.md","hash":"419cf7fab86d86f7dc51cd9268074c5979cc68a2","modified":1508940503423},{"_id":"source/_posts/《图解http》第六章笔记.md","hash":"ce5838f64976c488da28ac87997cabe03908773b","modified":1508940835643},{"_id":"source/_posts/《图解http》第四章笔记.md","hash":"835c56ca4cb0aa914ef56aa0c8d387b3dc14ddc6","modified":1507818029706},{"_id":"source/_posts/《精通正则表达式》第一章笔记.md","hash":"4332174e99ac0300ef9d81cb0948ba86b0a627a6","modified":1506260285306},{"_id":"source/_posts/使用gulp为静态资源添加版本号.md","hash":"02e2f86ca1e19d19bece448f8628d5939ca74b58","modified":1500907689368},{"_id":"source/_posts/使用gulp移动打包的静态资源到java项目.md","hash":"d3824f0f63eb66b05f4fa13d04f0c4ef850ff12e","modified":1492521796169},{"_id":"source/_posts/使用gulp移动打包的静态资源到java项目.md~","hash":"d3824f0f63eb66b05f4fa13d04f0c4ef850ff12e","modified":1492521747529},{"_id":"source/_posts/使用react和vue实现支付宝微信风格的密码输入框.md","hash":"c5a96e93ff2b49b47509b5b68dc281cd7277ccbe","modified":1507732584911},{"_id":"source/_posts/借助webpack实现前端代码的懒加载.md","hash":"e19d65e5007d6e2157e59f5e0be590e892245cc6","modified":1503736021257},{"_id":"source/_posts/关于npm依赖包版本号的规则.md","hash":"736baf81307e67067c95675d477a7c029c7f5b02","modified":1503241173705},{"_id":"source/_posts/使用karma+mocha+chai为vue组件进行单元测试.md","hash":"b92cdbdb81d01be32cef52dbcd3d4ebb5ae3c44d","modified":1500907772000},{"_id":"source/_posts/关于页面自动播放音频文件.md","hash":"f99db70d4d663e373aa0b8b037b4e75b2f7930a8","modified":1499588810950},{"_id":"source/_posts/基于vue-router的管理系统权限控制的实现.md","hash":"24f0c299070b64654b55e14a1dc8c62d94fb510b","modified":1499591026000},{"_id":"source/_posts/实现开发静态页面的热更新.md","hash":"396c991952d91a34be3f082665ebae15cfa824f6","modified":1500907664420},{"_id":"source/_posts/打造属于自己的栅格系统（翻译）.md","hash":"ee240a562b73566062acb2a673d8c78eedc64600","modified":1507450348576},{"_id":"source/_posts/视网膜屏下的canvas清晰度处理.md","hash":"b28dfe24693581a0dfa917cd43c66f8e2895d9fe","modified":1504186409672},{"_id":"source/about/index.md","hash":"ccbfe78a461f7f5365d6419a24ebf194bfd7f465","modified":1491294777489},{"_id":"themes/gandalfr/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1550499284674},{"_id":"themes/gandalfr/.git/config","hash":"23f22425d0ddd02c571939791b5013a0e8c6b796","modified":1550499284678},{"_id":"themes/gandalfr/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1550499151262},{"_id":"themes/gandalfr/.git/index","hash":"dc5067018de8b48e825d87d898c52c8854c8a1f0","modified":1550499284722},{"_id":"themes/gandalfr/.git/packed-refs","hash":"9de92b1d5fdae2bed29a699ebaa30041ea499ec7","modified":1550499284674},{"_id":"themes/gandalfr/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1550499284718},{"_id":"themes/gandalfr/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1550499284718},{"_id":"themes/gandalfr/package-lock.json","hash":"4822e32d22c6d5ab2717eac3fd7019bd7a69fa0c","modified":1550499284718},{"_id":"themes/gandalfr/layout/archive.jade","hash":"a37648fcd0b85e21cd2656e2c097175217ff3070","modified":1550928310472},{"_id":"themes/gandalfr/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1550499284718},{"_id":"themes/gandalfr/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1550499284718},{"_id":"themes/gandalfr/source/favicon.ico","hash":"ff97e9eeb291dcd407982d438f482280aa25a6d9","modified":1550499284722},{"_id":"themes/gandalfr/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1550499151262},{"_id":"themes/gandalfr/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1550499151262},{"_id":"themes/gandalfr/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1550499151258},{"_id":"themes/gandalfr/.git/logs/HEAD","hash":"1148734dc90e7e9bdbc10c38ccc845c4cff07bb8","modified":1550499284678},{"_id":"themes/gandalfr/layout/mixins/paginator.jade","hash":"bc949683bea9183a3c7df22d97ebb133a422cb27","modified":1550927706328},{"_id":"themes/gandalfr/layout/mixins/post.jade","hash":"4475dd99479cb6c2a122b0fe353e451e4a056575","modified":1550499284718},{"_id":"themes/gandalfr/layout/partial/comment.jade","hash":"0496d9e93fc9ab7889f086f80916d7220ed19694","modified":1550499284718},{"_id":"themes/gandalfr/layout/partial/copyright.jade","hash":"3f2a357c9d4861386f81d97a97cde9b6817e35cc","modified":1550499284718},{"_id":"themes/gandalfr/layout/partial/head.jade","hash":"d32a970c293bd0297ecf326b213871021e2565a5","modified":1550499284718},{"_id":"themes/gandalfr/layout/partial/layout.jade","hash":"d28fa3c39fca9624a87e7e83736cf2509dc14a43","modified":1551013314906},{"_id":"themes/gandalfr/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1550499284718},{"_id":"themes/gandalfr/layout/partial/scripts.jade","hash":"90b7952204f660b065a3e3edb81424253166aecd","modified":1550499284718},{"_id":"themes/gandalfr/source/css/gandalfr.css","hash":"9235fb16c6ee9e273854cd4b67c946fda2aa8e5c","modified":1551012306682},{"_id":"themes/gandalfr/source/css/gandalfr.css.map","hash":"1af08c88c568f432180e7eaf989c64470f3f5251","modified":1551012306890},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1550499284722},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/gandalfr.scss","hash":"eb7e4dd5949defa1795b90d8ff5e09f553cea53d","modified":1550499284722},{"_id":"themes/gandalfr/.git/objects/pack/pack-90fba8544d796d86dbcf0695973c00a094fa4e33.idx","hash":"d91099e10bb54f7d39d1bb4ff50227042296a3c3","modified":1550499284570},{"_id":"themes/gandalfr/.git/refs/heads/master","hash":"3ec2b991f8fda0a7880b065729e5911495b16ebf","modified":1550499284678},{"_id":"themes/gandalfr/source/scss/_partial/archive-post-list.scss","hash":"b173328f07795f64769fe552b5c2749f4159d050","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/base.scss","hash":"a9a624a14d593ec986cc5d7eada07394f57be41d","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/footer.scss","hash":"b43533758fb58af67b3d8d2d33208daed56d9592","modified":1550932633968},{"_id":"themes/gandalfr/source/scss/_partial/header.scss","hash":"0491d194e0f3bd927869f0a6b190624d5ff16c92","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/home-post-list.scss","hash":"0021e88b04c51aca45627272bc7e3584ba2480b9","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/mq.scss","hash":"826ad88815e2ae0d4e92f9ddb35e2a6f5cc6836d","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1550499284722},{"_id":"themes/gandalfr/source/scss/_partial/post.scss","hash":"310149cf7ce30cec57bd99fadfffa0785a709790","modified":1550929605616},{"_id":"themes/gandalfr/.git/logs/refs/heads/master","hash":"1148734dc90e7e9bdbc10c38ccc845c4cff07bb8","modified":1550499284678},{"_id":"themes/gandalfr/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1550499284674},{"_id":"themes/gandalfr/source/scss/.sass-cache/59fc1bda1a8180f04d134000fd621d1edfae4095/gandalfr.scssc","hash":"40e7103a2fc1c8dc05d75efe0b74d2cae1d65815","modified":1550925303180},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/archive-post-list.scssc","hash":"4968d4aec8a8f9abedf621a527b8165bdc57eaa5","modified":1550925303228},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/base.scssc","hash":"1fba2453f35f7b7da43ae6d9d68e857d4055945b","modified":1550925303212},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/copyright.scssc","hash":"1913715c3a56030729ba5640214807e2f86a1326","modified":1550925303284},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/footer.scssc","hash":"4f5e7b3263a6c6a19dc18a81acb0f349b8304d47","modified":1550932636404},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/header.scssc","hash":"dfc7112e61df0666a60266ad2f928b062af8d065","modified":1551011979622},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/home-post-list.scssc","hash":"ae0bd33b15ad61e0692e56a4ce7d294d9a0fedc3","modified":1550925303224},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/mq.scssc","hash":"bf528e2d007c1946ee828f6b5e132ad3f2efd5e5","modified":1551012306622},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/normalize.scssc","hash":"bcdeba715651822c89ffdb7e3a9fb9030891e1b9","modified":1550925303204},{"_id":"themes/gandalfr/source/scss/.sass-cache/da13e05a1b978f7086fbb85a1cd34897f999b372/post.scssc","hash":"cd5646b927954f1c0b9d34936fac06aa0a7e83ce","modified":1550929610416},{"_id":"themes/gandalfr/.git/logs/refs/remotes/origin/HEAD","hash":"1148734dc90e7e9bdbc10c38ccc845c4cff07bb8","modified":1550499284674},{"_id":"themes/gandalfr/.git/objects/pack/pack-90fba8544d796d86dbcf0695973c00a094fa4e33.pack","hash":"b21090af0d68c0c3554aedfde6b327b61204e304","modified":1550499284570},{"_id":"public/about/index.html","hash":"6d5c856c18c0924904ae52bc3837068d7477b47f","modified":1551013325095},{"_id":"public/2017/04/08/实现开发静态页面的热更新/index.html","hash":"c8e29370d65380c9ad8a14114fc15893e9d41255","modified":1551013325095},{"_id":"public/2017/04/18/关于页面自动播放音频文件/index.html","hash":"fd3423d6b2bf757179633fa0916da5d62d1c12a4","modified":1551013325096},{"_id":"public/2017/05/06/FormData笔记/index.html","hash":"0bdd31d533893cd0616f768de463a0a3b6f7c423","modified":1551013325096},{"_id":"public/2017/06/10/vue项目总结/index.html","hash":"078acca80693b0b9ccad7bbc762fe26613545356","modified":1551013325096},{"_id":"public/2017/08/05/关于npm依赖包版本号的规则/index.html","hash":"9f235455332a868070cfd791878d15f49305924f","modified":1551013325096},{"_id":"public/2017/08/27/babel常用配置记录/index.html","hash":"d530d444280c0ec8ea43193598309631509ca65b","modified":1551013325096},{"_id":"public/2017/09/01/视网膜屏下的canvas清晰度处理/index.html","hash":"e7645405fb761c4c3bc98cf6e470f51a7bc44c07","modified":1551013325096},{"_id":"public/2017/09/08/《精通正则表达式》第一章笔记/index.html","hash":"599e8918f2ad333cbbc440910b542306ca43ea63","modified":1551013325096},{"_id":"public/2017/09/15/《图解http》第一章笔记/index.html","hash":"adef3be5171663eef59d8659ab9be1193d4bd799","modified":1551013325096},{"_id":"public/2017/09/16/《图解http》第三章笔记/index.html","hash":"f0cddbe3af63a91155a34b256cd7b0c7eaf85131","modified":1551013325097},{"_id":"public/2017/09/16/《图解http》第二章笔记/index.html","hash":"c0dbdba37048378cbe3f5fd947197f88e4823595","modified":1551013325097},{"_id":"public/2017/09/23/《图解http》第四章笔记/index.html","hash":"ce60cdd79c5d6d6970ac0949db785fc6d545e81c","modified":1551013325097},{"_id":"public/2017/09/24/《图解http》第五章笔记/index.html","hash":"cf7f593bfa7567d79fa9f4b38621383f68d3a532","modified":1551013325097},{"_id":"public/2017/09/30/iOS的iframe宽度bug/index.html","hash":"9b7b4d94798f63c45dcd527c959f29427a1a351f","modified":1551013325097},{"_id":"public/2017/10/08/使用react和vue实现支付宝微信风格的密码输入框/index.html","hash":"05625e33cfa47e7234252e7d724a17aa8e50cbfd","modified":1551013325098},{"_id":"public/2017/10/12/vue的Runtime   Compiler vs. Runtime-only/index.html","hash":"cd4ad8fcc32eb4414b91f448cb6b2ff0717689ff","modified":1551013325098},{"_id":"public/2017/10/20/html标签语义化的区别/index.html","hash":"17867e84af01cca59949352b17e3c5f1c5b1e527","modified":1551013325098},{"_id":"public/archives/index.html","hash":"73f85c51cd26a213a5a601d89dcccd69770a52e1","modified":1551013325098},{"_id":"public/archives/page/2/index.html","hash":"92864a69287891c333068a9b2db791c431746d72","modified":1551013325098},{"_id":"public/archives/page/3/index.html","hash":"fdc9ce36b3b8974d86dd588fc1f7ba79eee999ea","modified":1551013325098},{"_id":"public/archives/2017/index.html","hash":"6f19c417ef41e69cd5e2844c23df3acef134d6b5","modified":1551013325099},{"_id":"public/archives/2017/page/2/index.html","hash":"5d7554f1790cdf41b64452308109f043ef30bbd2","modified":1551013325099},{"_id":"public/archives/2017/page/3/index.html","hash":"bd4716070859ea7be31bfe3430cb0ba0d6b483b7","modified":1551013325099},{"_id":"public/archives/2017/03/index.html","hash":"1b1e534f5f15030225b61dbd883c463ebaf3c01a","modified":1551013325099},{"_id":"public/archives/2017/04/index.html","hash":"beaeef516ddfaa74d41466e50fa6fef589ef2bca","modified":1551013325099},{"_id":"public/archives/2017/05/index.html","hash":"0653edcdc651f52e83d4d4e8d8d2e0984350e6c2","modified":1551013325099},{"_id":"public/archives/2017/06/index.html","hash":"f5a2c0ba07e9bbc2e272665af2d464e73cd6e60e","modified":1551013325099},{"_id":"public/archives/2017/07/index.html","hash":"c9459c431046d1ca02b29c7e2eeb4bb57e28eba0","modified":1551013325099},{"_id":"public/archives/2017/08/index.html","hash":"ef7d0261285a4b67f23519bd48270907ac9a1e19","modified":1551013325100},{"_id":"public/archives/2017/09/index.html","hash":"ed484f753f8f846e1de25e2509cf66ffdb67f55c","modified":1551013325100},{"_id":"public/archives/2017/10/index.html","hash":"f17ea88d544ca9c1a8b0283c3049f8f4df8855d7","modified":1551013325101},{"_id":"public/categories/笔记/index.html","hash":"57dc516bd3cfe7e52cf18b096561bd9cbe1f48df","modified":1551013325102},{"_id":"public/categories/笔记/page/2/index.html","hash":"7cc00e51e6df4fbb77bd19905854cfd58631800b","modified":1551013325102},{"_id":"public/categories/工作总结/index.html","hash":"2b2b73d7965f8fe69ad2015a71aaa0c0405b5002","modified":1551013325102},{"_id":"public/categories/工具/index.html","hash":"1821a4ee93ceadd4b165b2710f2e64e18348d273","modified":1551013325103},{"_id":"public/categories/公共组件/index.html","hash":"ffef7a33dcec0ca9583cb753f53e600eb6454cb3","modified":1551013325103},{"_id":"public/categories/测试/index.html","hash":"aa0d8b2fb4729bff64b28b2a21bd36a524a89d1b","modified":1551013325103},{"_id":"public/categories/翻译/index.html","hash":"6eaf6b52b7d8daa243983c4683f35f7d3ac0d528","modified":1551013325103},{"_id":"public/index.html","hash":"3cd8a9d7717d8795ef200bb793a1e8be0f04cbcb","modified":1551013325103},{"_id":"public/page/2/index.html","hash":"9ba12efd597e2dc4738640d9ab179a019d5a7991","modified":1551013325103},{"_id":"public/page/3/index.html","hash":"0ecc00c114bc00698c40eb1f8e1aca9dc2d009ab","modified":1551013325103},{"_id":"public/tags/babel/index.html","hash":"cb4f01f89f62cd34e0157371439ac9c0c2a221a5","modified":1551013325104},{"_id":"public/tags/html/index.html","hash":"ffa1038b4cbf4beeaf5fb630e18eba91b561e84f","modified":1551013325105},{"_id":"public/tags/语意化/index.html","hash":"ffa1038b4cbf4beeaf5fb630e18eba91b561e84f","modified":1551013325105},{"_id":"public/tags/iOS/index.html","hash":"e1755fcda6c8df10b63a09cbee4d434bafaa10f0","modified":1551013325105},{"_id":"public/tags/iframe/index.html","hash":"e1755fcda6c8df10b63a09cbee4d434bafaa10f0","modified":1551013325105},{"_id":"public/tags/bug/index.html","hash":"e1755fcda6c8df10b63a09cbee4d434bafaa10f0","modified":1551013325106},{"_id":"public/tags/object/index.html","hash":"70115988b85c7a149d8d61bbd144c9d6b3e0a41d","modified":1551013325106},{"_id":"public/tags/function/index.html","hash":"d5a1ce664e27d944566a1f22e0a65bc1bca8692d","modified":1551013325106},{"_id":"public/tags/promise/index.html","hash":"aad16d049a03149d06a0e4d080f52ef48ddeb2ba","modified":1551013325106},{"_id":"public/tags/vue/index.html","hash":"9724045048eddec4f5427935946c416b7a292e7e","modified":1551013325106},{"_id":"public/tags/http/index.html","hash":"c32347028a3bbc99a99a72e76c899a3eddf28eae","modified":1551013325106},{"_id":"public/tags/正则表达式/index.html","hash":"24e097b1de095c94ab0ce1c22413101a50348238","modified":1551013325106},{"_id":"public/tags/gulp/index.html","hash":"50c20bcd8c63e298ac02f02522cb4289caf3b364","modified":1551013325106},{"_id":"public/tags/效率/index.html","hash":"aaa075c9846bb37ef30204c2866412aeaa64586a","modified":1551013325106},{"_id":"public/tags/react/index.html","hash":"ffef7a33dcec0ca9583cb753f53e600eb6454cb3","modified":1551013325106},{"_id":"public/tags/webpack/index.html","hash":"f065eba9b8a74fcdd6d783c90318d4c2cf3a1248","modified":1551013325106},{"_id":"public/tags/性能优化/index.html","hash":"f065eba9b8a74fcdd6d783c90318d4c2cf3a1248","modified":1551013325107},{"_id":"public/tags/npm/index.html","hash":"8d89463123763448cd3af32d71ab7360947890f2","modified":1551013325108},{"_id":"public/tags/版本/index.html","hash":"8d89463123763448cd3af32d71ab7360947890f2","modified":1551013325108},{"_id":"public/tags/karma/index.html","hash":"aa0d8b2fb4729bff64b28b2a21bd36a524a89d1b","modified":1551013325108},{"_id":"public/tags/mocha/index.html","hash":"aa0d8b2fb4729bff64b28b2a21bd36a524a89d1b","modified":1551013325108},{"_id":"public/tags/chai/index.html","hash":"aa0d8b2fb4729bff64b28b2a21bd36a524a89d1b","modified":1551013325108},{"_id":"public/tags/audio/index.html","hash":"af6dd623aab6df5104f4187b411a41288bcfe678","modified":1551013325108},{"_id":"public/tags/用户体验/index.html","hash":"af6dd623aab6df5104f4187b411a41288bcfe678","modified":1551013325108},{"_id":"public/tags/vue-router/index.html","hash":"c9459c431046d1ca02b29c7e2eeb4bb57e28eba0","modified":1551013325108},{"_id":"public/tags/管理系统/index.html","hash":"c9459c431046d1ca02b29c7e2eeb4bb57e28eba0","modified":1551013325108},{"_id":"public/tags/权限控制/index.html","hash":"c9459c431046d1ca02b29c7e2eeb4bb57e28eba0","modified":1551013325108},{"_id":"public/tags/‘效率’/index.html","hash":"63e28f22ea724b9296ea9819137614714d5d95a2","modified":1551013325108},{"_id":"public/tags/canvas/index.html","hash":"814ba23703e57d613f43202d4b473e84c0a6ac43","modified":1551013325108},{"_id":"public/tags/dpr/index.html","hash":"814ba23703e57d613f43202d4b473e84c0a6ac43","modified":1551013325108},{"_id":"public/tags/css/index.html","hash":"6eaf6b52b7d8daa243983c4683f35f7d3ac0d528","modified":1551013325109},{"_id":"public/tags/grid/index.html","hash":"6eaf6b52b7d8daa243983c4683f35f7d3ac0d528","modified":1551013325109},{"_id":"public/tags/responsive/index.html","hash":"6eaf6b52b7d8daa243983c4683f35f7d3ac0d528","modified":1551013325109},{"_id":"public/tags/FormData/index.html","hash":"3aaec4225a859a84c0968b92da63f975b6a457ce","modified":1551013325109},{"_id":"public/2017/03/04/promise/index.html","hash":"cf1ddb137893b3b11c349170df81544e0e4ecd24","modified":1551013325109},{"_id":"public/2017/03/11/javascripts权威指南笔记-6/index.html","hash":"476d8190d13aa2d90942161c524abddd8052cec1","modified":1551013325109},{"_id":"public/2017/03/18/javascripts权威指南笔记-8/index.html","hash":"1e38ce61f2710cd54bb0124194b3c4e853367e5f","modified":1551013325109},{"_id":"public/2017/03/25/使用gulp移动打包的静态资源到java项目/index.html","hash":"a16d918d2bfbbceb565572fa59d2015e19757ce0","modified":1551013325109},{"_id":"public/2017/05/20/使用gulp为静态资源添加版本号/index.html","hash":"0ab7a09041376c3becf9161519ec71f108b45ca2","modified":1551013325109},{"_id":"public/2017/06/24/使用karma+mocha+chai为vue组件进行单元测试/index.html","hash":"6b3c6b0b5c3479f986dd0b8d1beba0016263b0d2","modified":1551013325109},{"_id":"public/2017/07/08/基于vue-router的管理系统权限控制的实现/index.html","hash":"a5534dc4e2bf560f4aaf35d245d9205ed74fde79","modified":1551013325110},{"_id":"public/2017/08/26/借助webpack实现前端代码的懒加载/index.html","hash":"36b1ccbe581175b738b09285ca42caf89ae790eb","modified":1551013325110},{"_id":"public/2017/10/05/打造属于自己的栅格系统（翻译）/index.html","hash":"60478d09a3d289bfe10de940832a7e29648fe99e","modified":1551013325110},{"_id":"public/2017/10/20/《图解http》第六章笔记/index.html","hash":"6efdc44f370a9f025db43361a838fe75ae2530ef","modified":1551013325110},{"_id":"public/CNAME","hash":"d956ec462e841a1031e50c5183ba36f08c8871a9","modified":1550926344747},{"_id":"public/css/gandalfr.css.map","hash":"1af08c88c568f432180e7eaf989c64470f3f5251","modified":1551012778507},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1550926344747},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1550926344747},{"_id":"public/favicon.ico","hash":"ff97e9eeb291dcd407982d438f482280aa25a6d9","modified":1550926344772},{"_id":"public/css/gandalfr.css","hash":"9235fb16c6ee9e273854cd4b67c946fda2aa8e5c","modified":1551012778516},{"_id":"public/scss/gandalfr.css","hash":"b812960fd45eb0e7d9672cebfd50f60b812e8574","modified":1550926344775}],"Category":[{"name":"笔记","_id":"cjshhi1bn0003f4b4qtafup8x"},{"name":"工作总结","_id":"cjshhi1c7000ef4b4c0kcps79"},{"name":"工具","_id":"cjshhi1cx0017f4b41ay1tvvt"},{"name":"公共组件","_id":"cjshhi1d9001pf4b4w94r4i9i"},{"name":"测试","_id":"cjshhi1dj001wf4b4t7gajtup"},{"name":"翻译","_id":"cjshhi1dr0026f4b49sx296vb"}],"Data":[],"Page":[{"title":"about","date":"2016-11-03T09:04:50.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-03 17:04:50\ncomments: false\n---","updated":"2017-04-04T08:32:57.489Z","path":"about/index.html","layout":"page","_id":"cjshhi1bf0001f4b4v8filpbj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"babel常用配置记录","date":"2017-08-26T16:00:00.000Z","_content":"## 简介\nbabel是一个javascript语法的编译器，借助babel，我们可以使用新的javascript语法和api，编译成低版本的javascript语法，能被低版本的浏览器识别，解决浏览器的兼容性问题。\n## 使用\n使用babel主要是学会babel的配置,并安装相应插件,告诉babel我们需要编译成哪个版本的javascript。\n\nbabel的配置就是对presets和plugins进行配置，这样babel才能按照我们预想的进行工作。\n### presets\n预设，是预先设定好一系列转换标准的配置，可以当做是一系列插件（plugins）的集合。\n#### 官方preset\n1. env \n\nbabel-preset-env是根据你所支持的环境，依据[compat-table](https://github.com/kangax/compat-table)自动确定您需要的Babel插件。\n\n默认设置是会编译所有的ES2015+的新特性，行为和babel-preset-latest一样。\n\n常用设置项：\n* targets: { [string]: number }，默认{} \n\n设置需要支持的环境版本，例如chrome, opera, edge, firefox, safari, ie, ios, android, node, electron。\n\n推荐写上特定的版本号，如node: \"6.10\"。\n\n* targets.node: number | string | \"current\" | true\n\n设置node环境的版本\n\n* targets.browsers: Array<string> | string\n\n设置支持符合相应条件的浏览器集合，使用[browserslist](https://github.com/ai/browserslist),如\n````javascript\n{\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\"\n  ]\n}\n````\n其余配置项参考[babel-preset-env](https://babeljs.io/docs/plugins/preset-env/)\n\n2. es2015\n\n将es2015编译成es5。这个preset主要是包含了一系列转换es2015方法的插件\n> check-es2015-constants\n>\n> transform-es2015-arrow-functions\n>\n> transform-es2015-block-scoped-functions\n>\n> transform-es2015-block-scoping\n>\n> transform-es2015-classes\n>\n> transform-es2015-computed-properties\n>\n> transform-es2015-destructuring\n>\n> transform-es2015-duplicate-keys\n>\n> transform-es2015-for-of\n>\n> transform-es2015-function-name\n>\n> transform-es2015-literals\n>\n> transform-es2015-modules-commonjs\n>\n> transform-es2015-object-super\n>\n> transform-es2015-parameters\n>\n> transform-es2015-shorthand-properties\n>\n> transform-es2015-spread\n>\n> transform-es2015-sticky-regex\n>\n> transform-es2015-template-literals\n>\n> transform-es2015-typeof-symbol\n>\n> transform-es2015-unicode-regex\n>\n> transform-regenerator\n\n常用设置项：\n* modules: \"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, defaults to \"commonjs\".\n3. es2016\n\n将es2016编译成es5\n4. es2017\n\n将es2017编译成es5\n5. Latest preset\n\n包含最新的preset，包括了es2015，es2016，es2017的预设。\n\n已经被移除，使用preset-env代替。\n6. react\n专门对react推出的预设，包含：\n\npreset-flow\n\nsyntax-jsx\n\ntransform-react-jsx\n\ntransform-react-display-name\n7. Flow preset\n包含transform-flow-strip-types插件，用来转换javascript静态类型检查(flow语法)。\n####　Stage-X (试验性预设)\nStage-X预设是用来转换那些未被批准，未发布Javascript的语言特性。\n\nStage-X是按照javascript的语法提案阶段区分的。\n\nTC39（Technical Committee 39）是一个推动JavaScript发展的委员会。每一项新特性，要最终纳入ECMAScript规范中，TC39拟定了一个处理过程，称为TC39 process。\n\n其中共包含5个阶段，Stage 0 ~ Stage 4。\n* Stage 0: strawman\n\n一种推进ECMAScript发展的自由形式，任何TC39成员，或者注册为TC39贡献者的会员，都可以提交。\n\n* Stage 1: proposal\n\n该阶段产生一个正式的提案。\n\n* Stage 2: draft\n\n草案是规范的第一个版本，与最终标准中包含的特性不会有太大差别。\n\n* Stage 3: candidate\n\n候选阶段，获得具体实现和用户的反馈。\n\n* Stage 4: finished\n\n已经准备就绪，该特性会出现在年度发布的规范之中。\n\n可以看到Stage-0包含的范围是最广的，一般使用选择babel-preset-stage-2。\n### plugins\n插件，专门针对某一个语法或某个单一功能的转换。\n[插件列表](https://babeljs.io/docs/plugins/#transform-plugins)\n#### 常用插件\n* babel-plugin-transform-es2015-classes\n\n用于转换ES2015的类到ES5。\n\n* babel-plugin-transform-es2015-spread\n\n转换ES2015的扩展运算符。\n\n* babel-plugin-transform-react-jsx\n\n转换jsx语法\n\n* babel-plugin-transform-runtime\n\ntransform-runtime提供包含编译模块的工具函数。\n\nbabel在转换 ES2015 语法为 ES 5 的语法时，babel需要一些辅助函数，例如 _extend。babel默认会将这些辅助函数直接插入到每一个 js 文件里，这样文件多的时候，重复的辅助函数多，项目重复代码就很多。\n\n所以 babel 提供了 transform-runtime 来将这些辅助函数都引入到一个单独的模块 babel-runtime 中，避免重复的代码。\n\nBabel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。\n\n像 Promise 这样的全局对象会污染全局命名空间，这就要求库的使用者自己提供 polyfill。这些 polyfill 一般在库和工具的使用说明中会提到，比如很多库都会有要求提供 es5 的 polyfill。在使用 babel-runtime 后，库和工具只要在 package.json 中增加依赖 babel-runtime，交给 babel-runtime 去引入 polyfill 就行了，所以使用transform-runtime另一个作用是为你的代码提供一个沙盒环境。\n\n常用设置项：\n\nhelpers：boolean, defaults to true.\n\n是否引入Babel的helpers函数。\n\npolyfill：boolean, defaults to true.\n\n是否使用不会污染全局的polyfill。\n\n非实例方法的polyfill，如Object.assign，但是实例方法不支持，如\"foobar\".includes(\"foo\")，这时候需要单独引入babel-polyfill\n## 执行顺序\n* 插件在预设之前执行。\n* 插件的执行顺序是从前往后。\n* 预设的执行顺序是从后往前。\n## 参考资料\n[transform-runtime](https://babeljs.io/docs/plugins/transform-runtime)\n[https://segmentfault.com/q/1010000005596587](https://segmentfault.com/q/1010000005596587)\n[https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/](https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/)\n","source":"_posts/babel常用配置记录.md","raw":"---\ntitle: babel常用配置记录\ndate: 2017-08-27\ntags: ['babel']\ncategories: ['笔记']\n---\n## 简介\nbabel是一个javascript语法的编译器，借助babel，我们可以使用新的javascript语法和api，编译成低版本的javascript语法，能被低版本的浏览器识别，解决浏览器的兼容性问题。\n## 使用\n使用babel主要是学会babel的配置,并安装相应插件,告诉babel我们需要编译成哪个版本的javascript。\n\nbabel的配置就是对presets和plugins进行配置，这样babel才能按照我们预想的进行工作。\n### presets\n预设，是预先设定好一系列转换标准的配置，可以当做是一系列插件（plugins）的集合。\n#### 官方preset\n1. env \n\nbabel-preset-env是根据你所支持的环境，依据[compat-table](https://github.com/kangax/compat-table)自动确定您需要的Babel插件。\n\n默认设置是会编译所有的ES2015+的新特性，行为和babel-preset-latest一样。\n\n常用设置项：\n* targets: { [string]: number }，默认{} \n\n设置需要支持的环境版本，例如chrome, opera, edge, firefox, safari, ie, ios, android, node, electron。\n\n推荐写上特定的版本号，如node: \"6.10\"。\n\n* targets.node: number | string | \"current\" | true\n\n设置node环境的版本\n\n* targets.browsers: Array<string> | string\n\n设置支持符合相应条件的浏览器集合，使用[browserslist](https://github.com/ai/browserslist),如\n````javascript\n{\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\"\n  ]\n}\n````\n其余配置项参考[babel-preset-env](https://babeljs.io/docs/plugins/preset-env/)\n\n2. es2015\n\n将es2015编译成es5。这个preset主要是包含了一系列转换es2015方法的插件\n> check-es2015-constants\n>\n> transform-es2015-arrow-functions\n>\n> transform-es2015-block-scoped-functions\n>\n> transform-es2015-block-scoping\n>\n> transform-es2015-classes\n>\n> transform-es2015-computed-properties\n>\n> transform-es2015-destructuring\n>\n> transform-es2015-duplicate-keys\n>\n> transform-es2015-for-of\n>\n> transform-es2015-function-name\n>\n> transform-es2015-literals\n>\n> transform-es2015-modules-commonjs\n>\n> transform-es2015-object-super\n>\n> transform-es2015-parameters\n>\n> transform-es2015-shorthand-properties\n>\n> transform-es2015-spread\n>\n> transform-es2015-sticky-regex\n>\n> transform-es2015-template-literals\n>\n> transform-es2015-typeof-symbol\n>\n> transform-es2015-unicode-regex\n>\n> transform-regenerator\n\n常用设置项：\n* modules: \"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, defaults to \"commonjs\".\n3. es2016\n\n将es2016编译成es5\n4. es2017\n\n将es2017编译成es5\n5. Latest preset\n\n包含最新的preset，包括了es2015，es2016，es2017的预设。\n\n已经被移除，使用preset-env代替。\n6. react\n专门对react推出的预设，包含：\n\npreset-flow\n\nsyntax-jsx\n\ntransform-react-jsx\n\ntransform-react-display-name\n7. Flow preset\n包含transform-flow-strip-types插件，用来转换javascript静态类型检查(flow语法)。\n####　Stage-X (试验性预设)\nStage-X预设是用来转换那些未被批准，未发布Javascript的语言特性。\n\nStage-X是按照javascript的语法提案阶段区分的。\n\nTC39（Technical Committee 39）是一个推动JavaScript发展的委员会。每一项新特性，要最终纳入ECMAScript规范中，TC39拟定了一个处理过程，称为TC39 process。\n\n其中共包含5个阶段，Stage 0 ~ Stage 4。\n* Stage 0: strawman\n\n一种推进ECMAScript发展的自由形式，任何TC39成员，或者注册为TC39贡献者的会员，都可以提交。\n\n* Stage 1: proposal\n\n该阶段产生一个正式的提案。\n\n* Stage 2: draft\n\n草案是规范的第一个版本，与最终标准中包含的特性不会有太大差别。\n\n* Stage 3: candidate\n\n候选阶段，获得具体实现和用户的反馈。\n\n* Stage 4: finished\n\n已经准备就绪，该特性会出现在年度发布的规范之中。\n\n可以看到Stage-0包含的范围是最广的，一般使用选择babel-preset-stage-2。\n### plugins\n插件，专门针对某一个语法或某个单一功能的转换。\n[插件列表](https://babeljs.io/docs/plugins/#transform-plugins)\n#### 常用插件\n* babel-plugin-transform-es2015-classes\n\n用于转换ES2015的类到ES5。\n\n* babel-plugin-transform-es2015-spread\n\n转换ES2015的扩展运算符。\n\n* babel-plugin-transform-react-jsx\n\n转换jsx语法\n\n* babel-plugin-transform-runtime\n\ntransform-runtime提供包含编译模块的工具函数。\n\nbabel在转换 ES2015 语法为 ES 5 的语法时，babel需要一些辅助函数，例如 _extend。babel默认会将这些辅助函数直接插入到每一个 js 文件里，这样文件多的时候，重复的辅助函数多，项目重复代码就很多。\n\n所以 babel 提供了 transform-runtime 来将这些辅助函数都引入到一个单独的模块 babel-runtime 中，避免重复的代码。\n\nBabel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。\n\n像 Promise 这样的全局对象会污染全局命名空间，这就要求库的使用者自己提供 polyfill。这些 polyfill 一般在库和工具的使用说明中会提到，比如很多库都会有要求提供 es5 的 polyfill。在使用 babel-runtime 后，库和工具只要在 package.json 中增加依赖 babel-runtime，交给 babel-runtime 去引入 polyfill 就行了，所以使用transform-runtime另一个作用是为你的代码提供一个沙盒环境。\n\n常用设置项：\n\nhelpers：boolean, defaults to true.\n\n是否引入Babel的helpers函数。\n\npolyfill：boolean, defaults to true.\n\n是否使用不会污染全局的polyfill。\n\n非实例方法的polyfill，如Object.assign，但是实例方法不支持，如\"foobar\".includes(\"foo\")，这时候需要单独引入babel-polyfill\n## 执行顺序\n* 插件在预设之前执行。\n* 插件的执行顺序是从前往后。\n* 预设的执行顺序是从后往前。\n## 参考资料\n[transform-runtime](https://babeljs.io/docs/plugins/transform-runtime)\n[https://segmentfault.com/q/1010000005596587](https://segmentfault.com/q/1010000005596587)\n[https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/](https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/)\n","slug":"babel常用配置记录","published":1,"updated":"2017-10-12T14:17:00.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1b80000f4b44qhs0xq4","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>babel是一个javascript语法的编译器，借助babel，我们可以使用新的javascript语法和api，编译成低版本的javascript语法，能被低版本的浏览器识别，解决浏览器的兼容性问题。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用babel主要是学会babel的配置,并安装相应插件,告诉babel我们需要编译成哪个版本的javascript。</p>\n<p>babel的配置就是对presets和plugins进行配置，这样babel才能按照我们预想的进行工作。</p>\n<h3 id=\"presets\"><a href=\"#presets\" class=\"headerlink\" title=\"presets\"></a>presets</h3><p>预设，是预先设定好一系列转换标准的配置，可以当做是一系列插件（plugins）的集合。</p>\n<h4 id=\"官方preset\"><a href=\"#官方preset\" class=\"headerlink\" title=\"官方preset\"></a>官方preset</h4><ol>\n<li>env </li>\n</ol>\n<p>babel-preset-env是根据你所支持的环境，依据<a href=\"https://github.com/kangax/compat-table\" target=\"_blank\" rel=\"external\">compat-table</a>自动确定您需要的Babel插件。</p>\n<p>默认设置是会编译所有的ES2015+的新特性，行为和babel-preset-latest一样。</p>\n<p>常用设置项：</p>\n<ul>\n<li>targets: { [string]: number }，默认{} </li>\n</ul>\n<p>设置需要支持的环境版本，例如chrome, opera, edge, firefox, safari, ie, ios, android, node, electron。</p>\n<p>推荐写上特定的版本号，如node: “6.10”。</p>\n<ul>\n<li>targets.node: number | string | “current” | true</li>\n</ul>\n<p>设置node环境的版本</p>\n<ul>\n<li>targets.browsers: Array<string> | string</string></li>\n</ul>\n<p>设置支持符合相应条件的浏览器集合，使用<a href=\"https://github.com/ai/browserslist\" target=\"_blank\" rel=\"external\">browserslist</a>,如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"browserslist\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"&gt; 1%\"</span>,</div><div class=\"line\">    <span class=\"string\">\"last 2 versions\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其余配置项参考<a href=\"https://babeljs.io/docs/plugins/preset-env/\" target=\"_blank\" rel=\"external\">babel-preset-env</a></p>\n<ol>\n<li>es2015</li>\n</ol>\n<p>将es2015编译成es5。这个preset主要是包含了一系列转换es2015方法的插件</p>\n<blockquote>\n<p>check-es2015-constants</p>\n<p>transform-es2015-arrow-functions</p>\n<p>transform-es2015-block-scoped-functions</p>\n<p>transform-es2015-block-scoping</p>\n<p>transform-es2015-classes</p>\n<p>transform-es2015-computed-properties</p>\n<p>transform-es2015-destructuring</p>\n<p>transform-es2015-duplicate-keys</p>\n<p>transform-es2015-for-of</p>\n<p>transform-es2015-function-name</p>\n<p>transform-es2015-literals</p>\n<p>transform-es2015-modules-commonjs</p>\n<p>transform-es2015-object-super</p>\n<p>transform-es2015-parameters</p>\n<p>transform-es2015-shorthand-properties</p>\n<p>transform-es2015-spread</p>\n<p>transform-es2015-sticky-regex</p>\n<p>transform-es2015-template-literals</p>\n<p>transform-es2015-typeof-symbol</p>\n<p>transform-es2015-unicode-regex</p>\n<p>transform-regenerator</p>\n</blockquote>\n<p>常用设置项：</p>\n<ul>\n<li>modules: “amd” | “umd” | “systemjs” | “commonjs” | false, defaults to “commonjs”.</li>\n</ul>\n<ol>\n<li>es2016</li>\n</ol>\n<p>将es2016编译成es5</p>\n<ol>\n<li>es2017</li>\n</ol>\n<p>将es2017编译成es5</p>\n<ol>\n<li>Latest preset</li>\n</ol>\n<p>包含最新的preset，包括了es2015，es2016，es2017的预设。</p>\n<p>已经被移除，使用preset-env代替。</p>\n<ol>\n<li>react<br>专门对react推出的预设，包含：</li>\n</ol>\n<p>preset-flow</p>\n<p>syntax-jsx</p>\n<p>transform-react-jsx</p>\n<p>transform-react-display-name</p>\n<ol>\n<li>Flow preset<br>包含transform-flow-strip-types插件，用来转换javascript静态类型检查(flow语法)。<br>####　Stage-X (试验性预设)<br>Stage-X预设是用来转换那些未被批准，未发布Javascript的语言特性。</li>\n</ol>\n<p>Stage-X是按照javascript的语法提案阶段区分的。</p>\n<p>TC39（Technical Committee 39）是一个推动JavaScript发展的委员会。每一项新特性，要最终纳入ECMAScript规范中，TC39拟定了一个处理过程，称为TC39 process。</p>\n<p>其中共包含5个阶段，Stage 0 ~ Stage 4。</p>\n<ul>\n<li>Stage 0: strawman</li>\n</ul>\n<p>一种推进ECMAScript发展的自由形式，任何TC39成员，或者注册为TC39贡献者的会员，都可以提交。</p>\n<ul>\n<li>Stage 1: proposal</li>\n</ul>\n<p>该阶段产生一个正式的提案。</p>\n<ul>\n<li>Stage 2: draft</li>\n</ul>\n<p>草案是规范的第一个版本，与最终标准中包含的特性不会有太大差别。</p>\n<ul>\n<li>Stage 3: candidate</li>\n</ul>\n<p>候选阶段，获得具体实现和用户的反馈。</p>\n<ul>\n<li>Stage 4: finished</li>\n</ul>\n<p>已经准备就绪，该特性会出现在年度发布的规范之中。</p>\n<p>可以看到Stage-0包含的范围是最广的，一般使用选择babel-preset-stage-2。</p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h3><p>插件，专门针对某一个语法或某个单一功能的转换。<br><a href=\"https://babeljs.io/docs/plugins/#transform-plugins\" target=\"_blank\" rel=\"external\">插件列表</a></p>\n<h4 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h4><ul>\n<li>babel-plugin-transform-es2015-classes</li>\n</ul>\n<p>用于转换ES2015的类到ES5。</p>\n<ul>\n<li>babel-plugin-transform-es2015-spread</li>\n</ul>\n<p>转换ES2015的扩展运算符。</p>\n<ul>\n<li>babel-plugin-transform-react-jsx</li>\n</ul>\n<p>转换jsx语法</p>\n<ul>\n<li>babel-plugin-transform-runtime</li>\n</ul>\n<p>transform-runtime提供包含编译模块的工具函数。</p>\n<p>babel在转换 ES2015 语法为 ES 5 的语法时，babel需要一些辅助函数，例如 _extend。babel默认会将这些辅助函数直接插入到每一个 js 文件里，这样文件多的时候，重复的辅助函数多，项目重复代码就很多。</p>\n<p>所以 babel 提供了 transform-runtime 来将这些辅助函数都引入到一个单独的模块 babel-runtime 中，避免重复的代码。</p>\n<p>Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。</p>\n<p>像 Promise 这样的全局对象会污染全局命名空间，这就要求库的使用者自己提供 polyfill。这些 polyfill 一般在库和工具的使用说明中会提到，比如很多库都会有要求提供 es5 的 polyfill。在使用 babel-runtime 后，库和工具只要在 package.json 中增加依赖 babel-runtime，交给 babel-runtime 去引入 polyfill 就行了，所以使用transform-runtime另一个作用是为你的代码提供一个沙盒环境。</p>\n<p>常用设置项：</p>\n<p>helpers：boolean, defaults to true.</p>\n<p>是否引入Babel的helpers函数。</p>\n<p>polyfill：boolean, defaults to true.</p>\n<p>是否使用不会污染全局的polyfill。</p>\n<p>非实例方法的polyfill，如Object.assign，但是实例方法不支持，如”foobar”.includes(“foo”)，这时候需要单独引入babel-polyfill</p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><ul>\n<li>插件在预设之前执行。</li>\n<li>插件的执行顺序是从前往后。</li>\n<li>预设的执行顺序是从后往前。<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><a href=\"https://babeljs.io/docs/plugins/transform-runtime\" target=\"_blank\" rel=\"external\">transform-runtime</a><br><a href=\"https://segmentfault.com/q/1010000005596587\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000005596587</a><br><a href=\"https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/\" target=\"_blank\" rel=\"external\">https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>babel是一个javascript语法的编译器，借助babel，我们可以使用新的javascript语法和api，编译成低版本的javascript语法，能被低版本的浏览器识别，解决浏览器的兼容性问题。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用babel主要是学会babel的配置,并安装相应插件,告诉babel我们需要编译成哪个版本的javascript。</p>\n<p>babel的配置就是对presets和plugins进行配置，这样babel才能按照我们预想的进行工作。</p>\n<h3 id=\"presets\"><a href=\"#presets\" class=\"headerlink\" title=\"presets\"></a>presets</h3><p>预设，是预先设定好一系列转换标准的配置，可以当做是一系列插件（plugins）的集合。</p>\n<h4 id=\"官方preset\"><a href=\"#官方preset\" class=\"headerlink\" title=\"官方preset\"></a>官方preset</h4><ol>\n<li>env </li>\n</ol>\n<p>babel-preset-env是根据你所支持的环境，依据<a href=\"https://github.com/kangax/compat-table\">compat-table</a>自动确定您需要的Babel插件。</p>\n<p>默认设置是会编译所有的ES2015+的新特性，行为和babel-preset-latest一样。</p>\n<p>常用设置项：</p>\n<ul>\n<li>targets: { [string]: number }，默认{} </li>\n</ul>\n<p>设置需要支持的环境版本，例如chrome, opera, edge, firefox, safari, ie, ios, android, node, electron。</p>\n<p>推荐写上特定的版本号，如node: “6.10”。</p>\n<ul>\n<li>targets.node: number | string | “current” | true</li>\n</ul>\n<p>设置node环境的版本</p>\n<ul>\n<li>targets.browsers: Array<string> | string</li>\n</ul>\n<p>设置支持符合相应条件的浏览器集合，使用<a href=\"https://github.com/ai/browserslist\">browserslist</a>,如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"browserslist\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"&gt; 1%\"</span>,</div><div class=\"line\">    <span class=\"string\">\"last 2 versions\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其余配置项参考<a href=\"https://babeljs.io/docs/plugins/preset-env/\">babel-preset-env</a></p>\n<ol>\n<li>es2015</li>\n</ol>\n<p>将es2015编译成es5。这个preset主要是包含了一系列转换es2015方法的插件</p>\n<blockquote>\n<p>check-es2015-constants</p>\n<p>transform-es2015-arrow-functions</p>\n<p>transform-es2015-block-scoped-functions</p>\n<p>transform-es2015-block-scoping</p>\n<p>transform-es2015-classes</p>\n<p>transform-es2015-computed-properties</p>\n<p>transform-es2015-destructuring</p>\n<p>transform-es2015-duplicate-keys</p>\n<p>transform-es2015-for-of</p>\n<p>transform-es2015-function-name</p>\n<p>transform-es2015-literals</p>\n<p>transform-es2015-modules-commonjs</p>\n<p>transform-es2015-object-super</p>\n<p>transform-es2015-parameters</p>\n<p>transform-es2015-shorthand-properties</p>\n<p>transform-es2015-spread</p>\n<p>transform-es2015-sticky-regex</p>\n<p>transform-es2015-template-literals</p>\n<p>transform-es2015-typeof-symbol</p>\n<p>transform-es2015-unicode-regex</p>\n<p>transform-regenerator</p>\n</blockquote>\n<p>常用设置项：</p>\n<ul>\n<li>modules: “amd” | “umd” | “systemjs” | “commonjs” | false, defaults to “commonjs”.</li>\n</ul>\n<ol>\n<li>es2016</li>\n</ol>\n<p>将es2016编译成es5</p>\n<ol>\n<li>es2017</li>\n</ol>\n<p>将es2017编译成es5</p>\n<ol>\n<li>Latest preset</li>\n</ol>\n<p>包含最新的preset，包括了es2015，es2016，es2017的预设。</p>\n<p>已经被移除，使用preset-env代替。</p>\n<ol>\n<li>react<br>专门对react推出的预设，包含：</li>\n</ol>\n<p>preset-flow</p>\n<p>syntax-jsx</p>\n<p>transform-react-jsx</p>\n<p>transform-react-display-name</p>\n<ol>\n<li>Flow preset<br>包含transform-flow-strip-types插件，用来转换javascript静态类型检查(flow语法)。<br>####　Stage-X (试验性预设)<br>Stage-X预设是用来转换那些未被批准，未发布Javascript的语言特性。</li>\n</ol>\n<p>Stage-X是按照javascript的语法提案阶段区分的。</p>\n<p>TC39（Technical Committee 39）是一个推动JavaScript发展的委员会。每一项新特性，要最终纳入ECMAScript规范中，TC39拟定了一个处理过程，称为TC39 process。</p>\n<p>其中共包含5个阶段，Stage 0 ~ Stage 4。</p>\n<ul>\n<li>Stage 0: strawman</li>\n</ul>\n<p>一种推进ECMAScript发展的自由形式，任何TC39成员，或者注册为TC39贡献者的会员，都可以提交。</p>\n<ul>\n<li>Stage 1: proposal</li>\n</ul>\n<p>该阶段产生一个正式的提案。</p>\n<ul>\n<li>Stage 2: draft</li>\n</ul>\n<p>草案是规范的第一个版本，与最终标准中包含的特性不会有太大差别。</p>\n<ul>\n<li>Stage 3: candidate</li>\n</ul>\n<p>候选阶段，获得具体实现和用户的反馈。</p>\n<ul>\n<li>Stage 4: finished</li>\n</ul>\n<p>已经准备就绪，该特性会出现在年度发布的规范之中。</p>\n<p>可以看到Stage-0包含的范围是最广的，一般使用选择babel-preset-stage-2。</p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h3><p>插件，专门针对某一个语法或某个单一功能的转换。<br><a href=\"https://babeljs.io/docs/plugins/#transform-plugins\">插件列表</a></p>\n<h4 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h4><ul>\n<li>babel-plugin-transform-es2015-classes</li>\n</ul>\n<p>用于转换ES2015的类到ES5。</p>\n<ul>\n<li>babel-plugin-transform-es2015-spread</li>\n</ul>\n<p>转换ES2015的扩展运算符。</p>\n<ul>\n<li>babel-plugin-transform-react-jsx</li>\n</ul>\n<p>转换jsx语法</p>\n<ul>\n<li>babel-plugin-transform-runtime</li>\n</ul>\n<p>transform-runtime提供包含编译模块的工具函数。</p>\n<p>babel在转换 ES2015 语法为 ES 5 的语法时，babel需要一些辅助函数，例如 _extend。babel默认会将这些辅助函数直接插入到每一个 js 文件里，这样文件多的时候，重复的辅助函数多，项目重复代码就很多。</p>\n<p>所以 babel 提供了 transform-runtime 来将这些辅助函数都引入到一个单独的模块 babel-runtime 中，避免重复的代码。</p>\n<p>Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。</p>\n<p>像 Promise 这样的全局对象会污染全局命名空间，这就要求库的使用者自己提供 polyfill。这些 polyfill 一般在库和工具的使用说明中会提到，比如很多库都会有要求提供 es5 的 polyfill。在使用 babel-runtime 后，库和工具只要在 package.json 中增加依赖 babel-runtime，交给 babel-runtime 去引入 polyfill 就行了，所以使用transform-runtime另一个作用是为你的代码提供一个沙盒环境。</p>\n<p>常用设置项：</p>\n<p>helpers：boolean, defaults to true.</p>\n<p>是否引入Babel的helpers函数。</p>\n<p>polyfill：boolean, defaults to true.</p>\n<p>是否使用不会污染全局的polyfill。</p>\n<p>非实例方法的polyfill，如Object.assign，但是实例方法不支持，如”foobar”.includes(“foo”)，这时候需要单独引入babel-polyfill</p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><ul>\n<li>插件在预设之前执行。</li>\n<li>插件的执行顺序是从前往后。</li>\n<li>预设的执行顺序是从后往前。<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><a href=\"https://babeljs.io/docs/plugins/transform-runtime\">transform-runtime</a><br><a href=\"https://segmentfault.com/q/1010000005596587\">https://segmentfault.com/q/1010000005596587</a><br><a href=\"https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/\">https://www.vanadis.cn/2017/04/28/difference-between-babel-polyfill-and-babel-runtime/</a></li>\n</ul>\n"},{"title":"html标签语意化的区别","date":"2017-10-19T16:00:00.000Z","_content":"## title 和 H1 \n* title\n\nHTML \\<title\\> 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包含的任何标签都不会被解释。\n\n* H1\n标题(Heading)元素拥有六个不同的级别，\\<h1\\> 是最高级的，而 \\<h6\\> 则是最低的级别。 一个标题元素能简要描述该节的主题。\n## b 和 strong\n* b\n\nHTML \\<b\\>元素表表示相对于普通文本字体上的区别，但不表示任何特殊的强调或者关联，通常以粗体显示。\n\n* strong\n\nStrong 元素 (\\<strong\\>)表示文本十分重要，一般用粗体显示。\n\n## i 和 em\n* i\n\nHTML元素 \\<i\\> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。\n* em\n\nHTML 着重元素 (\\<em\\>) 标记出需要用户着重阅读的内容， \\<em\\> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。\n## 补充\n> 在HTML4.01中： \n> < b >  < i > 是视觉要素（presentationl elements），分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder }，仅仅表示「这里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在HTML4.01中并不被推荐使用；\n> \n> < em >  和  < strong >  是表达要素(phrase elements)。 < em > （emphasized text）表示一般的强调文本，而 < strong > （strong emphasized text）表示比 < em > 语义更强的的强调文本。\n> \n> 而在新的 HTML5 工作草案 中：\n> \n> < em >  和  < strong >  仍旧是表达要素(phrase elements)。但这时的 < strong > 表示html页面上的强调（emphasized text）， < em > 表示句子中的强调（即强调语义）\n>\n> 从规范中可以注意到：b 和 i 元素将被赋予真正的语义。更应有预见性注意 b 、i 与 strong 、em 的不同使用 。\n\n## 参考资料\n* [https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element)\n* [https://www.zhihu.com/question/19551271/answer/12521687](https://www.zhihu.com/question/19551271/answer/12521687)\n","source":"_posts/html标签语义化的区别.md","raw":"---\ntitle: html标签语意化的区别\ndate: 2017-10-20\ntags: ['html','语意化']\ncategories: ['笔记']\n---\n## title 和 H1 \n* title\n\nHTML \\<title\\> 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包含的任何标签都不会被解释。\n\n* H1\n标题(Heading)元素拥有六个不同的级别，\\<h1\\> 是最高级的，而 \\<h6\\> 则是最低的级别。 一个标题元素能简要描述该节的主题。\n## b 和 strong\n* b\n\nHTML \\<b\\>元素表表示相对于普通文本字体上的区别，但不表示任何特殊的强调或者关联，通常以粗体显示。\n\n* strong\n\nStrong 元素 (\\<strong\\>)表示文本十分重要，一般用粗体显示。\n\n## i 和 em\n* i\n\nHTML元素 \\<i\\> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。\n* em\n\nHTML 着重元素 (\\<em\\>) 标记出需要用户着重阅读的内容， \\<em\\> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。\n## 补充\n> 在HTML4.01中： \n> < b >  < i > 是视觉要素（presentationl elements），分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder }，仅仅表示「这里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在HTML4.01中并不被推荐使用；\n> \n> < em >  和  < strong >  是表达要素(phrase elements)。 < em > （emphasized text）表示一般的强调文本，而 < strong > （strong emphasized text）表示比 < em > 语义更强的的强调文本。\n> \n> 而在新的 HTML5 工作草案 中：\n> \n> < em >  和  < strong >  仍旧是表达要素(phrase elements)。但这时的 < strong > 表示html页面上的强调（emphasized text）， < em > 表示句子中的强调（即强调语义）\n>\n> 从规范中可以注意到：b 和 i 元素将被赋予真正的语义。更应有预见性注意 b 、i 与 strong 、em 的不同使用 。\n\n## 参考资料\n* [https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element)\n* [https://www.zhihu.com/question/19551271/answer/12521687](https://www.zhihu.com/question/19551271/answer/12521687)\n","slug":"html标签语义化的区别","published":1,"updated":"2017-10-25T14:07:47.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1bk0002f4b4xrd4fwfj","content":"<h2 id=\"title-和-H1\"><a href=\"#title-和-H1\" class=\"headerlink\" title=\"title 和 H1\"></a>title 和 H1</h2><ul>\n<li>title</li>\n</ul>\n<p>HTML \\<title\\> 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包含的任何标签都不会被解释。</title\\></p>\n<ul>\n<li>H1<br>标题(Heading)元素拥有六个不同的级别，\\<h1\\> 是最高级的，而 \\<h6\\> 则是最低的级别。 一个标题元素能简要描述该节的主题。<h2 id=\"b-和-strong\"><a href=\"#b-和-strong\" class=\"headerlink\" title=\"b 和 strong\"></a>b 和 strong</h2></h6\\></h1\\></li>\n<li>b</li>\n</ul>\n<p>HTML \\<b\\>元素表表示相对于普通文本字体上的区别，但不表示任何特殊的强调或者关联，通常以粗体显示。</b\\></p>\n<ul>\n<li>strong</li>\n</ul>\n<p>Strong 元素 (\\<strong\\>)表示文本十分重要，一般用粗体显示。</strong\\></p>\n<h2 id=\"i-和-em\"><a href=\"#i-和-em\" class=\"headerlink\" title=\"i 和 em\"></a>i 和 em</h2><ul>\n<li>i</li>\n</ul>\n<p>HTML元素 \\<i\\> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。</i\\></p>\n<ul>\n<li>em</li>\n</ul>\n<p>HTML 着重元素 (\\<em\\>) 标记出需要用户着重阅读的内容， \\<em\\> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。</em\\></em\\></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><blockquote>\n<p>在HTML4.01中：<br>&lt; b &gt;  &lt; i &gt; 是视觉要素（presentationl elements），分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder }，仅仅表示「这里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在HTML4.01中并不被推荐使用；</p>\n<p>&lt; em &gt;  和  &lt; strong &gt;  是表达要素(phrase elements)。 &lt; em &gt; （emphasized text）表示一般的强调文本，而 &lt; strong &gt; （strong emphasized text）表示比 &lt; em &gt; 语义更强的的强调文本。</p>\n<p>而在新的 HTML5 工作草案 中：</p>\n<p>&lt; em &gt;  和  &lt; strong &gt;  仍旧是表达要素(phrase elements)。但这时的 &lt; strong &gt; 表示html页面上的强调（emphasized text）， &lt; em &gt; 表示句子中的强调（即强调语义）</p>\n<p>从规范中可以注意到：b 和 i 元素将被赋予真正的语义。更应有预见性注意 b 、i 与 strong 、em 的不同使用 。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li>\n<li><a href=\"https://www.zhihu.com/question/19551271/answer/12521687\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19551271/answer/12521687</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"title-和-H1\"><a href=\"#title-和-H1\" class=\"headerlink\" title=\"title 和 H1\"></a>title 和 H1</h2><ul>\n<li>title</li>\n</ul>\n<p>HTML \\<title\\> 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包含的任何标签都不会被解释。</p>\n<ul>\n<li>H1<br>标题(Heading)元素拥有六个不同的级别，\\<h1\\> 是最高级的，而 \\<h6\\> 则是最低的级别。 一个标题元素能简要描述该节的主题。<h2 id=\"b-和-strong\"><a href=\"#b-和-strong\" class=\"headerlink\" title=\"b 和 strong\"></a>b 和 strong</h2></li>\n<li>b</li>\n</ul>\n<p>HTML \\<b\\>元素表表示相对于普通文本字体上的区别，但不表示任何特殊的强调或者关联，通常以粗体显示。</p>\n<ul>\n<li>strong</li>\n</ul>\n<p>Strong 元素 (\\<strong\\>)表示文本十分重要，一般用粗体显示。</p>\n<h2 id=\"i-和-em\"><a href=\"#i-和-em\" class=\"headerlink\" title=\"i 和 em\"></a>i 和 em</h2><ul>\n<li>i</li>\n</ul>\n<p>HTML元素 \\<i\\> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。</p>\n<ul>\n<li>em</li>\n</ul>\n<p>HTML 着重元素 (\\<em\\>) 标记出需要用户着重阅读的内容， \\<em\\> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><blockquote>\n<p>在HTML4.01中：<br>&lt; b &gt;  &lt; i &gt; 是视觉要素（presentationl elements），分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder }，仅仅表示「这里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在HTML4.01中并不被推荐使用；</p>\n<p>&lt; em &gt;  和  &lt; strong &gt;  是表达要素(phrase elements)。 &lt; em &gt; （emphasized text）表示一般的强调文本，而 &lt; strong &gt; （strong emphasized text）表示比 &lt; em &gt; 语义更强的的强调文本。</p>\n<p>而在新的 HTML5 工作草案 中：</p>\n<p>&lt; em &gt;  和  &lt; strong &gt;  仍旧是表达要素(phrase elements)。但这时的 &lt; strong &gt; 表示html页面上的强调（emphasized text）， &lt; em &gt; 表示句子中的强调（即强调语义）</p>\n<p>从规范中可以注意到：b 和 i 元素将被赋予真正的语义。更应有预见性注意 b 、i 与 strong 、em 的不同使用 。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li>\n<li><a href=\"https://www.zhihu.com/question/19551271/answer/12521687\">https://www.zhihu.com/question/19551271/answer/12521687</a></li>\n</ul>\n"},{"title":"iOS的iframe宽度bug","date":"2017-09-29T16:00:00.000Z","_content":"## 问题背景\n最近做一个项目里，有一个使用了[slick](https://github.com/kenwheeler/slick)插件做轮播效果的页面，本身打开一切正常。后面这个页面被嵌在另一个页面的iframe下时，iframe的宽度设置为100%，在iOS里打开，页面就变得不正常了，轮播部分好像被放得很大，把其他元素挤出屏幕外，轮播来回切换，页面来回闪烁。\n<!--more-->\n## 产生原因\niOS下的safari是按照iframe里面页面元素的全尺寸来调整iframe的大小的。\n\n轮播效果的实现原理是将所有的幻灯片都放到一个块里面，然后设置溢出隐藏，在iOS的iframe下，结合上面第一条原因，就会将iframe撑得很大。\n## 解决方案\n### 方案一\n在包含轮播组件的元素上设置以下样式：\n````css\n{\n  width: 1px;\n  min-width: 100%;\n}\n````\n或者设置\n````css\n{\n  width: 100vw;\n}\n````\n### 方案二\n在iframe上设置以下样式\n````css\niframe {\n  width: 1px;\n  min-width: 100%;\n  *width: 100%;\n}\n````\n同时设置scrolling属性为'no'。\n````html\n<iframe height=\"950\" width=\"100%\" scrolling=\"no\" src=\"Content.html\"></iframe>\n````\n## 参考资料\n* [https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/](https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/)\n* [https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view](https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view)\n* [https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari](https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari)\n* [https://github.com/kenwheeler/slick/issues/1470](https://github.com/kenwheeler/slick/issues/1470)\n","source":"_posts/iOS的iframe宽度bug.md","raw":"---\ntitle: iOS的iframe宽度bug\ndate: 2017-09-30\ntags: ['iOS','iframe','bug']\ncategories: ['工作总结']\n---\n## 问题背景\n最近做一个项目里，有一个使用了[slick](https://github.com/kenwheeler/slick)插件做轮播效果的页面，本身打开一切正常。后面这个页面被嵌在另一个页面的iframe下时，iframe的宽度设置为100%，在iOS里打开，页面就变得不正常了，轮播部分好像被放得很大，把其他元素挤出屏幕外，轮播来回切换，页面来回闪烁。\n<!--more-->\n## 产生原因\niOS下的safari是按照iframe里面页面元素的全尺寸来调整iframe的大小的。\n\n轮播效果的实现原理是将所有的幻灯片都放到一个块里面，然后设置溢出隐藏，在iOS的iframe下，结合上面第一条原因，就会将iframe撑得很大。\n## 解决方案\n### 方案一\n在包含轮播组件的元素上设置以下样式：\n````css\n{\n  width: 1px;\n  min-width: 100%;\n}\n````\n或者设置\n````css\n{\n  width: 100vw;\n}\n````\n### 方案二\n在iframe上设置以下样式\n````css\niframe {\n  width: 1px;\n  min-width: 100%;\n  *width: 100%;\n}\n````\n同时设置scrolling属性为'no'。\n````html\n<iframe height=\"950\" width=\"100%\" scrolling=\"no\" src=\"Content.html\"></iframe>\n````\n## 参考资料\n* [https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/](https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/)\n* [https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view](https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view)\n* [https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari](https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari)\n* [https://github.com/kenwheeler/slick/issues/1470](https://github.com/kenwheeler/slick/issues/1470)\n","slug":"iOS的iframe宽度bug","published":1,"updated":"2019-02-23T13:06:51.148Z","_id":"cjshhi1bq0005f4b4kfsfz7uh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>最近做一个项目里，有一个使用了<a href=\"https://github.com/kenwheeler/slick\" target=\"_blank\" rel=\"external\">slick</a>插件做轮播效果的页面，本身打开一切正常。后面这个页面被嵌在另一个页面的iframe下时，iframe的宽度设置为100%，在iOS里打开，页面就变得不正常了，轮播部分好像被放得很大，把其他元素挤出屏幕外，轮播来回切换，页面来回闪烁。<br><a id=\"more\"></a></p>\n<h2 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h2><p>iOS下的safari是按照iframe里面页面元素的全尺寸来调整iframe的大小的。</p>\n<p>轮播效果的实现原理是将所有的幻灯片都放到一个块里面，然后设置溢出隐藏，在iOS的iframe下，结合上面第一条原因，就会将iframe撑得很大。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>在包含轮播组件的元素上设置以下样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或者设置<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>在iframe上设置以下样式<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">iframe &#123;</div><div class=\"line\">  width: 1px;</div><div class=\"line\">  min-width: 100%;</div><div class=\"line\">  *width: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同时设置scrolling属性为’no’。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">height</span>=<span class=\"string\">\"950\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Content.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/\" target=\"_blank\" rel=\"external\">https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari</a></li>\n<li><a href=\"https://github.com/kenwheeler/slick/issues/1470\" target=\"_blank\" rel=\"external\">https://github.com/kenwheeler/slick/issues/1470</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>最近做一个项目里，有一个使用了<a href=\"https://github.com/kenwheeler/slick\">slick</a>插件做轮播效果的页面，本身打开一切正常。后面这个页面被嵌在另一个页面的iframe下时，iframe的宽度设置为100%，在iOS里打开，页面就变得不正常了，轮播部分好像被放得很大，把其他元素挤出屏幕外，轮播来回切换，页面来回闪烁。<br>","more":"</p>\n<h2 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h2><p>iOS下的safari是按照iframe里面页面元素的全尺寸来调整iframe的大小的。</p>\n<p>轮播效果的实现原理是将所有的幻灯片都放到一个块里面，然后设置溢出隐藏，在iOS的iframe下，结合上面第一条原因，就会将iframe撑得很大。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>在包含轮播组件的元素上设置以下样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或者设置<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>在iframe上设置以下样式<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">iframe &#123;</div><div class=\"line\">  width: 1px;</div><div class=\"line\">  min-width: 100%;</div><div class=\"line\">  *width: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同时设置scrolling属性为’no’。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">height</span>=<span class=\"string\">\"950\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Content.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/\">https://www.spacevatican.org/2015/4/7/on-mobile-safari-and-iframes/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view\">https://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari\">https://stackoverflow.com/questions/23083462/how-to-get-an-iframe-to-be-responsive-in-ios-safari</a></li>\n<li><a href=\"https://github.com/kenwheeler/slick/issues/1470\">https://github.com/kenwheeler/slick/issues/1470</a></li>\n</ul>"},{"title":"《javascript权威指南》第六章读书笔记","date":"2017-03-10T16:00:00.000Z","_content":"## 6.1 创建对象\n\n### 创建对象三种的方式\n\n1. 使用对象直接量\n\n创建对象最简单的方式就是在JavaScript代码中使用对象直接量(key / value)。\n\n在ECMAScript 5中，对象直接量中的最后一个属性后的逗号将忽略，且在ECMAScript 3的大部分实行中也可以忽略这个逗号，但在IE中则报错。\n\n所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。\n\n2. 使用new运算符\n\n关键字new后跟随一个构造函数使用，创建的对象的原型是构造函数的prototype属性的值。\n\n所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。\n\n3. 使用Object.create() \n\nECMAScript 5中使用Object.create(obj)传入原型对象，创建的对象会继承该原型的属性。传入Null则创建一个没有原型的对象,不继承任何属性。\n\n在ECMASCript 3中模拟原型继承\n````javascript\nfunction inherit(p) {\n    if (p == null) throw TypeError();\n    if (Object.create) return Object.create(p);\n    var t = typeof p;\n    if (t != 'function' && t != 'object') throw TypeError();\n    function f() { };\n    f.prototype = p;\n    return new f()\n````\n## 6.2 属性的查询和设置\n可以通过点(.)或者方括号([])运算符获取属性的值。\n\nJavascript对象具有'自有属性'，也有原型属性是从原型对象继承而来的。\n\n查询对象o的属性x，如果在o中找不到x，则在o的原型对象中查找属性x。如果该原型对象也没有属性x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x属性或者一个原型是null的对象为止。即对象的原型属性构成一个'链'。\n````javascript\nvar o = {}\no.x = 1;\nvar p = inherit(o)\np.y = 2;\nvar q = inherit(p)\nq.z = 3;\nvar s = q.toString()\nconsole.log(s)//[object Object]\nconsole.log(q.x+q.y)//3\n````\n如果允许属性赋值操作，那么它总是在原始对象上进行属性创建或者对已有属性进行赋值，而不会去修改原型链。\n\n查询属性才和继承有关，设置属性则无关，改特性可以选择性得覆盖继承的属性。\n\n查询一个不存在的属性不会报错，返回undefined。如果对象不存在，查找这个不存在的对象的属性就会报错。\n````javascript\nvar len = book&&book.substitle&&book.substitle.length;\n````\n## 6.3删除属性\n使用delete刪除屬性。delete只是断开属性与宿主之间的联系，而不会去操作属性中的属性。\n````javascript\nvar a = {p:{x:1}};\nvar b = a.p;\ndelete a.p;\nconsole.log(a.p);//undefined\nconsole.log(b);//{x:1}\n````\ndelete不行删除可configurable为false的属性。\n## 6.4检测属性\n检测某个属性是否存在于某个对象中。\n\n1. in运算符\n\n如果对象的自有属性或继承属性包含这个属性，则返回true。\n```javascript\nvar a = {x:1};\nconsole.log('x' in a);//true\nconsole.log('toString' in a);//true\n````\n\n2. hasOwnProperty()\n\n该方法用来检测给定的名字是否是对象的自有属性。\n````javascript\nvar a = {x:1};\nconsole.log(a.hasOwnProperty('x'));//true\nconsole.log(a.hasOwnProperty('toString'));//false\n````\n\n3. propertyIsEnumerable()\n\n检测到是自有属性且这个属性的enumerable特性为true是，返回true。\n````javascript\nvar o = inherit({x:1});\no.y = 2;\nconsole.log(o.propertyIsEnumerable('x'))//true\nconsole.log(o.propertyIsEnumerable('y'))//false\nconsole.log(o.propertyIsEnumerable('toString'))//false\n````\n## 6.5枚举属性\n使用for/in便利对象所有可枚举的属性。\n````javascript\nvar o = {x:1 ,y:2, z:3};\nconsole.log(o.propertyIsEnumerable('toString'))//fasle\nfor(prop in o){\n    console.log(prop)\n}//x y z\n````\nECMAScript 5中使用Object.keys(obj)返回一个数组，数组由对象中的可枚举的自有属性组成。\n````javascript\nvar o = {x:1,y:2};\nObject.defineProperty(o,'y',{enumerable:false})\nconsole.log(Object.keys(o));//['x']\n````\nECMAScript 5中使用Object.getOwnPropertyNames(obj)返回对象所有的自有属性。\n````javascript\nvar o = {x:1,y:2};\nObject.defineProperty(o,'y',{enumerable:false})\nconsole.log(Object.getOwnPropertyNames(o));//['x','y']\n````\n## 6.6属性的getter和setter\n在ECMAScript 5中 ，对象的属性可以有一个或两个函数代替，即getter和getter。由getter和setter定义的属性叫做'存取器属性'(accessor property)，不同于'数据属性'(data property)。\n\n存取器属性定义为一个或两个和属性同名的函数，不使用function关键字，而是使用get和set。\n\n存取器属性不具有可写性(writable attribute)。\n````javascript\nvar serialNum={\n    $n:0,\n    get next(){\n        return this.$n++\n    },\n    set next(n){\n        if(n>this.$n) this.$n=n*3;\n        else throw '序列号的值不能比当前值小'\n    }\n}\nconsole.log(serialNum.next)//0\nconsole.log(serialNum.next)//1\nserialNum.next=10;\nconsole.log(serialNum.next)//30\nconsole.log(serialNum.next)//31\n````\n## 6.7属性的特性\n数据属性的4个特性是：value writable enumerable configurable。\n\n存取器属性不具有value和writable特性，其可写性有setter方法是否存在决定。\n\n存取器属性的4个特性是：get set enumerable configurable。\n\n通过调用Object.getOwnPropertyDescriptor(obj,propName)获得某个对象特定属性的属性描述符。\n````javascript\nconsole.log(Object.getOwnPropertyDescriptor({x:1},'x'))//{ value: 1, writable: true, enumerable: true, configurable: true }\n````\n设置属性的特性则是使用Object.defineProperty(obj,propName,desc)和Object.defineProperties(obj,desc)\n\n赋值属性的特性\n````javascript\nObject.defineProperty(Object.prototype,'extend',{\n    writable:true,\n    enumerable:false,\n    configurable:true,\n    value:function(o){\n        var names=Object.getOwnPropertyNames(o);\n        for( let i=0;i<names.length;i++){\n            if(names[i] in this) continue;\n            var desc = Object.getOwnPropertyDescriptor(o,names[i]);\n            Object.defineProperty(this,names[i],desc)\n        }\n    }\n})\n````\n## 6.8对象的3个属性\n\n1. 原型(prototype)\n\nECMAScript 5中使用Object.getProprttyOf(obj)查询对象的原型。\n\nECMAScript 3中使用o.constructor.prototype检查对象的原型(不可靠)。\n\n使用isPrototypeOf检测一个对象是否是另一个对象的原型。\n\n2. 类属性(class attribute)\n\n查询方法\n````javascript\nfunction classOf(o){\n    if(o===null) return 'Null';\n    if(o===undefined) return 'Undefined';\n    return Object.prototype.toString.call(o).slice(8,-1)\n}\n````\n3. 可扩展性(extensible attribute)\n\n对象的可扩展性表示是否可以给对象添加新属性。\n\n所以内置对象和自定义对象都是显式可扩展的。\n\n可以通过Object.esExtensible(obj)来检测对象是否是可扩展的\n\n通过Object.preventExtensions(obj)、Object.seal(obj)、Object.freeze(obj)来将对象设置为不可扩展的\n\n## 6.9序列化对象\n对象序列化(serialization)是指对象的状态和字符串的互相转换。\n\nECMAScript 5内置函数JSON.stringify()和JSON.parse()来序列化和还原对象。\n````javascript\nvar o = {x:1,y:{a:1}};\nvar s = JSON.stringify(o);\nconsole.log(s);//{\"x\":1,\"y\":{\"a\":1}}\nconsole.log(JSON.parse(s));//Object {x: 1, y: Object}\n````\n## 6.10对象方法\nObject.prototype里常见的方法，例如toString(),valueOf()等，但有些特定的类会重写这些方法。\n","source":"_posts/javascripts权威指南笔记-6.md","raw":"---\ntitle: 《javascript权威指南》第六章读书笔记\ndate: 2017-03-11\ntags: ['object']\ncategories: ['笔记']\n---\n## 6.1 创建对象\n\n### 创建对象三种的方式\n\n1. 使用对象直接量\n\n创建对象最简单的方式就是在JavaScript代码中使用对象直接量(key / value)。\n\n在ECMAScript 5中，对象直接量中的最后一个属性后的逗号将忽略，且在ECMAScript 3的大部分实行中也可以忽略这个逗号，但在IE中则报错。\n\n所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。\n\n2. 使用new运算符\n\n关键字new后跟随一个构造函数使用，创建的对象的原型是构造函数的prototype属性的值。\n\n所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。\n\n3. 使用Object.create() \n\nECMAScript 5中使用Object.create(obj)传入原型对象，创建的对象会继承该原型的属性。传入Null则创建一个没有原型的对象,不继承任何属性。\n\n在ECMASCript 3中模拟原型继承\n````javascript\nfunction inherit(p) {\n    if (p == null) throw TypeError();\n    if (Object.create) return Object.create(p);\n    var t = typeof p;\n    if (t != 'function' && t != 'object') throw TypeError();\n    function f() { };\n    f.prototype = p;\n    return new f()\n````\n## 6.2 属性的查询和设置\n可以通过点(.)或者方括号([])运算符获取属性的值。\n\nJavascript对象具有'自有属性'，也有原型属性是从原型对象继承而来的。\n\n查询对象o的属性x，如果在o中找不到x，则在o的原型对象中查找属性x。如果该原型对象也没有属性x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x属性或者一个原型是null的对象为止。即对象的原型属性构成一个'链'。\n````javascript\nvar o = {}\no.x = 1;\nvar p = inherit(o)\np.y = 2;\nvar q = inherit(p)\nq.z = 3;\nvar s = q.toString()\nconsole.log(s)//[object Object]\nconsole.log(q.x+q.y)//3\n````\n如果允许属性赋值操作，那么它总是在原始对象上进行属性创建或者对已有属性进行赋值，而不会去修改原型链。\n\n查询属性才和继承有关，设置属性则无关，改特性可以选择性得覆盖继承的属性。\n\n查询一个不存在的属性不会报错，返回undefined。如果对象不存在，查找这个不存在的对象的属性就会报错。\n````javascript\nvar len = book&&book.substitle&&book.substitle.length;\n````\n## 6.3删除属性\n使用delete刪除屬性。delete只是断开属性与宿主之间的联系，而不会去操作属性中的属性。\n````javascript\nvar a = {p:{x:1}};\nvar b = a.p;\ndelete a.p;\nconsole.log(a.p);//undefined\nconsole.log(b);//{x:1}\n````\ndelete不行删除可configurable为false的属性。\n## 6.4检测属性\n检测某个属性是否存在于某个对象中。\n\n1. in运算符\n\n如果对象的自有属性或继承属性包含这个属性，则返回true。\n```javascript\nvar a = {x:1};\nconsole.log('x' in a);//true\nconsole.log('toString' in a);//true\n````\n\n2. hasOwnProperty()\n\n该方法用来检测给定的名字是否是对象的自有属性。\n````javascript\nvar a = {x:1};\nconsole.log(a.hasOwnProperty('x'));//true\nconsole.log(a.hasOwnProperty('toString'));//false\n````\n\n3. propertyIsEnumerable()\n\n检测到是自有属性且这个属性的enumerable特性为true是，返回true。\n````javascript\nvar o = inherit({x:1});\no.y = 2;\nconsole.log(o.propertyIsEnumerable('x'))//true\nconsole.log(o.propertyIsEnumerable('y'))//false\nconsole.log(o.propertyIsEnumerable('toString'))//false\n````\n## 6.5枚举属性\n使用for/in便利对象所有可枚举的属性。\n````javascript\nvar o = {x:1 ,y:2, z:3};\nconsole.log(o.propertyIsEnumerable('toString'))//fasle\nfor(prop in o){\n    console.log(prop)\n}//x y z\n````\nECMAScript 5中使用Object.keys(obj)返回一个数组，数组由对象中的可枚举的自有属性组成。\n````javascript\nvar o = {x:1,y:2};\nObject.defineProperty(o,'y',{enumerable:false})\nconsole.log(Object.keys(o));//['x']\n````\nECMAScript 5中使用Object.getOwnPropertyNames(obj)返回对象所有的自有属性。\n````javascript\nvar o = {x:1,y:2};\nObject.defineProperty(o,'y',{enumerable:false})\nconsole.log(Object.getOwnPropertyNames(o));//['x','y']\n````\n## 6.6属性的getter和setter\n在ECMAScript 5中 ，对象的属性可以有一个或两个函数代替，即getter和getter。由getter和setter定义的属性叫做'存取器属性'(accessor property)，不同于'数据属性'(data property)。\n\n存取器属性定义为一个或两个和属性同名的函数，不使用function关键字，而是使用get和set。\n\n存取器属性不具有可写性(writable attribute)。\n````javascript\nvar serialNum={\n    $n:0,\n    get next(){\n        return this.$n++\n    },\n    set next(n){\n        if(n>this.$n) this.$n=n*3;\n        else throw '序列号的值不能比当前值小'\n    }\n}\nconsole.log(serialNum.next)//0\nconsole.log(serialNum.next)//1\nserialNum.next=10;\nconsole.log(serialNum.next)//30\nconsole.log(serialNum.next)//31\n````\n## 6.7属性的特性\n数据属性的4个特性是：value writable enumerable configurable。\n\n存取器属性不具有value和writable特性，其可写性有setter方法是否存在决定。\n\n存取器属性的4个特性是：get set enumerable configurable。\n\n通过调用Object.getOwnPropertyDescriptor(obj,propName)获得某个对象特定属性的属性描述符。\n````javascript\nconsole.log(Object.getOwnPropertyDescriptor({x:1},'x'))//{ value: 1, writable: true, enumerable: true, configurable: true }\n````\n设置属性的特性则是使用Object.defineProperty(obj,propName,desc)和Object.defineProperties(obj,desc)\n\n赋值属性的特性\n````javascript\nObject.defineProperty(Object.prototype,'extend',{\n    writable:true,\n    enumerable:false,\n    configurable:true,\n    value:function(o){\n        var names=Object.getOwnPropertyNames(o);\n        for( let i=0;i<names.length;i++){\n            if(names[i] in this) continue;\n            var desc = Object.getOwnPropertyDescriptor(o,names[i]);\n            Object.defineProperty(this,names[i],desc)\n        }\n    }\n})\n````\n## 6.8对象的3个属性\n\n1. 原型(prototype)\n\nECMAScript 5中使用Object.getProprttyOf(obj)查询对象的原型。\n\nECMAScript 3中使用o.constructor.prototype检查对象的原型(不可靠)。\n\n使用isPrototypeOf检测一个对象是否是另一个对象的原型。\n\n2. 类属性(class attribute)\n\n查询方法\n````javascript\nfunction classOf(o){\n    if(o===null) return 'Null';\n    if(o===undefined) return 'Undefined';\n    return Object.prototype.toString.call(o).slice(8,-1)\n}\n````\n3. 可扩展性(extensible attribute)\n\n对象的可扩展性表示是否可以给对象添加新属性。\n\n所以内置对象和自定义对象都是显式可扩展的。\n\n可以通过Object.esExtensible(obj)来检测对象是否是可扩展的\n\n通过Object.preventExtensions(obj)、Object.seal(obj)、Object.freeze(obj)来将对象设置为不可扩展的\n\n## 6.9序列化对象\n对象序列化(serialization)是指对象的状态和字符串的互相转换。\n\nECMAScript 5内置函数JSON.stringify()和JSON.parse()来序列化和还原对象。\n````javascript\nvar o = {x:1,y:{a:1}};\nvar s = JSON.stringify(o);\nconsole.log(s);//{\"x\":1,\"y\":{\"a\":1}}\nconsole.log(JSON.parse(s));//Object {x: 1, y: Object}\n````\n## 6.10对象方法\nObject.prototype里常见的方法，例如toString(),valueOf()等，但有些特定的类会重写这些方法。\n","slug":"javascripts权威指南笔记-6","published":1,"updated":"2017-04-04T09:32:02.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1bw0006f4b4q78kp0st","content":"<h2 id=\"6-1-创建对象\"><a href=\"#6-1-创建对象\" class=\"headerlink\" title=\"6.1 创建对象\"></a>6.1 创建对象</h2><h3 id=\"创建对象三种的方式\"><a href=\"#创建对象三种的方式\" class=\"headerlink\" title=\"创建对象三种的方式\"></a>创建对象三种的方式</h3><ol>\n<li>使用对象直接量</li>\n</ol>\n<p>创建对象最简单的方式就是在JavaScript代码中使用对象直接量(key / value)。</p>\n<p>在ECMAScript 5中，对象直接量中的最后一个属性后的逗号将忽略，且在ECMAScript 3的大部分实行中也可以忽略这个逗号，但在IE中则报错。</p>\n<p>所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。</p>\n<ol>\n<li>使用new运算符</li>\n</ol>\n<p>关键字new后跟随一个构造函数使用，创建的对象的原型是构造函数的prototype属性的值。</p>\n<p>所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。</p>\n<ol>\n<li>使用Object.create() </li>\n</ol>\n<p>ECMAScript 5中使用Object.create(obj)传入原型对象，创建的对象会继承该原型的属性。传入Null则创建一个没有原型的对象,不继承任何属性。</p>\n<p>在ECMASCript 3中模拟原型继承<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.create) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(p);</div><div class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">typeof</span> p;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t != <span class=\"string\">'function'</span> &amp;&amp; t != <span class=\"string\">'object'</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\">    f.prototype = p;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f()</div></pre></td></tr></table></figure></p>\n<h2 id=\"6-2-属性的查询和设置\"><a href=\"#6-2-属性的查询和设置\" class=\"headerlink\" title=\"6.2 属性的查询和设置\"></a>6.2 属性的查询和设置</h2><p>可以通过点(.)或者方括号([])运算符获取属性的值。</p>\n<p>Javascript对象具有’自有属性’，也有原型属性是从原型对象继承而来的。</p>\n<p>查询对象o的属性x，如果在o中找不到x，则在o的原型对象中查找属性x。如果该原型对象也没有属性x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x属性或者一个原型是null的对象为止。即对象的原型属性构成一个’链’。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;</div><div class=\"line\">o.x = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> p = inherit(o)</div><div class=\"line\">p.y = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> q = inherit(p)</div><div class=\"line\">q.z = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> s = q.toString()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s)<span class=\"comment\">//[object Object]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(q.x+q.y)<span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n<p>如果允许属性赋值操作，那么它总是在原始对象上进行属性创建或者对已有属性进行赋值，而不会去修改原型链。</p>\n<p>查询属性才和继承有关，设置属性则无关，改特性可以选择性得覆盖继承的属性。</p>\n<p>查询一个不存在的属性不会报错，返回undefined。如果对象不存在，查找这个不存在的对象的属性就会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> len = book&amp;&amp;book.substitle&amp;&amp;book.substitle.length;</div></pre></td></tr></table></figure></p>\n<h2 id=\"6-3删除属性\"><a href=\"#6-3删除属性\" class=\"headerlink\" title=\"6.3删除属性\"></a>6.3删除属性</h2><p>使用delete刪除屬性。delete只是断开属性与宿主之间的联系，而不会去操作属性中的属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">p</span>:&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.p;</div><div class=\"line\"><span class=\"keyword\">delete</span> a.p;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.p);<span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//&#123;x:1&#125;</span></div></pre></td></tr></table></figure></p>\n<p>delete不行删除可configurable为false的属性。</p>\n<h2 id=\"6-4检测属性\"><a href=\"#6-4检测属性\" class=\"headerlink\" title=\"6.4检测属性\"></a>6.4检测属性</h2><p>检测某个属性是否存在于某个对象中。</p>\n<ol>\n<li>in运算符</li>\n</ol>\n<p>如果对象的自有属性或继承属性包含这个属性，则返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span> <span class=\"keyword\">in</span> a);<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> a);<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>hasOwnProperty()</li>\n</ol>\n<p>该方法用来检测给定的名字是否是对象的自有属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.hasOwnProperty(<span class=\"string\">'x'</span>));<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.hasOwnProperty(<span class=\"string\">'toString'</span>));<span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>propertyIsEnumerable()</li>\n</ol>\n<p>检测到是自有属性且这个属性的enumerable特性为true是，返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = inherit(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">o.y = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'x'</span>))<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'y'</span>))<span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'toString'</span>))<span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-5枚举属性\"><a href=\"#6-5枚举属性\" class=\"headerlink\" title=\"6.5枚举属性\"></a>6.5枚举属性</h2><p>使用for/in便利对象所有可枚举的属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span> ,<span class=\"attr\">y</span>:<span class=\"number\">2</span>, <span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'toString'</span>))<span class=\"comment\">//fasle</span></div><div class=\"line\"><span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> o)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(prop)</div><div class=\"line\">&#125;<span class=\"comment\">//x y z</span></div></pre></td></tr></table></figure></p>\n<p>ECMAScript 5中使用Object.keys(obj)返回一个数组，数组由对象中的可枚举的自有属性组成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(o,<span class=\"string\">'y'</span>,&#123;<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(o));<span class=\"comment\">//['x']</span></div></pre></td></tr></table></figure></p>\n<p>ECMAScript 5中使用Object.getOwnPropertyNames(obj)返回对象所有的自有属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(o,<span class=\"string\">'y'</span>,&#123;<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(o));<span class=\"comment\">//['x','y']</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-6属性的getter和setter\"><a href=\"#6-6属性的getter和setter\" class=\"headerlink\" title=\"6.6属性的getter和setter\"></a>6.6属性的getter和setter</h2><p>在ECMAScript 5中 ，对象的属性可以有一个或两个函数代替，即getter和getter。由getter和setter定义的属性叫做’存取器属性’(accessor property)，不同于’数据属性’(data property)。</p>\n<p>存取器属性定义为一个或两个和属性同名的函数，不使用function关键字，而是使用get和set。</p>\n<p>存取器属性不具有可写性(writable attribute)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> serialNum=&#123;</div><div class=\"line\">    <span class=\"attr\">$n</span>:<span class=\"number\">0</span>,</div><div class=\"line\">    get next()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$n++</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set next(n)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n&gt;<span class=\"keyword\">this</span>.$n) <span class=\"keyword\">this</span>.$n=n*<span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"string\">'序列号的值不能比当前值小'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//1</span></div><div class=\"line\">serialNum.next=<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//30</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//31</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-7属性的特性\"><a href=\"#6-7属性的特性\" class=\"headerlink\" title=\"6.7属性的特性\"></a>6.7属性的特性</h2><p>数据属性的4个特性是：value writable enumerable configurable。</p>\n<p>存取器属性不具有value和writable特性，其可写性有setter方法是否存在决定。</p>\n<p>存取器属性的4个特性是：get set enumerable configurable。</p>\n<p>通过调用Object.getOwnPropertyDescriptor(obj,propName)获得某个对象特定属性的属性描述符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,<span class=\"string\">'x'</span>))<span class=\"comment\">//&#123; value: 1, writable: true, enumerable: true, configurable: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>设置属性的特性则是使用Object.defineProperty(obj,propName,desc)和Object.defineProperties(obj,desc)</p>\n<p>赋值属性的特性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>.prototype,<span class=\"string\">'extend'</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">value</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> names=<span class=\"built_in\">Object</span>.getOwnPropertyNames(o);</div><div class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;names.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(names[i] <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">var</span> desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(o,names[i]);</div><div class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,names[i],desc)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"6-8对象的3个属性\"><a href=\"#6-8对象的3个属性\" class=\"headerlink\" title=\"6.8对象的3个属性\"></a>6.8对象的3个属性</h2><ol>\n<li>原型(prototype)</li>\n</ol>\n<p>ECMAScript 5中使用Object.getProprttyOf(obj)查询对象的原型。</p>\n<p>ECMAScript 3中使用o.constructor.prototype检查对象的原型(不可靠)。</p>\n<p>使用isPrototypeOf检测一个对象是否是另一个对象的原型。</p>\n<ol>\n<li>类属性(class attribute)</li>\n</ol>\n<p>查询方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">classOf</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(o===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">'Null'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(o===<span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"string\">'Undefined'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>,<span class=\"number\">-1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>可扩展性(extensible attribute)</li>\n</ol>\n<p>对象的可扩展性表示是否可以给对象添加新属性。</p>\n<p>所以内置对象和自定义对象都是显式可扩展的。</p>\n<p>可以通过Object.esExtensible(obj)来检测对象是否是可扩展的</p>\n<p>通过Object.preventExtensions(obj)、Object.seal(obj)、Object.freeze(obj)来将对象设置为不可扩展的</p>\n<h2 id=\"6-9序列化对象\"><a href=\"#6-9序列化对象\" class=\"headerlink\" title=\"6.9序列化对象\"></a>6.9序列化对象</h2><p>对象序列化(serialization)是指对象的状态和字符串的互相转换。</p>\n<p>ECMAScript 5内置函数JSON.stringify()和JSON.parse()来序列化和还原对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"built_in\">JSON</span>.stringify(o);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s);<span class=\"comment\">//&#123;\"x\":1,\"y\":&#123;\"a\":1&#125;&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(s));<span class=\"comment\">//Object &#123;x: 1, y: Object&#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-10对象方法\"><a href=\"#6-10对象方法\" class=\"headerlink\" title=\"6.10对象方法\"></a>6.10对象方法</h2><p>Object.prototype里常见的方法，例如toString(),valueOf()等，但有些特定的类会重写这些方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"6-1-创建对象\"><a href=\"#6-1-创建对象\" class=\"headerlink\" title=\"6.1 创建对象\"></a>6.1 创建对象</h2><h3 id=\"创建对象三种的方式\"><a href=\"#创建对象三种的方式\" class=\"headerlink\" title=\"创建对象三种的方式\"></a>创建对象三种的方式</h3><ol>\n<li>使用对象直接量</li>\n</ol>\n<p>创建对象最简单的方式就是在JavaScript代码中使用对象直接量(key / value)。</p>\n<p>在ECMAScript 5中，对象直接量中的最后一个属性后的逗号将忽略，且在ECMAScript 3的大部分实行中也可以忽略这个逗号，但在IE中则报错。</p>\n<p>所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。</p>\n<ol>\n<li>使用new运算符</li>\n</ol>\n<p>关键字new后跟随一个构造函数使用，创建的对象的原型是构造函数的prototype属性的值。</p>\n<p>所有通过对象直接量创建的对象具有同一个原型对象，即Object.prototype。Object.prototype没有原型。</p>\n<ol>\n<li>使用Object.create() </li>\n</ol>\n<p>ECMAScript 5中使用Object.create(obj)传入原型对象，创建的对象会继承该原型的属性。传入Null则创建一个没有原型的对象,不继承任何属性。</p>\n<p>在ECMASCript 3中模拟原型继承<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.create) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(p);</div><div class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">typeof</span> p;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t != <span class=\"string\">'function'</span> &amp;&amp; t != <span class=\"string\">'object'</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\">    f.prototype = p;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f()</div></pre></td></tr></table></figure></p>\n<h2 id=\"6-2-属性的查询和设置\"><a href=\"#6-2-属性的查询和设置\" class=\"headerlink\" title=\"6.2 属性的查询和设置\"></a>6.2 属性的查询和设置</h2><p>可以通过点(.)或者方括号([])运算符获取属性的值。</p>\n<p>Javascript对象具有’自有属性’，也有原型属性是从原型对象继承而来的。</p>\n<p>查询对象o的属性x，如果在o中找不到x，则在o的原型对象中查找属性x。如果该原型对象也没有属性x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x属性或者一个原型是null的对象为止。即对象的原型属性构成一个’链’。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;</div><div class=\"line\">o.x = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> p = inherit(o)</div><div class=\"line\">p.y = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> q = inherit(p)</div><div class=\"line\">q.z = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> s = q.toString()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s)<span class=\"comment\">//[object Object]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(q.x+q.y)<span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n<p>如果允许属性赋值操作，那么它总是在原始对象上进行属性创建或者对已有属性进行赋值，而不会去修改原型链。</p>\n<p>查询属性才和继承有关，设置属性则无关，改特性可以选择性得覆盖继承的属性。</p>\n<p>查询一个不存在的属性不会报错，返回undefined。如果对象不存在，查找这个不存在的对象的属性就会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> len = book&amp;&amp;book.substitle&amp;&amp;book.substitle.length;</div></pre></td></tr></table></figure></p>\n<h2 id=\"6-3删除属性\"><a href=\"#6-3删除属性\" class=\"headerlink\" title=\"6.3删除属性\"></a>6.3删除属性</h2><p>使用delete刪除屬性。delete只是断开属性与宿主之间的联系，而不会去操作属性中的属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">p</span>:&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.p;</div><div class=\"line\"><span class=\"keyword\">delete</span> a.p;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.p);<span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//&#123;x:1&#125;</span></div></pre></td></tr></table></figure></p>\n<p>delete不行删除可configurable为false的属性。</p>\n<h2 id=\"6-4检测属性\"><a href=\"#6-4检测属性\" class=\"headerlink\" title=\"6.4检测属性\"></a>6.4检测属性</h2><p>检测某个属性是否存在于某个对象中。</p>\n<ol>\n<li>in运算符</li>\n</ol>\n<p>如果对象的自有属性或继承属性包含这个属性，则返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span> <span class=\"keyword\">in</span> a);<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> a);<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>hasOwnProperty()</li>\n</ol>\n<p>该方法用来检测给定的名字是否是对象的自有属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.hasOwnProperty(<span class=\"string\">'x'</span>));<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.hasOwnProperty(<span class=\"string\">'toString'</span>));<span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>propertyIsEnumerable()</li>\n</ol>\n<p>检测到是自有属性且这个属性的enumerable特性为true是，返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = inherit(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">o.y = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'x'</span>))<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'y'</span>))<span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'toString'</span>))<span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-5枚举属性\"><a href=\"#6-5枚举属性\" class=\"headerlink\" title=\"6.5枚举属性\"></a>6.5枚举属性</h2><p>使用for/in便利对象所有可枚举的属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span> ,<span class=\"attr\">y</span>:<span class=\"number\">2</span>, <span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.propertyIsEnumerable(<span class=\"string\">'toString'</span>))<span class=\"comment\">//fasle</span></div><div class=\"line\"><span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> o)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(prop)</div><div class=\"line\">&#125;<span class=\"comment\">//x y z</span></div></pre></td></tr></table></figure></p>\n<p>ECMAScript 5中使用Object.keys(obj)返回一个数组，数组由对象中的可枚举的自有属性组成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(o,<span class=\"string\">'y'</span>,&#123;<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(o));<span class=\"comment\">//['x']</span></div></pre></td></tr></table></figure></p>\n<p>ECMAScript 5中使用Object.getOwnPropertyNames(obj)返回对象所有的自有属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(o,<span class=\"string\">'y'</span>,&#123;<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(o));<span class=\"comment\">//['x','y']</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-6属性的getter和setter\"><a href=\"#6-6属性的getter和setter\" class=\"headerlink\" title=\"6.6属性的getter和setter\"></a>6.6属性的getter和setter</h2><p>在ECMAScript 5中 ，对象的属性可以有一个或两个函数代替，即getter和getter。由getter和setter定义的属性叫做’存取器属性’(accessor property)，不同于’数据属性’(data property)。</p>\n<p>存取器属性定义为一个或两个和属性同名的函数，不使用function关键字，而是使用get和set。</p>\n<p>存取器属性不具有可写性(writable attribute)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> serialNum=&#123;</div><div class=\"line\">    <span class=\"attr\">$n</span>:<span class=\"number\">0</span>,</div><div class=\"line\">    get next()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$n++</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set next(n)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n&gt;<span class=\"keyword\">this</span>.$n) <span class=\"keyword\">this</span>.$n=n*<span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"string\">'序列号的值不能比当前值小'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//1</span></div><div class=\"line\">serialNum.next=<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//30</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(serialNum.next)<span class=\"comment\">//31</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-7属性的特性\"><a href=\"#6-7属性的特性\" class=\"headerlink\" title=\"6.7属性的特性\"></a>6.7属性的特性</h2><p>数据属性的4个特性是：value writable enumerable configurable。</p>\n<p>存取器属性不具有value和writable特性，其可写性有setter方法是否存在决定。</p>\n<p>存取器属性的4个特性是：get set enumerable configurable。</p>\n<p>通过调用Object.getOwnPropertyDescriptor(obj,propName)获得某个对象特定属性的属性描述符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,<span class=\"string\">'x'</span>))<span class=\"comment\">//&#123; value: 1, writable: true, enumerable: true, configurable: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>设置属性的特性则是使用Object.defineProperty(obj,propName,desc)和Object.defineProperties(obj,desc)</p>\n<p>赋值属性的特性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>.prototype,<span class=\"string\">'extend'</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">value</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> names=<span class=\"built_in\">Object</span>.getOwnPropertyNames(o);</div><div class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;names.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(names[i] <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">var</span> desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(o,names[i]);</div><div class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,names[i],desc)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"6-8对象的3个属性\"><a href=\"#6-8对象的3个属性\" class=\"headerlink\" title=\"6.8对象的3个属性\"></a>6.8对象的3个属性</h2><ol>\n<li>原型(prototype)</li>\n</ol>\n<p>ECMAScript 5中使用Object.getProprttyOf(obj)查询对象的原型。</p>\n<p>ECMAScript 3中使用o.constructor.prototype检查对象的原型(不可靠)。</p>\n<p>使用isPrototypeOf检测一个对象是否是另一个对象的原型。</p>\n<ol>\n<li>类属性(class attribute)</li>\n</ol>\n<p>查询方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">classOf</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(o===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">'Null'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(o===<span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"string\">'Undefined'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>,<span class=\"number\">-1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>可扩展性(extensible attribute)</li>\n</ol>\n<p>对象的可扩展性表示是否可以给对象添加新属性。</p>\n<p>所以内置对象和自定义对象都是显式可扩展的。</p>\n<p>可以通过Object.esExtensible(obj)来检测对象是否是可扩展的</p>\n<p>通过Object.preventExtensions(obj)、Object.seal(obj)、Object.freeze(obj)来将对象设置为不可扩展的</p>\n<h2 id=\"6-9序列化对象\"><a href=\"#6-9序列化对象\" class=\"headerlink\" title=\"6.9序列化对象\"></a>6.9序列化对象</h2><p>对象序列化(serialization)是指对象的状态和字符串的互相转换。</p>\n<p>ECMAScript 5内置函数JSON.stringify()和JSON.parse()来序列化和还原对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"built_in\">JSON</span>.stringify(o);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s);<span class=\"comment\">//&#123;\"x\":1,\"y\":&#123;\"a\":1&#125;&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(s));<span class=\"comment\">//Object &#123;x: 1, y: Object&#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-10对象方法\"><a href=\"#6-10对象方法\" class=\"headerlink\" title=\"6.10对象方法\"></a>6.10对象方法</h2><p>Object.prototype里常见的方法，例如toString(),valueOf()等，但有些特定的类会重写这些方法。</p>\n"},{"title":"《javascript权威指南》第八章读书笔记","date":"2017-03-17T16:00:00.000Z","_content":"## 8.1函数定义\n(1) 函数定义表达式\n\n声明的变量会提升，赋值操作不会提升。\n````javascript\nvar fn = function(){\n    //do somethings\n}\n````\n(2) 函数声明语句\n\n函数声明语句会被提升到作用域顶部。\n````javascript\nfunction fn(){\n    //do somethings\n}\n````\n## 8.2函数调用\n4种方式调用函数：\n\n1. 作为函数\n\n    ECMAScript 3和ECMAScript 5的非严格模式下规定，函数调用的调用上下文是全局对象。严格模式下，上下文对象是undefined。\n    ````javascript\n    'use strict';\n    function fn(){\n        console.log(this);\n    }\n    fn()//undefined\n    ````\n2. 作为方法\n\n    将函数保存在一个对象的属性里，作为该对象的方法进行调用。\n\n    任何函数作为方法调用都会传入一个隐式的实参，即调用该方法的对象。\n    ````javascript\n    var a=1;\n    function fn1(){\n        console.log(this.a);\n    }\n    var o={\n        a:2,\n        m:function(){\n            console.log(this.a);\n        }\n    }\n    console.log(fn1())//1\n    console.log(o.m())//2\n    ````\n3. 作为构造函数\n\n    通过new关键字进行构造函数调用。构造函数调用创建一个新的空对象，这个对象继承构造函数的prototype属性，构造函数将这个新对象用作其调用上下文，因此构造函数可以使用this关键字引用这个新对象。\n\n    不使用return关键字时，返回该新对象。\n\n\n4. 使用它们的call()或apply()方法间接调用\n\n    call()方法使用自有的实参列表作为函数的实参。\n\n    apply()则要求以数组的方式传入参数。\n\n## 8.3函数的实参和形参\njavascript函数调用不检查传入形参的个数。\n\n当调用函数时传入的实参个数少于函数声明是指定的形参个数时，剩下的形参将设置为undefined 。\n\n为了保持函数的适应性，应当给忽略的实参设置默认值。可使用||运算符。\n````javascript\nfunction fn(a){\n    a=a||[]\n}\n````\n当传入的实参个数大于指定的形参个数时，没有办法直接获得未命名值的引用。标示符arguments是指向实参对象的引用，可通过数字下标获得传入的实参值。\n````javascript\nfunction Max(){\n    var max = Number.NEGATIVE_INFINITY;\n    for(let i=0;i<arguments.length;i++){\n        max=arguments[i]>max?arguments[i]:max;\n    }\n    return max\n}\n````\n非严格模式下，arguments.callee指代当前正在执行的函数。arguments.caller指代调用当前正在执行的函数的函数。\n\n匿名函数中可通过arguments.callee调用自身实现递归。\n````javascript\nvar factorial = function(x){\n    if (x<1) return 1;\n    return x*arguments.callee(x-1)\n}\n````\njavascript方法的形参并未进行类型检查，应当添加实参类型检查逻辑。\n## 8.3作为值的函数\n````javascript\nvar operators = {\n    add:function(x,y){return x+y},\n    subtract:function(x,y){return x-y},\n    multiply:function(x,y){return x*y},\n    divide:function(x,y){return x/y}\n}\n\nfunction operate(operation,operand1,operand2){\n    if(typeof operators[operation] === 'function'){\n        return operators[operation](operand1,operand2)\n    }else{\n        throw 'unkown operator'\n    }\n}\nvar j = operate('add', 'hello', operate('add',' ','world'))\nconsole.log(j)//hello world\n````\n自定义函数属性\n````javascript\nfunction factorial(n){\n    if(isFinite(n)&&n>0&&n==Math.round(n)){\n        if(!(n in factorial)){\n            factorial[n]=n*factorial(n-1)\n        }\n        return factorial[n]\n    }else{\n        return NaN\n    }\n}\nfactorial[1]=1;\nconsole.log(factorial(4))//24\n````\n## 8.5作为命名空间的函数\n````javascript\nvar extend = (function(){\n    for(var i in {toString:null}){\n        return function extend(o){\n            for (var i=1;i<arguments.length;i++){\n                var source = arguments[i];\n                for(var prop in source){\n                    o[prop] = source[prop]\n                }\n            }\n        }\n    }\n    return function patched_extend(o){\n        for (var i=1;i<arguments.length;i++){\n            var source = arguments[i];\n            for(var prop in source){\n                o[prop] = source[prop]\n            }\n            for(var j=0;j<protoprops.length;j++){\n                prop=protoprops[j];\n                if(source.hasOwnProperty(prop)){\n                    o[prop] = source[prop]\n                }\n            }\n        }\n    }\n    var proptypes = ['toString','valueOf','constructor','hasOwnProperty']\n}())\n````\n## 8.6闭包\njavascript采用词法作用域，函数的执行依赖变量作用域，该作用域是在函数定义时决定的。函数定义时的作用域链，在函数执行时依然有效。\n\n为实现这种词法作用域，javascript函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。\n\n函数对象通过作用域链互相关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。\n````javascript\nvar scope = 'global scope';\nfunction checkScope(){\n    var scope = 'local scope';\n    function f(){return scope}\n    return f()\n}\ncheckScope()//'local scope'\n````\n````javascript\nvar scope = 'global scope';\nfunction checkScope(){\n    var scope = 'local scope';\n    function f(){return scope}\n    return f\n}\ncheckScope()()//'local scope'\n````\n利用闭包实现私有存取器方法\n````javascript\nfunction addPrivateProperty(o,name,predicate){\n    var value;\n    o['get'+name]=function(){return value};\n    o['set'+name]=function(v){\n        if(predicate&&!predicate(v)){\n            throw Error('set'+name+':invalid value'+v)\n        }else{\n            value=v\n        }\n    }\n}\nvar o = {};\naddPrivateProperty(o,'Name',function(x){return typeof x==='string'})\no.setName('Frank');\nconsole.log(o.getName());//'Frank'\no.setName(o) //Error: setName:invalid value[object Object]\n````\nthis是javascript关键字，而不是变量，如果闭包在外部函数里无法访问this，除非外部函数将this转存为一个变量。arguments同理。\n## 8.7函数属性、方法和构造函数\n1. length属性\n    在函数体里，arguments.length指向传入函数的实参长度，而函数的length属性指函数定义时给出的参数个数，即“形参”。\n    ````javascript\n    function check(args){\n        var actual = args.length;\n        var expected = args.callee.length;\n        if(actual!==expected){\n            throw Error('Expected'+expected+'args;got'+actual)\n        }\n    }\n    function f(x,y,z){\n        check(arguments);\n        return x+y+z\n    }\n    ````\n2. prototype\n    当函数用作构造函数的时候，新创建的对象会从原型对象上继承属性。\n3. call()和apply()方法\n    call()和apply()的第一个参数是要调用函数的母对象，它是调用的上下文，函数体内通过this获得对它引用。\n\n    ECMAScript 5的严格模式中，第一个实参会变成this的值。\n    ````javascript\n    'use strict'\n    var a=1;\n    var x={a:2}\n    function f(){console.log(a)}\n    f.call(x)//1\n    f.aplly(x)//1\n    ````\n    ECMAScript 3和非严格模式中，传入null和undefined会被全局对象所替代。\n\n    call()方法第一个调用上下文实参之后的所有实参就是要传入待调用函数的值。\n    ````javascript\n    f.call(o,1,2)\n    ````\n    apply()调用上下文实参之后的所有实参d都放入一个数组中。\n    ````javascript\n    f.apply(o,[1,2])\n    ````\n4. bind()方法\n    ECMAScript 5新增bind()方法，用来将函数绑定至某个对象。\n\n    在函数f()调用bind方法并传入一个对象o作为参数，将返回一个新的函数。调用这个新的函数，会把原始函数f()当做对象o的方法来调用。\n    ````javascript\n    function f(y){ return this.x+y }\n    var o = {x:1};\n    var g = f.bind(o);\n    g(2)//3\n    ````\n    除了第一个实参外，传入bind()的参数也会绑定至this。\n\n    bind()方法所返回的函数的length（形参数量）等于原函数的形参数量减去传入bind()方法中的实参数量（第一个参数以后的所有参数），因为传入bind中的实参都会绑定到原函数的形参\n    ````javascript\n    var sum = function(x,y){return x+y}//length为2\n    var succ = sum.bind(null,1)//length为1\n    succ(2)//3\n\n    //var sum = function(x,y){return x+y}//length为2\n    //var succ = sum.bind(null,1,2)//length为0\n    //succ()//3\n    ````\n    当bind()所返回的函数用作构造函数的时候， 传入bind()的this将被忽略，实参会全部传入原函数。\n\n    bind()方法返回的构造函数不包含prototype属性，将这些绑定的函数用作构造函数所创建的对象会从原始的未绑定的构造函数中继承prototype。\n    ````javascript\n    function original(x){\n        this.a = 1;\n        this.b = function(){return this.a + x}\n    }\n    var obj={\n        a = 10\n    }\n    var newObj = new(original.bind(obj, 2)); //传入了一个实参2\n    console.log(newObj.a);  //输出1, 说明返回的函数用作构造函数时obj(this的值)被忽略了\n    console.log(newObj.b()); //输出3 ，说明传入的实参2传入了原函数original\n    ````\n\n    ECMAScript 3版本的bind方法()\n    ````javascript\n    if(!Function.prototype.bind){\n        Function.prototype.bind(o,/*,arguments*/){\n            var self = this, boundArgs = arguments;\n            return function(){\n                var args = [], i;\n                for(i=1;i<boundArgs.length;i++){args.push(bonudArgs[i])}\n                for(i=0;i<arguments.length;i++){args.push(arguments[i])}\n                return self.apply(o,args)\n            }\n        }\n    }\n    ````\n5. toString()方法\n    大多数函数的toString()方法的实现都返回函数的完整源码。\n    \n    内置函数往往返回一个“[native code]”的字符串作为函数体。\n6. Function()构造函数\n    函数可通过Function()构造函数来定义。\n    ````javascript\n    var f = new Function('x','y','return x+y')\n    ````\n    Function()构造函数允许javascript运行时动态创建并编译函数。\n\n    每次调用Function()构造函数都回解析函数体，并创建新的函数对象。在循环中执行，会影响执行效率。\n\n    Function()构造函数创建的函数不使用词法作用域，函数体代码的编译综会在顶层函数执行。\n    ````javascript\n    var scope = 'global';\n    function constructFunciton(){\n        var scope = 'local';\n        return new Function('return scope')\n    }\n    constructFunciton()()//'global'\n    ````\n7. 可调用对象\n    截至目前为止，两个可调用对象在javascript中的实现不能算作函数。\n\n    ie8机之前的版本的客户端方法使用了可调用的宿主对象，而不是内置的函数对象。\n\n    另一个常见的可调用对象是RegExp对象，非javascript的标准特性。\n\n    检查对象是否为真正的函数对象。\n    ````javascript\n    function isFunction(x){\n        return Object.prototype.toString.call(x)==='[object Function]'\n    }\n    isFunction(window.alert)//IE8下为false\n    ````\n## 8.8函数式编程\n1. 使用函数处理数组\n    自定义map()函数\n    ````javascript\n    var map = Array.prototype.map?function(a,f){return a.map(f)}:function(a,f){\n        var results = [];\n        for(var i = 0,len = a.length;i<len;i++;){\n            if(i in a){\n                results[i] = f.call(null,a[i],i,a)\n            }\n        }\n        return results\n    }\n    自定义reduce()函数\n    ````javascript\n    var reduce = Array.prototype.reduce?function(a,f,initial){\n        if(arguments.length>2){\n            return a.reduce(f,initial)\n        }else{return a.reduce(f)}\n    }:function(a,f,initial){\n        var i = 0,len = a.length,accumulator;\n        if(arguments.length>2){accumulator=initial}\n        else{\n            if(len == 0){throw TypeError()}\n            while(i < len){\n                if(i in a){\n                    accumulator=a[i++];\n                    break;\n                }else{\n                    i++\n                }\n            }\n            if(i == len){throw TypeError()}\n        }\n        while(i < len){\n            if(i in a){\n                accumulator=f.call(undefined,accumulator,a[i],i,a);\n                i++\n            }\n        }\n        return accumulator\n    }\n    ````\n2. 高阶函数\n    高阶函数(higher-order function)即操作函数的函数，接收一个或者多个函数作为参数，返回一个新的函数。\n    ````javascript\n    function not(f){\n        return function(){\n            var result = f.apply(this,arguments)\n            return !return\n        }\n    }\n    function even(){\n        return x%2 === 0\n    }\n    var odd = not(even);\n    [1,3,5,7,9].every(odd)//true\n    ````\n3. 不完全函数\n    在JavaScript中，不完全函数是一种函数变换技巧，即把一次完整的函数调用拆成多次函数调用，每次传入的实参都是完整实参的一部分，每个拆分开的函数叫做不完全函数，每次函数调用叫做不完全调用，这种变换的特点是每次调用都返回一个函数，直到得到最终运行结果为止。\n    \n    举一个简单的例子，将对函数f(1,2,3,4,5)的调用修改为等价的f(1,2)(3,4)(5,6)，后者包含三次调用，和每次调用相关的函数就是“不完全函数”。\n    ````javascript\n    //实现一个工具函数，将类数组（或对象）转换为真正的数组\n    //在后面的示例代码中用到了这个方法将arguments对象转换为真正的数组\n    function array(a,n){\n        return Array.prototype.slice.call(a,n||0);\n    }\n\n    //这个函数的实参传递至左侧\n    function partialLeft(f){\n        var args = arguments;   //保存外部的实参数组\n        return function(){      //并返回这个函数\n            var a = array(args,1);  //从第一个元素开始处理args\n            a = a.concat(array(arguments)); //然后增加所有的内部实参\n            return f.apply(this,a); //然后基于这个实参列表调用f()\n        }\n    }\n\n    //这个函数的实参传递至右侧\n    function partialRight(f){\n        var args = arguments;   //保存外部的实参数组\n        return function(){      //并返回这个函数\n            var a = array(arguments);   //从内部参数开始\n            a = a.concat(array(args,1));    //从第一个元素开始处理args\n            return f.apply(this,a); //然后基于这个实参列表调用f()\n        }\n    }\n\n    //这个函数的实参传递至左侧\n    //如果参数为undefined,用后面的实参填充undefined\n    function partial(f){\n        var args = arguments;   //保存外部实参数组\n        return function(){\n            var a = array(args,1);  //从外部args开始\n            //遍历args，从内部实参填充undefined值\n            for(var i=0,j=0;i<a.length;i++){\n                if (a[i]===undefined) a[i] = arguments[j++];\n            }\n            //现在将剩下的内部实参都追加进去\n            a = a.concat(array(arguments,j));\n            return f.apply(this,a);\n        };\n    }\n\n    //这个函数带有三个实参\n    var f = function(x,y,z){return x*(y-z);};\n\n    //注意这三个不完全调用之间的区别\n    console.log(partialLeft(f,2)(3,4)); //-2，绑定第一个实参：2*(3-4)\n    console.log(partialRight(f,2)(3,4));    //6，绑定第一个实参：3*(4-2)\n    console.log(partial(f,2)(3,4));     //-2，绑定第一个实参：2*(3-4)\n    console.log(partial(f,undefined,2)(3,4));   //-6，绑定第一个实参：3*(2-4)\n    ````\n4. 记忆\n    在函数式编程中，将上次计算的结果缓存起来，这种缓存技巧叫“记忆”(memorization)。\n    ````javascript\n    //返回f()带有记忆功能的版本\n    function memorize(f){\n        var cache = {};\n        return function(){\n            //将实参转换为字符串形式，并将其用作缓存的键。\n            var key = arguments.length+Array.prototype.join.call(arguments,',');\n            if(key in cache){return cache[key]}\n            else{return cache[key] = f.apply(this,arguments)}\n        }\n    }\n    ````\n","source":"_posts/javascripts权威指南笔记-8.md","raw":"---\ntitle: 《javascript权威指南》第八章读书笔记\ndate: 2017-03-18\ntags: ['function']\ncategories: ['笔记']\n---\n## 8.1函数定义\n(1) 函数定义表达式\n\n声明的变量会提升，赋值操作不会提升。\n````javascript\nvar fn = function(){\n    //do somethings\n}\n````\n(2) 函数声明语句\n\n函数声明语句会被提升到作用域顶部。\n````javascript\nfunction fn(){\n    //do somethings\n}\n````\n## 8.2函数调用\n4种方式调用函数：\n\n1. 作为函数\n\n    ECMAScript 3和ECMAScript 5的非严格模式下规定，函数调用的调用上下文是全局对象。严格模式下，上下文对象是undefined。\n    ````javascript\n    'use strict';\n    function fn(){\n        console.log(this);\n    }\n    fn()//undefined\n    ````\n2. 作为方法\n\n    将函数保存在一个对象的属性里，作为该对象的方法进行调用。\n\n    任何函数作为方法调用都会传入一个隐式的实参，即调用该方法的对象。\n    ````javascript\n    var a=1;\n    function fn1(){\n        console.log(this.a);\n    }\n    var o={\n        a:2,\n        m:function(){\n            console.log(this.a);\n        }\n    }\n    console.log(fn1())//1\n    console.log(o.m())//2\n    ````\n3. 作为构造函数\n\n    通过new关键字进行构造函数调用。构造函数调用创建一个新的空对象，这个对象继承构造函数的prototype属性，构造函数将这个新对象用作其调用上下文，因此构造函数可以使用this关键字引用这个新对象。\n\n    不使用return关键字时，返回该新对象。\n\n\n4. 使用它们的call()或apply()方法间接调用\n\n    call()方法使用自有的实参列表作为函数的实参。\n\n    apply()则要求以数组的方式传入参数。\n\n## 8.3函数的实参和形参\njavascript函数调用不检查传入形参的个数。\n\n当调用函数时传入的实参个数少于函数声明是指定的形参个数时，剩下的形参将设置为undefined 。\n\n为了保持函数的适应性，应当给忽略的实参设置默认值。可使用||运算符。\n````javascript\nfunction fn(a){\n    a=a||[]\n}\n````\n当传入的实参个数大于指定的形参个数时，没有办法直接获得未命名值的引用。标示符arguments是指向实参对象的引用，可通过数字下标获得传入的实参值。\n````javascript\nfunction Max(){\n    var max = Number.NEGATIVE_INFINITY;\n    for(let i=0;i<arguments.length;i++){\n        max=arguments[i]>max?arguments[i]:max;\n    }\n    return max\n}\n````\n非严格模式下，arguments.callee指代当前正在执行的函数。arguments.caller指代调用当前正在执行的函数的函数。\n\n匿名函数中可通过arguments.callee调用自身实现递归。\n````javascript\nvar factorial = function(x){\n    if (x<1) return 1;\n    return x*arguments.callee(x-1)\n}\n````\njavascript方法的形参并未进行类型检查，应当添加实参类型检查逻辑。\n## 8.3作为值的函数\n````javascript\nvar operators = {\n    add:function(x,y){return x+y},\n    subtract:function(x,y){return x-y},\n    multiply:function(x,y){return x*y},\n    divide:function(x,y){return x/y}\n}\n\nfunction operate(operation,operand1,operand2){\n    if(typeof operators[operation] === 'function'){\n        return operators[operation](operand1,operand2)\n    }else{\n        throw 'unkown operator'\n    }\n}\nvar j = operate('add', 'hello', operate('add',' ','world'))\nconsole.log(j)//hello world\n````\n自定义函数属性\n````javascript\nfunction factorial(n){\n    if(isFinite(n)&&n>0&&n==Math.round(n)){\n        if(!(n in factorial)){\n            factorial[n]=n*factorial(n-1)\n        }\n        return factorial[n]\n    }else{\n        return NaN\n    }\n}\nfactorial[1]=1;\nconsole.log(factorial(4))//24\n````\n## 8.5作为命名空间的函数\n````javascript\nvar extend = (function(){\n    for(var i in {toString:null}){\n        return function extend(o){\n            for (var i=1;i<arguments.length;i++){\n                var source = arguments[i];\n                for(var prop in source){\n                    o[prop] = source[prop]\n                }\n            }\n        }\n    }\n    return function patched_extend(o){\n        for (var i=1;i<arguments.length;i++){\n            var source = arguments[i];\n            for(var prop in source){\n                o[prop] = source[prop]\n            }\n            for(var j=0;j<protoprops.length;j++){\n                prop=protoprops[j];\n                if(source.hasOwnProperty(prop)){\n                    o[prop] = source[prop]\n                }\n            }\n        }\n    }\n    var proptypes = ['toString','valueOf','constructor','hasOwnProperty']\n}())\n````\n## 8.6闭包\njavascript采用词法作用域，函数的执行依赖变量作用域，该作用域是在函数定义时决定的。函数定义时的作用域链，在函数执行时依然有效。\n\n为实现这种词法作用域，javascript函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。\n\n函数对象通过作用域链互相关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。\n````javascript\nvar scope = 'global scope';\nfunction checkScope(){\n    var scope = 'local scope';\n    function f(){return scope}\n    return f()\n}\ncheckScope()//'local scope'\n````\n````javascript\nvar scope = 'global scope';\nfunction checkScope(){\n    var scope = 'local scope';\n    function f(){return scope}\n    return f\n}\ncheckScope()()//'local scope'\n````\n利用闭包实现私有存取器方法\n````javascript\nfunction addPrivateProperty(o,name,predicate){\n    var value;\n    o['get'+name]=function(){return value};\n    o['set'+name]=function(v){\n        if(predicate&&!predicate(v)){\n            throw Error('set'+name+':invalid value'+v)\n        }else{\n            value=v\n        }\n    }\n}\nvar o = {};\naddPrivateProperty(o,'Name',function(x){return typeof x==='string'})\no.setName('Frank');\nconsole.log(o.getName());//'Frank'\no.setName(o) //Error: setName:invalid value[object Object]\n````\nthis是javascript关键字，而不是变量，如果闭包在外部函数里无法访问this，除非外部函数将this转存为一个变量。arguments同理。\n## 8.7函数属性、方法和构造函数\n1. length属性\n    在函数体里，arguments.length指向传入函数的实参长度，而函数的length属性指函数定义时给出的参数个数，即“形参”。\n    ````javascript\n    function check(args){\n        var actual = args.length;\n        var expected = args.callee.length;\n        if(actual!==expected){\n            throw Error('Expected'+expected+'args;got'+actual)\n        }\n    }\n    function f(x,y,z){\n        check(arguments);\n        return x+y+z\n    }\n    ````\n2. prototype\n    当函数用作构造函数的时候，新创建的对象会从原型对象上继承属性。\n3. call()和apply()方法\n    call()和apply()的第一个参数是要调用函数的母对象，它是调用的上下文，函数体内通过this获得对它引用。\n\n    ECMAScript 5的严格模式中，第一个实参会变成this的值。\n    ````javascript\n    'use strict'\n    var a=1;\n    var x={a:2}\n    function f(){console.log(a)}\n    f.call(x)//1\n    f.aplly(x)//1\n    ````\n    ECMAScript 3和非严格模式中，传入null和undefined会被全局对象所替代。\n\n    call()方法第一个调用上下文实参之后的所有实参就是要传入待调用函数的值。\n    ````javascript\n    f.call(o,1,2)\n    ````\n    apply()调用上下文实参之后的所有实参d都放入一个数组中。\n    ````javascript\n    f.apply(o,[1,2])\n    ````\n4. bind()方法\n    ECMAScript 5新增bind()方法，用来将函数绑定至某个对象。\n\n    在函数f()调用bind方法并传入一个对象o作为参数，将返回一个新的函数。调用这个新的函数，会把原始函数f()当做对象o的方法来调用。\n    ````javascript\n    function f(y){ return this.x+y }\n    var o = {x:1};\n    var g = f.bind(o);\n    g(2)//3\n    ````\n    除了第一个实参外，传入bind()的参数也会绑定至this。\n\n    bind()方法所返回的函数的length（形参数量）等于原函数的形参数量减去传入bind()方法中的实参数量（第一个参数以后的所有参数），因为传入bind中的实参都会绑定到原函数的形参\n    ````javascript\n    var sum = function(x,y){return x+y}//length为2\n    var succ = sum.bind(null,1)//length为1\n    succ(2)//3\n\n    //var sum = function(x,y){return x+y}//length为2\n    //var succ = sum.bind(null,1,2)//length为0\n    //succ()//3\n    ````\n    当bind()所返回的函数用作构造函数的时候， 传入bind()的this将被忽略，实参会全部传入原函数。\n\n    bind()方法返回的构造函数不包含prototype属性，将这些绑定的函数用作构造函数所创建的对象会从原始的未绑定的构造函数中继承prototype。\n    ````javascript\n    function original(x){\n        this.a = 1;\n        this.b = function(){return this.a + x}\n    }\n    var obj={\n        a = 10\n    }\n    var newObj = new(original.bind(obj, 2)); //传入了一个实参2\n    console.log(newObj.a);  //输出1, 说明返回的函数用作构造函数时obj(this的值)被忽略了\n    console.log(newObj.b()); //输出3 ，说明传入的实参2传入了原函数original\n    ````\n\n    ECMAScript 3版本的bind方法()\n    ````javascript\n    if(!Function.prototype.bind){\n        Function.prototype.bind(o,/*,arguments*/){\n            var self = this, boundArgs = arguments;\n            return function(){\n                var args = [], i;\n                for(i=1;i<boundArgs.length;i++){args.push(bonudArgs[i])}\n                for(i=0;i<arguments.length;i++){args.push(arguments[i])}\n                return self.apply(o,args)\n            }\n        }\n    }\n    ````\n5. toString()方法\n    大多数函数的toString()方法的实现都返回函数的完整源码。\n    \n    内置函数往往返回一个“[native code]”的字符串作为函数体。\n6. Function()构造函数\n    函数可通过Function()构造函数来定义。\n    ````javascript\n    var f = new Function('x','y','return x+y')\n    ````\n    Function()构造函数允许javascript运行时动态创建并编译函数。\n\n    每次调用Function()构造函数都回解析函数体，并创建新的函数对象。在循环中执行，会影响执行效率。\n\n    Function()构造函数创建的函数不使用词法作用域，函数体代码的编译综会在顶层函数执行。\n    ````javascript\n    var scope = 'global';\n    function constructFunciton(){\n        var scope = 'local';\n        return new Function('return scope')\n    }\n    constructFunciton()()//'global'\n    ````\n7. 可调用对象\n    截至目前为止，两个可调用对象在javascript中的实现不能算作函数。\n\n    ie8机之前的版本的客户端方法使用了可调用的宿主对象，而不是内置的函数对象。\n\n    另一个常见的可调用对象是RegExp对象，非javascript的标准特性。\n\n    检查对象是否为真正的函数对象。\n    ````javascript\n    function isFunction(x){\n        return Object.prototype.toString.call(x)==='[object Function]'\n    }\n    isFunction(window.alert)//IE8下为false\n    ````\n## 8.8函数式编程\n1. 使用函数处理数组\n    自定义map()函数\n    ````javascript\n    var map = Array.prototype.map?function(a,f){return a.map(f)}:function(a,f){\n        var results = [];\n        for(var i = 0,len = a.length;i<len;i++;){\n            if(i in a){\n                results[i] = f.call(null,a[i],i,a)\n            }\n        }\n        return results\n    }\n    自定义reduce()函数\n    ````javascript\n    var reduce = Array.prototype.reduce?function(a,f,initial){\n        if(arguments.length>2){\n            return a.reduce(f,initial)\n        }else{return a.reduce(f)}\n    }:function(a,f,initial){\n        var i = 0,len = a.length,accumulator;\n        if(arguments.length>2){accumulator=initial}\n        else{\n            if(len == 0){throw TypeError()}\n            while(i < len){\n                if(i in a){\n                    accumulator=a[i++];\n                    break;\n                }else{\n                    i++\n                }\n            }\n            if(i == len){throw TypeError()}\n        }\n        while(i < len){\n            if(i in a){\n                accumulator=f.call(undefined,accumulator,a[i],i,a);\n                i++\n            }\n        }\n        return accumulator\n    }\n    ````\n2. 高阶函数\n    高阶函数(higher-order function)即操作函数的函数，接收一个或者多个函数作为参数，返回一个新的函数。\n    ````javascript\n    function not(f){\n        return function(){\n            var result = f.apply(this,arguments)\n            return !return\n        }\n    }\n    function even(){\n        return x%2 === 0\n    }\n    var odd = not(even);\n    [1,3,5,7,9].every(odd)//true\n    ````\n3. 不完全函数\n    在JavaScript中，不完全函数是一种函数变换技巧，即把一次完整的函数调用拆成多次函数调用，每次传入的实参都是完整实参的一部分，每个拆分开的函数叫做不完全函数，每次函数调用叫做不完全调用，这种变换的特点是每次调用都返回一个函数，直到得到最终运行结果为止。\n    \n    举一个简单的例子，将对函数f(1,2,3,4,5)的调用修改为等价的f(1,2)(3,4)(5,6)，后者包含三次调用，和每次调用相关的函数就是“不完全函数”。\n    ````javascript\n    //实现一个工具函数，将类数组（或对象）转换为真正的数组\n    //在后面的示例代码中用到了这个方法将arguments对象转换为真正的数组\n    function array(a,n){\n        return Array.prototype.slice.call(a,n||0);\n    }\n\n    //这个函数的实参传递至左侧\n    function partialLeft(f){\n        var args = arguments;   //保存外部的实参数组\n        return function(){      //并返回这个函数\n            var a = array(args,1);  //从第一个元素开始处理args\n            a = a.concat(array(arguments)); //然后增加所有的内部实参\n            return f.apply(this,a); //然后基于这个实参列表调用f()\n        }\n    }\n\n    //这个函数的实参传递至右侧\n    function partialRight(f){\n        var args = arguments;   //保存外部的实参数组\n        return function(){      //并返回这个函数\n            var a = array(arguments);   //从内部参数开始\n            a = a.concat(array(args,1));    //从第一个元素开始处理args\n            return f.apply(this,a); //然后基于这个实参列表调用f()\n        }\n    }\n\n    //这个函数的实参传递至左侧\n    //如果参数为undefined,用后面的实参填充undefined\n    function partial(f){\n        var args = arguments;   //保存外部实参数组\n        return function(){\n            var a = array(args,1);  //从外部args开始\n            //遍历args，从内部实参填充undefined值\n            for(var i=0,j=0;i<a.length;i++){\n                if (a[i]===undefined) a[i] = arguments[j++];\n            }\n            //现在将剩下的内部实参都追加进去\n            a = a.concat(array(arguments,j));\n            return f.apply(this,a);\n        };\n    }\n\n    //这个函数带有三个实参\n    var f = function(x,y,z){return x*(y-z);};\n\n    //注意这三个不完全调用之间的区别\n    console.log(partialLeft(f,2)(3,4)); //-2，绑定第一个实参：2*(3-4)\n    console.log(partialRight(f,2)(3,4));    //6，绑定第一个实参：3*(4-2)\n    console.log(partial(f,2)(3,4));     //-2，绑定第一个实参：2*(3-4)\n    console.log(partial(f,undefined,2)(3,4));   //-6，绑定第一个实参：3*(2-4)\n    ````\n4. 记忆\n    在函数式编程中，将上次计算的结果缓存起来，这种缓存技巧叫“记忆”(memorization)。\n    ````javascript\n    //返回f()带有记忆功能的版本\n    function memorize(f){\n        var cache = {};\n        return function(){\n            //将实参转换为字符串形式，并将其用作缓存的键。\n            var key = arguments.length+Array.prototype.join.call(arguments,',');\n            if(key in cache){return cache[key]}\n            else{return cache[key] = f.apply(this,arguments)}\n        }\n    }\n    ````\n","slug":"javascripts权威指南笔记-8","published":1,"updated":"2017-04-05T12:06:16.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1c10007f4b4f44lnz67","content":"<h2 id=\"8-1函数定义\"><a href=\"#8-1函数定义\" class=\"headerlink\" title=\"8.1函数定义\"></a>8.1函数定义</h2><p>(1) 函数定义表达式</p>\n<p>声明的变量会提升，赋值操作不会提升。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do somethings</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2) 函数声明语句</p>\n<p>函数声明语句会被提升到作用域顶部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do somethings</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"8-2函数调用\"><a href=\"#8-2函数调用\" class=\"headerlink\" title=\"8.2函数调用\"></a>8.2函数调用</h2><p>4种方式调用函数：</p>\n<ol>\n<li><p>作为函数</p>\n<p> ECMAScript 3和ECMAScript 5的非严格模式下规定，函数调用的调用上下文是全局对象。严格模式下，上下文对象是undefined。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">fn()<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为方法</p>\n<p> 将函数保存在一个对象的属性里，作为该对象的方法进行调用。</p>\n<p> 任何函数作为方法调用都会传入一个隐式的实参，即调用该方法的对象。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o=&#123;</div><div class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">m</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fn1())<span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.m())<span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为构造函数</p>\n<p> 通过new关键字进行构造函数调用。构造函数调用创建一个新的空对象，这个对象继承构造函数的prototype属性，构造函数将这个新对象用作其调用上下文，因此构造函数可以使用this关键字引用这个新对象。</p>\n<p> 不使用return关键字时，返回该新对象。</p>\n</li>\n</ol>\n<ol>\n<li><p>使用它们的call()或apply()方法间接调用</p>\n<p> call()方法使用自有的实参列表作为函数的实参。</p>\n<p> apply()则要求以数组的方式传入参数。</p>\n</li>\n</ol>\n<h2 id=\"8-3函数的实参和形参\"><a href=\"#8-3函数的实参和形参\" class=\"headerlink\" title=\"8.3函数的实参和形参\"></a>8.3函数的实参和形参</h2><p>javascript函数调用不检查传入形参的个数。</p>\n<p>当调用函数时传入的实参个数少于函数声明是指定的形参个数时，剩下的形参将设置为undefined 。</p>\n<p>为了保持函数的适应性，应当给忽略的实参设置默认值。可使用||运算符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    a=a||[]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当传入的实参个数大于指定的形参个数时，没有办法直接获得未命名值的引用。标示符arguments是指向实参对象的引用，可通过数字下标获得传入的实参值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Max</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"built_in\">Number</span>.NEGATIVE_INFINITY;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">        max=<span class=\"built_in\">arguments</span>[i]&gt;max?<span class=\"built_in\">arguments</span>[i]:max;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> max</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>非严格模式下，arguments.callee指代当前正在执行的函数。arguments.caller指代调用当前正在执行的函数的函数。</p>\n<p>匿名函数中可通过arguments.callee调用自身实现递归。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factorial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x*<span class=\"built_in\">arguments</span>.callee(x<span class=\"number\">-1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>javascript方法的形参并未进行类型检查，应当添加实参类型检查逻辑。</p>\n<h2 id=\"8-3作为值的函数\"><a href=\"#8-3作为值的函数\" class=\"headerlink\" title=\"8.3作为值的函数\"></a>8.3作为值的函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> operators = &#123;</div><div class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x+y&#125;,</div><div class=\"line\">    <span class=\"attr\">subtract</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x-y&#125;,</div><div class=\"line\">    <span class=\"attr\">multiply</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x*y&#125;,</div><div class=\"line\">    <span class=\"attr\">divide</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x/y&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operate</span>(<span class=\"params\">operation,operand1,operand2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> operators[operation] === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> operators[operation](operand1,operand2)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">'unkown operator'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> j = operate(<span class=\"string\">'add'</span>, <span class=\"string\">'hello'</span>, operate(<span class=\"string\">'add'</span>,<span class=\"string\">' '</span>,<span class=\"string\">'world'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(j)<span class=\"comment\">//hello world</span></div></pre></td></tr></table></figure>\n<p>自定义函数属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">isFinite</span>(n)&amp;&amp;n&gt;<span class=\"number\">0</span>&amp;&amp;n==<span class=\"built_in\">Math</span>.round(n))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!(n <span class=\"keyword\">in</span> factorial))&#123;</div><div class=\"line\">            factorial[n]=n*factorial(n<span class=\"number\">-1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> factorial[n]</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">factorial[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(factorial(<span class=\"number\">4</span>))<span class=\"comment\">//24</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"8-5作为命名空间的函数\"><a href=\"#8-5作为命名空间的函数\" class=\"headerlink\" title=\"8.5作为命名空间的函数\"></a>8.5作为命名空间的函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> extend = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> &#123;<span class=\"attr\">toString</span>:<span class=\"literal\">null</span>&#125;)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">                    o[prop] = source[prop]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patched_extend</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">                o[prop] = source[prop]</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;protoprops.length;j++)&#123;</div><div class=\"line\">                prop=protoprops[j];</div><div class=\"line\">                <span class=\"keyword\">if</span>(source.hasOwnProperty(prop))&#123;</div><div class=\"line\">                    o[prop] = source[prop]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> proptypes = [<span class=\"string\">'toString'</span>,<span class=\"string\">'valueOf'</span>,<span class=\"string\">'constructor'</span>,<span class=\"string\">'hasOwnProperty'</span>]</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure>\n<h2 id=\"8-6闭包\"><a href=\"#8-6闭包\" class=\"headerlink\" title=\"8.6闭包\"></a>8.6闭包</h2><p>javascript采用词法作用域，函数的执行依赖变量作用域，该作用域是在函数定义时决定的。函数定义时的作用域链，在函数执行时依然有效。</p>\n<p>为实现这种词法作用域，javascript函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。</p>\n<p>函数对象通过作用域链互相关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global scope'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkScope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local scope'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> scope&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> f()</div><div class=\"line\">&#125;</div><div class=\"line\">checkScope()<span class=\"comment\">//'local scope'</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global scope'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkScope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local scope'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> scope&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> f</div><div class=\"line\">&#125;</div><div class=\"line\">checkScope()()<span class=\"comment\">//'local scope'</span></div></pre></td></tr></table></figure>\n<p>利用闭包实现私有存取器方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addPrivateProperty</span>(<span class=\"params\">o,name,predicate</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value;</div><div class=\"line\">    o[<span class=\"string\">'get'</span>+name]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> value&#125;;</div><div class=\"line\">    o[<span class=\"string\">'set'</span>+name]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(predicate&amp;&amp;!predicate(v))&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'set'</span>+name+<span class=\"string\">':invalid value'</span>+v)</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            value=v</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">addPrivateProperty(o,<span class=\"string\">'Name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x===<span class=\"string\">'string'</span>&#125;)</div><div class=\"line\">o.setName(<span class=\"string\">'Frank'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.getName());<span class=\"comment\">//'Frank'</span></div><div class=\"line\">o.setName(o) <span class=\"comment\">//Error: setName:invalid value[object Object]</span></div></pre></td></tr></table></figure></p>\n<p>this是javascript关键字，而不是变量，如果闭包在外部函数里无法访问this，除非外部函数将this转存为一个变量。arguments同理。</p>\n<h2 id=\"8-7函数属性、方法和构造函数\"><a href=\"#8-7函数属性、方法和构造函数\" class=\"headerlink\" title=\"8.7函数属性、方法和构造函数\"></a>8.7函数属性、方法和构造函数</h2><ol>\n<li><p>length属性<br> 在函数体里，arguments.length指向传入函数的实参长度，而函数的length属性指函数定义时给出的参数个数，即“形参”。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">args</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> actual = args.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> expected = args.callee.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(actual!==expected)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected'</span>+expected+<span class=\"string\">'args;got'</span>+actual)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y,z</span>)</span>&#123;</div><div class=\"line\">    check(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> x+y+z</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>prototype<br> 当函数用作构造函数的时候，新创建的对象会从原型对象上继承属性。</p>\n</li>\n<li><p>call()和apply()方法<br> call()和apply()的第一个参数是要调用函数的母对象，它是调用的上下文，函数体内通过this获得对它引用。</p>\n<p> ECMAScript 5的严格模式中，第一个实参会变成this的值。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> x=&#123;<span class=\"attr\">a</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(a)&#125;</div><div class=\"line\">f.call(x)<span class=\"comment\">//1</span></div><div class=\"line\">f.aplly(x)<span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n<p> ECMAScript 3和非严格模式中，传入null和undefined会被全局对象所替代。</p>\n<p> call()方法第一个调用上下文实参之后的所有实参就是要传入待调用函数的值。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f.call(o,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p> apply()调用上下文实参之后的所有实参d都放入一个数组中。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f.apply(o,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind()方法<br> ECMAScript 5新增bind()方法，用来将函数绑定至某个对象。</p>\n<p> 在函数f()调用bind方法并传入一个对象o作为参数，将返回一个新的函数。调用这个新的函数，会把原始函数f()当做对象o的方法来调用。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y</span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x+y &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> g = f.bind(o);</div><div class=\"line\">g(<span class=\"number\">2</span>)<span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<p> 除了第一个实参外，传入bind()的参数也会绑定至this。</p>\n<p> bind()方法所返回的函数的length（形参数量）等于原函数的形参数量减去传入bind()方法中的实参数量（第一个参数以后的所有参数），因为传入bind中的实参都会绑定到原函数的形参</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x+y&#125;<span class=\"comment\">//length为2</span></div><div class=\"line\"><span class=\"keyword\">var</span> succ = sum.bind(<span class=\"literal\">null</span>,<span class=\"number\">1</span>)<span class=\"comment\">//length为1</span></div><div class=\"line\">succ(<span class=\"number\">2</span>)<span class=\"comment\">//3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//var sum = function(x,y)&#123;return x+y&#125;//length为2</span></div><div class=\"line\"><span class=\"comment\">//var succ = sum.bind(null,1,2)//length为0</span></div><div class=\"line\"><span class=\"comment\">//succ()//3</span></div></pre></td></tr></table></figure>\n<p> 当bind()所返回的函数用作构造函数的时候， 传入bind()的this将被忽略，实参会全部传入原函数。</p>\n<p> bind()方法返回的构造函数不包含prototype属性，将这些绑定的函数用作构造函数所创建的对象会从原始的未绑定的构造函数中继承prototype。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">original</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + x&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</div><div class=\"line\">    a = <span class=\"number\">10</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> newObj = <span class=\"keyword\">new</span>(original.bind(obj, <span class=\"number\">2</span>)); <span class=\"comment\">//传入了一个实参2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a);  <span class=\"comment\">//输出1, 说明返回的函数用作构造函数时obj(this的值)被忽略了</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b()); <span class=\"comment\">//输出3 ，说明传入的实参2传入了原函数original</span></div></pre></td></tr></table></figure>\n<p> ECMAScript 3版本的bind方法()</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">Function</span>.prototype.bind)&#123;</div><div class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind(o,<span class=\"comment\">/*,arguments*/</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>, boundArgs = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = [], i;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;boundArgs.length;i++)&#123;args.push(bonudArgs[i])&#125;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;args.push(<span class=\"built_in\">arguments</span>[i])&#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> self.apply(o,args)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>toString()方法<br> 大多数函数的toString()方法的实现都返回函数的完整源码。</p>\n<p> 内置函数往往返回一个“[native code]”的字符串作为函数体。</p>\n</li>\n<li><p>Function()构造函数<br> 函数可通过Function()构造函数来定义。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x+y'</span>)</div></pre></td></tr></table></figure>\n<p> Function()构造函数允许javascript运行时动态创建并编译函数。</p>\n<p> 每次调用Function()构造函数都回解析函数体，并创建新的函数对象。在循环中执行，会影响执行效率。</p>\n<p> Function()构造函数创建的函数不使用词法作用域，函数体代码的编译综会在顶层函数执行。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constructFunciton</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'return scope'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">constructFunciton()()<span class=\"comment\">//'global'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>可调用对象<br> 截至目前为止，两个可调用对象在javascript中的实现不能算作函数。</p>\n<p> ie8机之前的版本的客户端方法使用了可调用的宿主对象，而不是内置的函数对象。</p>\n<p> 另一个常见的可调用对象是RegExp对象，非javascript的标准特性。</p>\n<p> 检查对象是否为真正的函数对象。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(x)===<span class=\"string\">'[object Function]'</span></div><div class=\"line\">&#125;</div><div class=\"line\">isFunction(<span class=\"built_in\">window</span>.alert)<span class=\"comment\">//IE8下为false</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"8-8函数式编程\"><a href=\"#8-8函数式编程\" class=\"headerlink\" title=\"8.8函数式编程\"></a>8.8函数式编程</h2><ol>\n<li><p>使用函数处理数组<br> 自定义map()函数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map?<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f</span>)</span>&#123;<span class=\"keyword\">return</span> a.map(f)&#125;:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> results = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = a.length;i&lt;len;i++;)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> a)&#123;</div><div class=\"line\">            results[i] = f.call(<span class=\"literal\">null</span>,a[i],i,a)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> results</div><div class=\"line\">&#125;</div><div class=\"line\">自定义reduce()函数</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">``</span>javascript</div><div class=\"line\"><span class=\"keyword\">var</span> reduce = <span class=\"built_in\">Array</span>.prototype.reduce?<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f,initial</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length&gt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a.reduce(f,initial)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"keyword\">return</span> a.reduce(f)&#125;</div><div class=\"line\">&#125;:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f,initial</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = a.length,accumulator;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length&gt;<span class=\"number\">2</span>)&#123;accumulator=initial&#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>()&#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(i &lt; len)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> a)&#123;</div><div class=\"line\">                accumulator=a[i++];</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                i++</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i == len)&#123;<span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>()&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> a)&#123;</div><div class=\"line\">            accumulator=f.call(<span class=\"literal\">undefined</span>,accumulator,a[i],i,a);</div><div class=\"line\">            i++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> accumulator</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>高阶函数<br> 高阶函数(higher-order function)即操作函数的函数，接收一个或者多个函数作为参数，返回一个新的函数。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">not</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = f.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">even</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x%<span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> odd = not(even);</div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>].every(odd)<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>不完全函数<br> 在JavaScript中，不完全函数是一种函数变换技巧，即把一次完整的函数调用拆成多次函数调用，每次传入的实参都是完整实参的一部分，每个拆分开的函数叫做不完全函数，每次函数调用叫做不完全调用，这种变换的特点是每次调用都返回一个函数，直到得到最终运行结果为止。</p>\n<p> 举一个简单的例子，将对函数f(1,2,3,4,5)的调用修改为等价的f(1,2)(3,4)(5,6)，后者包含三次调用，和每次调用相关的函数就是“不完全函数”。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现一个工具函数，将类数组（或对象）转换为真正的数组</span></div><div class=\"line\"><span class=\"comment\">//在后面的示例代码中用到了这个方法将arguments对象转换为真正的数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array</span>(<span class=\"params\">a,n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(a,n||<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数的实参传递至左侧</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partialLeft</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;   <span class=\"comment\">//保存外部的实参数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      <span class=\"comment\">//并返回这个函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> a = array(args,<span class=\"number\">1</span>);  <span class=\"comment\">//从第一个元素开始处理args</span></div><div class=\"line\">        a = a.concat(array(<span class=\"built_in\">arguments</span>)); <span class=\"comment\">//然后增加所有的内部实参</span></div><div class=\"line\">        <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>,a); <span class=\"comment\">//然后基于这个实参列表调用f()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数的实参传递至右侧</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partialRight</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;   <span class=\"comment\">//保存外部的实参数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      <span class=\"comment\">//并返回这个函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> a = array(<span class=\"built_in\">arguments</span>);   <span class=\"comment\">//从内部参数开始</span></div><div class=\"line\">        a = a.concat(array(args,<span class=\"number\">1</span>));    <span class=\"comment\">//从第一个元素开始处理args</span></div><div class=\"line\">        <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>,a); <span class=\"comment\">//然后基于这个实参列表调用f()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数的实参传递至左侧</span></div><div class=\"line\"><span class=\"comment\">//如果参数为undefined,用后面的实参填充undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partial</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;   <span class=\"comment\">//保存外部实参数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = array(args,<span class=\"number\">1</span>);  <span class=\"comment\">//从外部args开始</span></div><div class=\"line\">        <span class=\"comment\">//遍历args，从内部实参填充undefined值</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i]===<span class=\"literal\">undefined</span>) a[i] = <span class=\"built_in\">arguments</span>[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//现在将剩下的内部实参都追加进去</span></div><div class=\"line\">        a = a.concat(array(<span class=\"built_in\">arguments</span>,j));</div><div class=\"line\">        <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>,a);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数带有三个实参</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y,z</span>)</span>&#123;<span class=\"keyword\">return</span> x*(y-z);&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意这三个不完全调用之间的区别</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partialLeft(f,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>)); <span class=\"comment\">//-2，绑定第一个实参：2*(3-4)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partialRight(f,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>));    <span class=\"comment\">//6，绑定第一个实参：3*(4-2)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partial(f,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>));     <span class=\"comment\">//-2，绑定第一个实参：2*(3-4)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partial(f,<span class=\"literal\">undefined</span>,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>));   <span class=\"comment\">//-6，绑定第一个实参：3*(2-4)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>记忆<br> 在函数式编程中，将上次计算的结果缓存起来，这种缓存技巧叫“记忆”(memorization)。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回f()带有记忆功能的版本</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memorize</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//将实参转换为字符串形式，并将其用作缓存的键。</span></div><div class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"built_in\">arguments</span>.length+<span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"built_in\">arguments</span>,<span class=\"string\">','</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(key <span class=\"keyword\">in</span> cache)&#123;<span class=\"keyword\">return</span> cache[key]&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"keyword\">return</span> cache[key] = f.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"8-1函数定义\"><a href=\"#8-1函数定义\" class=\"headerlink\" title=\"8.1函数定义\"></a>8.1函数定义</h2><p>(1) 函数定义表达式</p>\n<p>声明的变量会提升，赋值操作不会提升。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do somethings</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2) 函数声明语句</p>\n<p>函数声明语句会被提升到作用域顶部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do somethings</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"8-2函数调用\"><a href=\"#8-2函数调用\" class=\"headerlink\" title=\"8.2函数调用\"></a>8.2函数调用</h2><p>4种方式调用函数：</p>\n<ol>\n<li><p>作为函数</p>\n<p> ECMAScript 3和ECMAScript 5的非严格模式下规定，函数调用的调用上下文是全局对象。严格模式下，上下文对象是undefined。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">fn()<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为方法</p>\n<p> 将函数保存在一个对象的属性里，作为该对象的方法进行调用。</p>\n<p> 任何函数作为方法调用都会传入一个隐式的实参，即调用该方法的对象。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o=&#123;</div><div class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">m</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fn1())<span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.m())<span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为构造函数</p>\n<p> 通过new关键字进行构造函数调用。构造函数调用创建一个新的空对象，这个对象继承构造函数的prototype属性，构造函数将这个新对象用作其调用上下文，因此构造函数可以使用this关键字引用这个新对象。</p>\n<p> 不使用return关键字时，返回该新对象。</p>\n</li>\n</ol>\n<ol>\n<li><p>使用它们的call()或apply()方法间接调用</p>\n<p> call()方法使用自有的实参列表作为函数的实参。</p>\n<p> apply()则要求以数组的方式传入参数。</p>\n</li>\n</ol>\n<h2 id=\"8-3函数的实参和形参\"><a href=\"#8-3函数的实参和形参\" class=\"headerlink\" title=\"8.3函数的实参和形参\"></a>8.3函数的实参和形参</h2><p>javascript函数调用不检查传入形参的个数。</p>\n<p>当调用函数时传入的实参个数少于函数声明是指定的形参个数时，剩下的形参将设置为undefined 。</p>\n<p>为了保持函数的适应性，应当给忽略的实参设置默认值。可使用||运算符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    a=a||[]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当传入的实参个数大于指定的形参个数时，没有办法直接获得未命名值的引用。标示符arguments是指向实参对象的引用，可通过数字下标获得传入的实参值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Max</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"built_in\">Number</span>.NEGATIVE_INFINITY;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">        max=<span class=\"built_in\">arguments</span>[i]&gt;max?<span class=\"built_in\">arguments</span>[i]:max;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> max</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>非严格模式下，arguments.callee指代当前正在执行的函数。arguments.caller指代调用当前正在执行的函数的函数。</p>\n<p>匿名函数中可通过arguments.callee调用自身实现递归。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factorial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x*<span class=\"built_in\">arguments</span>.callee(x<span class=\"number\">-1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>javascript方法的形参并未进行类型检查，应当添加实参类型检查逻辑。</p>\n<h2 id=\"8-3作为值的函数\"><a href=\"#8-3作为值的函数\" class=\"headerlink\" title=\"8.3作为值的函数\"></a>8.3作为值的函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> operators = &#123;</div><div class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x+y&#125;,</div><div class=\"line\">    <span class=\"attr\">subtract</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x-y&#125;,</div><div class=\"line\">    <span class=\"attr\">multiply</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x*y&#125;,</div><div class=\"line\">    <span class=\"attr\">divide</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x/y&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operate</span>(<span class=\"params\">operation,operand1,operand2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> operators[operation] === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> operators[operation](operand1,operand2)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">'unkown operator'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> j = operate(<span class=\"string\">'add'</span>, <span class=\"string\">'hello'</span>, operate(<span class=\"string\">'add'</span>,<span class=\"string\">' '</span>,<span class=\"string\">'world'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(j)<span class=\"comment\">//hello world</span></div></pre></td></tr></table></figure>\n<p>自定义函数属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">isFinite</span>(n)&amp;&amp;n&gt;<span class=\"number\">0</span>&amp;&amp;n==<span class=\"built_in\">Math</span>.round(n))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!(n <span class=\"keyword\">in</span> factorial))&#123;</div><div class=\"line\">            factorial[n]=n*factorial(n<span class=\"number\">-1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> factorial[n]</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">factorial[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(factorial(<span class=\"number\">4</span>))<span class=\"comment\">//24</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"8-5作为命名空间的函数\"><a href=\"#8-5作为命名空间的函数\" class=\"headerlink\" title=\"8.5作为命名空间的函数\"></a>8.5作为命名空间的函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> extend = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> &#123;<span class=\"attr\">toString</span>:<span class=\"literal\">null</span>&#125;)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">                    o[prop] = source[prop]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patched_extend</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">                o[prop] = source[prop]</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;protoprops.length;j++)&#123;</div><div class=\"line\">                prop=protoprops[j];</div><div class=\"line\">                <span class=\"keyword\">if</span>(source.hasOwnProperty(prop))&#123;</div><div class=\"line\">                    o[prop] = source[prop]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> proptypes = [<span class=\"string\">'toString'</span>,<span class=\"string\">'valueOf'</span>,<span class=\"string\">'constructor'</span>,<span class=\"string\">'hasOwnProperty'</span>]</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure>\n<h2 id=\"8-6闭包\"><a href=\"#8-6闭包\" class=\"headerlink\" title=\"8.6闭包\"></a>8.6闭包</h2><p>javascript采用词法作用域，函数的执行依赖变量作用域，该作用域是在函数定义时决定的。函数定义时的作用域链，在函数执行时依然有效。</p>\n<p>为实现这种词法作用域，javascript函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。</p>\n<p>函数对象通过作用域链互相关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性称为闭包。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global scope'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkScope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local scope'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> scope&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> f()</div><div class=\"line\">&#125;</div><div class=\"line\">checkScope()<span class=\"comment\">//'local scope'</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global scope'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkScope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local scope'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> scope&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> f</div><div class=\"line\">&#125;</div><div class=\"line\">checkScope()()<span class=\"comment\">//'local scope'</span></div></pre></td></tr></table></figure>\n<p>利用闭包实现私有存取器方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addPrivateProperty</span>(<span class=\"params\">o,name,predicate</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value;</div><div class=\"line\">    o[<span class=\"string\">'get'</span>+name]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> value&#125;;</div><div class=\"line\">    o[<span class=\"string\">'set'</span>+name]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(predicate&amp;&amp;!predicate(v))&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'set'</span>+name+<span class=\"string\">':invalid value'</span>+v)</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            value=v</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">addPrivateProperty(o,<span class=\"string\">'Name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x===<span class=\"string\">'string'</span>&#125;)</div><div class=\"line\">o.setName(<span class=\"string\">'Frank'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.getName());<span class=\"comment\">//'Frank'</span></div><div class=\"line\">o.setName(o) <span class=\"comment\">//Error: setName:invalid value[object Object]</span></div></pre></td></tr></table></figure></p>\n<p>this是javascript关键字，而不是变量，如果闭包在外部函数里无法访问this，除非外部函数将this转存为一个变量。arguments同理。</p>\n<h2 id=\"8-7函数属性、方法和构造函数\"><a href=\"#8-7函数属性、方法和构造函数\" class=\"headerlink\" title=\"8.7函数属性、方法和构造函数\"></a>8.7函数属性、方法和构造函数</h2><ol>\n<li><p>length属性<br> 在函数体里，arguments.length指向传入函数的实参长度，而函数的length属性指函数定义时给出的参数个数，即“形参”。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">args</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> actual = args.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> expected = args.callee.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(actual!==expected)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected'</span>+expected+<span class=\"string\">'args;got'</span>+actual)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y,z</span>)</span>&#123;</div><div class=\"line\">    check(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> x+y+z</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>prototype<br> 当函数用作构造函数的时候，新创建的对象会从原型对象上继承属性。</p>\n</li>\n<li><p>call()和apply()方法<br> call()和apply()的第一个参数是要调用函数的母对象，它是调用的上下文，函数体内通过this获得对它引用。</p>\n<p> ECMAScript 5的严格模式中，第一个实参会变成this的值。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> x=&#123;<span class=\"attr\">a</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(a)&#125;</div><div class=\"line\">f.call(x)<span class=\"comment\">//1</span></div><div class=\"line\">f.aplly(x)<span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n<p> ECMAScript 3和非严格模式中，传入null和undefined会被全局对象所替代。</p>\n<p> call()方法第一个调用上下文实参之后的所有实参就是要传入待调用函数的值。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f.call(o,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p> apply()调用上下文实参之后的所有实参d都放入一个数组中。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f.apply(o,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind()方法<br> ECMAScript 5新增bind()方法，用来将函数绑定至某个对象。</p>\n<p> 在函数f()调用bind方法并传入一个对象o作为参数，将返回一个新的函数。调用这个新的函数，会把原始函数f()当做对象o的方法来调用。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y</span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x+y &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> g = f.bind(o);</div><div class=\"line\">g(<span class=\"number\">2</span>)<span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<p> 除了第一个实参外，传入bind()的参数也会绑定至this。</p>\n<p> bind()方法所返回的函数的length（形参数量）等于原函数的形参数量减去传入bind()方法中的实参数量（第一个参数以后的所有参数），因为传入bind中的实参都会绑定到原函数的形参</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x+y&#125;<span class=\"comment\">//length为2</span></div><div class=\"line\"><span class=\"keyword\">var</span> succ = sum.bind(<span class=\"literal\">null</span>,<span class=\"number\">1</span>)<span class=\"comment\">//length为1</span></div><div class=\"line\">succ(<span class=\"number\">2</span>)<span class=\"comment\">//3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//var sum = function(x,y)&#123;return x+y&#125;//length为2</span></div><div class=\"line\"><span class=\"comment\">//var succ = sum.bind(null,1,2)//length为0</span></div><div class=\"line\"><span class=\"comment\">//succ()//3</span></div></pre></td></tr></table></figure>\n<p> 当bind()所返回的函数用作构造函数的时候， 传入bind()的this将被忽略，实参会全部传入原函数。</p>\n<p> bind()方法返回的构造函数不包含prototype属性，将这些绑定的函数用作构造函数所创建的对象会从原始的未绑定的构造函数中继承prototype。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">original</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + x&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</div><div class=\"line\">    a = <span class=\"number\">10</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> newObj = <span class=\"keyword\">new</span>(original.bind(obj, <span class=\"number\">2</span>)); <span class=\"comment\">//传入了一个实参2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a);  <span class=\"comment\">//输出1, 说明返回的函数用作构造函数时obj(this的值)被忽略了</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b()); <span class=\"comment\">//输出3 ，说明传入的实参2传入了原函数original</span></div></pre></td></tr></table></figure>\n<p> ECMAScript 3版本的bind方法()</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">Function</span>.prototype.bind)&#123;</div><div class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind(o,<span class=\"comment\">/*,arguments*/</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>, boundArgs = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = [], i;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;boundArgs.length;i++)&#123;args.push(bonudArgs[i])&#125;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;args.push(<span class=\"built_in\">arguments</span>[i])&#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> self.apply(o,args)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>toString()方法<br> 大多数函数的toString()方法的实现都返回函数的完整源码。</p>\n<p> 内置函数往往返回一个“[native code]”的字符串作为函数体。</p>\n</li>\n<li><p>Function()构造函数<br> 函数可通过Function()构造函数来定义。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x+y'</span>)</div></pre></td></tr></table></figure>\n<p> Function()构造函数允许javascript运行时动态创建并编译函数。</p>\n<p> 每次调用Function()构造函数都回解析函数体，并创建新的函数对象。在循环中执行，会影响执行效率。</p>\n<p> Function()构造函数创建的函数不使用词法作用域，函数体代码的编译综会在顶层函数执行。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constructFunciton</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'return scope'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">constructFunciton()()<span class=\"comment\">//'global'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>可调用对象<br> 截至目前为止，两个可调用对象在javascript中的实现不能算作函数。</p>\n<p> ie8机之前的版本的客户端方法使用了可调用的宿主对象，而不是内置的函数对象。</p>\n<p> 另一个常见的可调用对象是RegExp对象，非javascript的标准特性。</p>\n<p> 检查对象是否为真正的函数对象。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(x)===<span class=\"string\">'[object Function]'</span></div><div class=\"line\">&#125;</div><div class=\"line\">isFunction(<span class=\"built_in\">window</span>.alert)<span class=\"comment\">//IE8下为false</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"8-8函数式编程\"><a href=\"#8-8函数式编程\" class=\"headerlink\" title=\"8.8函数式编程\"></a>8.8函数式编程</h2><ol>\n<li><p>使用函数处理数组<br> 自定义map()函数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map?<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f</span>)</span>&#123;<span class=\"keyword\">return</span> a.map(f)&#125;:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> results = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = a.length;i&lt;len;i++;)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> a)&#123;</div><div class=\"line\">            results[i] = f.call(<span class=\"literal\">null</span>,a[i],i,a)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> results</div><div class=\"line\">&#125;</div><div class=\"line\">自定义reduce()函数</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">``</span>javascript</div><div class=\"line\"><span class=\"keyword\">var</span> reduce = <span class=\"built_in\">Array</span>.prototype.reduce?<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f,initial</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length&gt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a.reduce(f,initial)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"keyword\">return</span> a.reduce(f)&#125;</div><div class=\"line\">&#125;:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,f,initial</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = a.length,accumulator;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length&gt;<span class=\"number\">2</span>)&#123;accumulator=initial&#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>()&#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(i &lt; len)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> a)&#123;</div><div class=\"line\">                accumulator=a[i++];</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                i++</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i == len)&#123;<span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>()&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> a)&#123;</div><div class=\"line\">            accumulator=f.call(<span class=\"literal\">undefined</span>,accumulator,a[i],i,a);</div><div class=\"line\">            i++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> accumulator</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>高阶函数<br> 高阶函数(higher-order function)即操作函数的函数，接收一个或者多个函数作为参数，返回一个新的函数。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">not</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = f.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">even</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x%<span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> odd = not(even);</div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>].every(odd)<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>不完全函数<br> 在JavaScript中，不完全函数是一种函数变换技巧，即把一次完整的函数调用拆成多次函数调用，每次传入的实参都是完整实参的一部分，每个拆分开的函数叫做不完全函数，每次函数调用叫做不完全调用，这种变换的特点是每次调用都返回一个函数，直到得到最终运行结果为止。</p>\n<p> 举一个简单的例子，将对函数f(1,2,3,4,5)的调用修改为等价的f(1,2)(3,4)(5,6)，后者包含三次调用，和每次调用相关的函数就是“不完全函数”。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现一个工具函数，将类数组（或对象）转换为真正的数组</span></div><div class=\"line\"><span class=\"comment\">//在后面的示例代码中用到了这个方法将arguments对象转换为真正的数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array</span>(<span class=\"params\">a,n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(a,n||<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数的实参传递至左侧</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partialLeft</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;   <span class=\"comment\">//保存外部的实参数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      <span class=\"comment\">//并返回这个函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> a = array(args,<span class=\"number\">1</span>);  <span class=\"comment\">//从第一个元素开始处理args</span></div><div class=\"line\">        a = a.concat(array(<span class=\"built_in\">arguments</span>)); <span class=\"comment\">//然后增加所有的内部实参</span></div><div class=\"line\">        <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>,a); <span class=\"comment\">//然后基于这个实参列表调用f()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数的实参传递至右侧</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partialRight</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;   <span class=\"comment\">//保存外部的实参数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      <span class=\"comment\">//并返回这个函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> a = array(<span class=\"built_in\">arguments</span>);   <span class=\"comment\">//从内部参数开始</span></div><div class=\"line\">        a = a.concat(array(args,<span class=\"number\">1</span>));    <span class=\"comment\">//从第一个元素开始处理args</span></div><div class=\"line\">        <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>,a); <span class=\"comment\">//然后基于这个实参列表调用f()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数的实参传递至左侧</span></div><div class=\"line\"><span class=\"comment\">//如果参数为undefined,用后面的实参填充undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partial</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;   <span class=\"comment\">//保存外部实参数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = array(args,<span class=\"number\">1</span>);  <span class=\"comment\">//从外部args开始</span></div><div class=\"line\">        <span class=\"comment\">//遍历args，从内部实参填充undefined值</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i]===<span class=\"literal\">undefined</span>) a[i] = <span class=\"built_in\">arguments</span>[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//现在将剩下的内部实参都追加进去</span></div><div class=\"line\">        a = a.concat(array(<span class=\"built_in\">arguments</span>,j));</div><div class=\"line\">        <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>,a);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这个函数带有三个实参</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y,z</span>)</span>&#123;<span class=\"keyword\">return</span> x*(y-z);&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意这三个不完全调用之间的区别</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partialLeft(f,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>)); <span class=\"comment\">//-2，绑定第一个实参：2*(3-4)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partialRight(f,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>));    <span class=\"comment\">//6，绑定第一个实参：3*(4-2)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partial(f,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>));     <span class=\"comment\">//-2，绑定第一个实参：2*(3-4)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(partial(f,<span class=\"literal\">undefined</span>,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>));   <span class=\"comment\">//-6，绑定第一个实参：3*(2-4)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>记忆<br> 在函数式编程中，将上次计算的结果缓存起来，这种缓存技巧叫“记忆”(memorization)。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回f()带有记忆功能的版本</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memorize</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//将实参转换为字符串形式，并将其用作缓存的键。</span></div><div class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"built_in\">arguments</span>.length+<span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"built_in\">arguments</span>,<span class=\"string\">','</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(key <span class=\"keyword\">in</span> cache)&#123;<span class=\"keyword\">return</span> cache[key]&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"keyword\">return</span> cache[key] = f.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"ES6 Promise学习笔记","date":"2017-03-03T16:00:00.000Z","_content":"## ES6 Promise\n1. [Promise的由来及含义](#a1)\n2. [Promise基本用法](#a2)\n3. [Promise.prototype.then()](#a3)\n4. [Promise.prototype.catch()](#a4)\n5. [Promise.all()](#a5)\n6. [Promise.race()](#a6)\n7. [Promise.resolve()](#a7)\n8. [Promise.reject()](#a8)\n9. [应用](#a9)\n10. [参考资料](#a10)\n***\n## <a id='a1'>1.Promise的由来及含义</a>\n一直以来，JavaScript处理异步都是以callback的方式，在前端开发领域callback机制几乎深入人心。在设计API的时候，不管是浏览器厂商还是SDK开发商亦或是各种类库的作者，基本上都已经遵循着callback的套路。\n\n在callback的模型里边，我们假设需要执行一个异步队列，代码看起来可能像这样：\n````javascript\nloadImg('a.jpg', function() {\n    loadImg('b.jpg', function() {\n        loadImg('c.jpg', function() {\n            console.log('all done!');\n        });\n    });\n});\n````\n\n近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。\n\nPromise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象有以下两个特点。\n\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。\n## <a id='a2'>2.Promise基本用法</a>\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\n\n下面代码创造了一个Promise实例。\n````javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n````\nresolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected）\n\nPromise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数(可选)。这两个函数都接受Promise对象传出的值作为参数。\n````javascript\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n````\n## <a id='a3'>3.Promise.prototype.then()</a>\nthen方法是定义在原型对象Promise.prototype上的，因此Promise实例具有then方法。它的作用是为Promise实例添加状态改变时的回调函数。then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。\n\nthen方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n````javascript\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"Resolved: \", comments),\n  err => console.log(\"Rejected: \", err)\n);\n````\n## <a id='a4'>4.Promise.prototype.catch()</a>\nPromise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。\n\nPromise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。\n````javascript\ngetJSON('/post/1.json').then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个Promise产生的错误\n});\n````\n跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应。(Chrome浏览器不遵守这条规定)\n## <a id='a5'>5.Promise.all()</a>\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例，类似“与”关系。\n````javascript\nvar p = Promise.all([p1, p2, p3]);\n````\np的状态由p1、p2、p3决定，分成两种情况。\n\n（1）只有p1、p2、p3的状态都变成resolve，p的状态才会变成resolve，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n## <a id='a6'>6.Promise.race()</a>\nPromise.race方法同样是将多个Promise实例，包装成一个新的Promise实例，类似“或”关系。\n````javascript\nvar p = Promise.race([p1, p2, p3]);\n````\n只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n## <a id='a7'>7.Promise.resolve()</a>\nPromise.resolve()可将现有对象转为Promise对象。\n\nPromise.resolve方法的参数分成四种情况。\n\n（1）参数是一个Promise实例\n\n原封不动地返回这个实例。\n\n（2）参数是一个thenable对象\n\nPromise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。\n\n（3）参数不是具有then方法的对象，或根本就不是对象\n\n返回一个新的Promise对象，状态为Resolved。\n\n（4）不带有任何参数\n\n直接返回一个Resolved状态的Promise对象。\n## <a id='a8'>8.Promise.reject()</a>\nPromise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected.\n\nPromise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。\n\n````javascript\nconst thenable = {\n  then(resolve, reject) {\n    reject('出错了');\n  }\n};\n\nPromise.reject(thenable)\n.catch(e => {\n  console.log(e === thenable)\n})\n// true\n````\n## <a id='a9'>9.应用</a>\n### 延时等待\n````javascript\nfunction wait(duration){\n    return new Promise((resolve, reject)=>{\n        setTimeout(resolve,duration);\n    })\n}\nwait(1000).then(()=>{console.log('hello')}).then(()=>{return wait(2000)}).then(()=>{console.log('world')})\n````\n### 加载图片\n````javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n````\n## <a id='a10'>10.参考资料</a>\n* [ECMAScript 6 入门](http://es6.ruanyifeng.com/#docs/promise)\n* [JavaScript Promise启示录](https://segmentfault.com/a/1190000000492290)\n* [一道关于Promise应用的面试题](http://www.cnblogs.com/dojo-lzz/p/5495671.html)\n","source":"_posts/promise.md","raw":"---\ntitle: ES6 Promise学习笔记\ndate: 2017-03-04\ntags: ['promise']\ncategories: ['笔记']\n---\n## ES6 Promise\n1. [Promise的由来及含义](#a1)\n2. [Promise基本用法](#a2)\n3. [Promise.prototype.then()](#a3)\n4. [Promise.prototype.catch()](#a4)\n5. [Promise.all()](#a5)\n6. [Promise.race()](#a6)\n7. [Promise.resolve()](#a7)\n8. [Promise.reject()](#a8)\n9. [应用](#a9)\n10. [参考资料](#a10)\n***\n## <a id='a1'>1.Promise的由来及含义</a>\n一直以来，JavaScript处理异步都是以callback的方式，在前端开发领域callback机制几乎深入人心。在设计API的时候，不管是浏览器厂商还是SDK开发商亦或是各种类库的作者，基本上都已经遵循着callback的套路。\n\n在callback的模型里边，我们假设需要执行一个异步队列，代码看起来可能像这样：\n````javascript\nloadImg('a.jpg', function() {\n    loadImg('b.jpg', function() {\n        loadImg('c.jpg', function() {\n            console.log('all done!');\n        });\n    });\n});\n````\n\n近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。\n\nPromise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象有以下两个特点。\n\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。\n## <a id='a2'>2.Promise基本用法</a>\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\n\n下面代码创造了一个Promise实例。\n````javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n````\nresolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected）\n\nPromise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数(可选)。这两个函数都接受Promise对象传出的值作为参数。\n````javascript\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n````\n## <a id='a3'>3.Promise.prototype.then()</a>\nthen方法是定义在原型对象Promise.prototype上的，因此Promise实例具有then方法。它的作用是为Promise实例添加状态改变时的回调函数。then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。\n\nthen方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n````javascript\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"Resolved: \", comments),\n  err => console.log(\"Rejected: \", err)\n);\n````\n## <a id='a4'>4.Promise.prototype.catch()</a>\nPromise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。\n\nPromise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。\n````javascript\ngetJSON('/post/1.json').then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个Promise产生的错误\n});\n````\n跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应。(Chrome浏览器不遵守这条规定)\n## <a id='a5'>5.Promise.all()</a>\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例，类似“与”关系。\n````javascript\nvar p = Promise.all([p1, p2, p3]);\n````\np的状态由p1、p2、p3决定，分成两种情况。\n\n（1）只有p1、p2、p3的状态都变成resolve，p的状态才会变成resolve，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n## <a id='a6'>6.Promise.race()</a>\nPromise.race方法同样是将多个Promise实例，包装成一个新的Promise实例，类似“或”关系。\n````javascript\nvar p = Promise.race([p1, p2, p3]);\n````\n只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n## <a id='a7'>7.Promise.resolve()</a>\nPromise.resolve()可将现有对象转为Promise对象。\n\nPromise.resolve方法的参数分成四种情况。\n\n（1）参数是一个Promise实例\n\n原封不动地返回这个实例。\n\n（2）参数是一个thenable对象\n\nPromise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。\n\n（3）参数不是具有then方法的对象，或根本就不是对象\n\n返回一个新的Promise对象，状态为Resolved。\n\n（4）不带有任何参数\n\n直接返回一个Resolved状态的Promise对象。\n## <a id='a8'>8.Promise.reject()</a>\nPromise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected.\n\nPromise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。\n\n````javascript\nconst thenable = {\n  then(resolve, reject) {\n    reject('出错了');\n  }\n};\n\nPromise.reject(thenable)\n.catch(e => {\n  console.log(e === thenable)\n})\n// true\n````\n## <a id='a9'>9.应用</a>\n### 延时等待\n````javascript\nfunction wait(duration){\n    return new Promise((resolve, reject)=>{\n        setTimeout(resolve,duration);\n    })\n}\nwait(1000).then(()=>{console.log('hello')}).then(()=>{return wait(2000)}).then(()=>{console.log('world')})\n````\n### 加载图片\n````javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n````\n## <a id='a10'>10.参考资料</a>\n* [ECMAScript 6 入门](http://es6.ruanyifeng.com/#docs/promise)\n* [JavaScript Promise启示录](https://segmentfault.com/a/1190000000492290)\n* [一道关于Promise应用的面试题](http://www.cnblogs.com/dojo-lzz/p/5495671.html)\n","slug":"promise","published":1,"updated":"2019-02-24T12:24:57.394Z","_id":"cjshhi1c4000bf4b4scupyig2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ES6-Promise\"><a href=\"#ES6-Promise\" class=\"headerlink\" title=\"ES6 Promise\"></a>ES6 Promise</h2><ol>\n<li><a href=\"#a1\">Promise的由来及含义</a></li>\n<li><a href=\"#a2\">Promise基本用法</a></li>\n<li><a href=\"#a3\">Promise.prototype.then()</a></li>\n<li><a href=\"#a4\">Promise.prototype.catch()</a></li>\n<li><a href=\"#a5\">Promise.all()</a></li>\n<li><a href=\"#a6\">Promise.race()</a></li>\n<li><a href=\"#a7\">Promise.resolve()</a></li>\n<li><a href=\"#a8\">Promise.reject()</a></li>\n<li><a href=\"#a9\">应用</a></li>\n<li><a href=\"#a10\">参考资料</a></li>\n</ol>\n<hr>\n<h2 id=\"1-Promise的由来及含义\"><a href=\"#1-Promise的由来及含义\" class=\"headerlink\" title=\"1.Promise的由来及含义\"></a><a id=\"a1\">1.Promise的由来及含义</a></h2><p>一直以来，JavaScript处理异步都是以callback的方式，在前端开发领域callback机制几乎深入人心。在设计API的时候，不管是浏览器厂商还是SDK开发商亦或是各种类库的作者，基本上都已经遵循着callback的套路。</p>\n<p>在callback的模型里边，我们假设需要执行一个异步队列，代码看起来可能像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImg(<span class=\"string\">'a.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    loadImg(<span class=\"string\">'b.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        loadImg(<span class=\"string\">'c.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'all done!'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。</p>\n<p>Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。</p>\n<h2 id=\"2-Promise基本用法\"><a href=\"#2-Promise基本用法\" class=\"headerlink\" title=\"2.Promise基本用法\"></a><a id=\"a2\">2.Promise基本用法</a></h2><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。</p>\n<p>下面代码创造了一个Promise实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected）</p>\n<p>Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数(可选)。这两个函数都接受Promise对象传出的值作为参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// failure</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-Promise-prototype-then\"><a href=\"#3-Promise-prototype-then\" class=\"headerlink\" title=\"3.Promise.prototype.then()\"></a><a id=\"a3\">3.Promise.prototype.then()</a></h2><p>then方法是定义在原型对象Promise.prototype上的，因此Promise实例具有then方法。它的作用是为Promise实例添加状态改变时的回调函数。then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。</p>\n<p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</div><div class=\"line\">  <span class=\"function\"><span class=\"params\">post</span> =&gt;</span> getJSON(post.commentURL)</div><div class=\"line\">).then(</div><div class=\"line\">  <span class=\"function\"><span class=\"params\">comments</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Resolved: \"</span>, comments),</div><div class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Rejected: \"</span>, err)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-Promise-prototype-catch\"><a href=\"#4-Promise-prototype-catch\" class=\"headerlink\" title=\"4.Promise.prototype.catch()\"></a><a id=\"a4\">4.Promise.prototype.catch()</a></h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">getJSON(<span class=\"string\">'/post/1.json'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(post.commentURL);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">comments</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// some code</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 处理前面三个Promise产生的错误</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应。(Chrome浏览器不遵守这条规定)</p>\n<h2 id=\"5-Promise-all\"><a href=\"#5-Promise-all\" class=\"headerlink\" title=\"5.Promise.all()\"></a><a id=\"a5\">5.Promise.all()</a></h2><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例，类似“与”关系。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</div></pre></td></tr></table></figure></p>\n<p>p的状态由p1、p2、p3决定，分成两种情况。</p>\n<p>（1）只有p1、p2、p3的状态都变成resolve，p的状态才会变成resolve，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n<h2 id=\"6-Promise-race\"><a href=\"#6-Promise-race\" class=\"headerlink\" title=\"6.Promise.race()\"></a><a id=\"a6\">6.Promise.race()</a></h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例，类似“或”关系。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</div></pre></td></tr></table></figure></p>\n<p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<h2 id=\"7-Promise-resolve\"><a href=\"#7-Promise-resolve\" class=\"headerlink\" title=\"7.Promise.resolve()\"></a><a id=\"a7\">7.Promise.resolve()</a></h2><p>Promise.resolve()可将现有对象转为Promise对象。</p>\n<p>Promise.resolve方法的参数分成四种情况。</p>\n<p>（1）参数是一个Promise实例</p>\n<p>原封不动地返回这个实例。</p>\n<p>（2）参数是一个thenable对象</p>\n<p>Promise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。</p>\n<p>（3）参数不是具有then方法的对象，或根本就不是对象</p>\n<p>返回一个新的Promise对象，状态为Resolved。</p>\n<p>（4）不带有任何参数</p>\n<p>直接返回一个Resolved状态的Promise对象。</p>\n<h2 id=\"8-Promise-reject\"><a href=\"#8-Promise-reject\" class=\"headerlink\" title=\"8.Promise.reject()\"></a><a id=\"a8\">8.Promise.reject()</a></h2><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected.</p>\n<p>Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    reject(<span class=\"string\">'出错了'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e === thenable)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"9-应用\"><a href=\"#9-应用\" class=\"headerlink\" title=\"9.应用\"></a><a id=\"a9\">9.应用</a></h2><h3 id=\"延时等待\"><a href=\"#延时等待\" class=\"headerlink\" title=\"延时等待\"></a>延时等待</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span>(<span class=\"params\">duration</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</div><div class=\"line\">        setTimeout(resolve,duration);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\">wait(<span class=\"number\">1000</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)&#125;).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> wait(<span class=\"number\">2000</span>)&#125;).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>)&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    image.onload  = resolve;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">    image.src = path;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"10-参考资料\"><a href=\"#10-参考资料\" class=\"headerlink\" title=\"10.参考资料\"></a><a id=\"a10\">10.参考资料</a></h2><ul>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000492290\" target=\"_blank\" rel=\"external\">JavaScript Promise启示录</a></li>\n<li><a href=\"http://www.cnblogs.com/dojo-lzz/p/5495671.html\" target=\"_blank\" rel=\"external\">一道关于Promise应用的面试题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES6-Promise\"><a href=\"#ES6-Promise\" class=\"headerlink\" title=\"ES6 Promise\"></a>ES6 Promise</h2><ol>\n<li><a href=\"#a1\">Promise的由来及含义</a></li>\n<li><a href=\"#a2\">Promise基本用法</a></li>\n<li><a href=\"#a3\">Promise.prototype.then()</a></li>\n<li><a href=\"#a4\">Promise.prototype.catch()</a></li>\n<li><a href=\"#a5\">Promise.all()</a></li>\n<li><a href=\"#a6\">Promise.race()</a></li>\n<li><a href=\"#a7\">Promise.resolve()</a></li>\n<li><a href=\"#a8\">Promise.reject()</a></li>\n<li><a href=\"#a9\">应用</a></li>\n<li><a href=\"#a10\">参考资料</a></li>\n</ol>\n<hr>\n<h2 id=\"1-Promise的由来及含义\"><a href=\"#1-Promise的由来及含义\" class=\"headerlink\" title=\"1.Promise的由来及含义\"></a><a id='a1'>1.Promise的由来及含义</a></h2><p>一直以来，JavaScript处理异步都是以callback的方式，在前端开发领域callback机制几乎深入人心。在设计API的时候，不管是浏览器厂商还是SDK开发商亦或是各种类库的作者，基本上都已经遵循着callback的套路。</p>\n<p>在callback的模型里边，我们假设需要执行一个异步队列，代码看起来可能像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImg(<span class=\"string\">'a.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    loadImg(<span class=\"string\">'b.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        loadImg(<span class=\"string\">'c.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'all done!'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。</p>\n<p>Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。</p>\n<h2 id=\"2-Promise基本用法\"><a href=\"#2-Promise基本用法\" class=\"headerlink\" title=\"2.Promise基本用法\"></a><a id='a2'>2.Promise基本用法</a></h2><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。</p>\n<p>下面代码创造了一个Promise实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected）</p>\n<p>Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数(可选)。这两个函数都接受Promise对象传出的值作为参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// failure</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-Promise-prototype-then\"><a href=\"#3-Promise-prototype-then\" class=\"headerlink\" title=\"3.Promise.prototype.then()\"></a><a id='a3'>3.Promise.prototype.then()</a></h2><p>then方法是定义在原型对象Promise.prototype上的，因此Promise实例具有then方法。它的作用是为Promise实例添加状态改变时的回调函数。then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。</p>\n<p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</div><div class=\"line\">  <span class=\"function\"><span class=\"params\">post</span> =&gt;</span> getJSON(post.commentURL)</div><div class=\"line\">).then(</div><div class=\"line\">  <span class=\"function\"><span class=\"params\">comments</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Resolved: \"</span>, comments),</div><div class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Rejected: \"</span>, err)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-Promise-prototype-catch\"><a href=\"#4-Promise-prototype-catch\" class=\"headerlink\" title=\"4.Promise.prototype.catch()\"></a><a id='a4'>4.Promise.prototype.catch()</a></h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">getJSON(<span class=\"string\">'/post/1.json'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(post.commentURL);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">comments</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// some code</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 处理前面三个Promise产生的错误</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应。(Chrome浏览器不遵守这条规定)</p>\n<h2 id=\"5-Promise-all\"><a href=\"#5-Promise-all\" class=\"headerlink\" title=\"5.Promise.all()\"></a><a id='a5'>5.Promise.all()</a></h2><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例，类似“与”关系。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</div></pre></td></tr></table></figure></p>\n<p>p的状态由p1、p2、p3决定，分成两种情况。</p>\n<p>（1）只有p1、p2、p3的状态都变成resolve，p的状态才会变成resolve，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n<h2 id=\"6-Promise-race\"><a href=\"#6-Promise-race\" class=\"headerlink\" title=\"6.Promise.race()\"></a><a id='a6'>6.Promise.race()</a></h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例，类似“或”关系。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</div></pre></td></tr></table></figure></p>\n<p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<h2 id=\"7-Promise-resolve\"><a href=\"#7-Promise-resolve\" class=\"headerlink\" title=\"7.Promise.resolve()\"></a><a id='a7'>7.Promise.resolve()</a></h2><p>Promise.resolve()可将现有对象转为Promise对象。</p>\n<p>Promise.resolve方法的参数分成四种情况。</p>\n<p>（1）参数是一个Promise实例</p>\n<p>原封不动地返回这个实例。</p>\n<p>（2）参数是一个thenable对象</p>\n<p>Promise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。</p>\n<p>（3）参数不是具有then方法的对象，或根本就不是对象</p>\n<p>返回一个新的Promise对象，状态为Resolved。</p>\n<p>（4）不带有任何参数</p>\n<p>直接返回一个Resolved状态的Promise对象。</p>\n<h2 id=\"8-Promise-reject\"><a href=\"#8-Promise-reject\" class=\"headerlink\" title=\"8.Promise.reject()\"></a><a id='a8'>8.Promise.reject()</a></h2><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected.</p>\n<p>Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    reject(<span class=\"string\">'出错了'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e === thenable)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"9-应用\"><a href=\"#9-应用\" class=\"headerlink\" title=\"9.应用\"></a><a id='a9'>9.应用</a></h2><h3 id=\"延时等待\"><a href=\"#延时等待\" class=\"headerlink\" title=\"延时等待\"></a>延时等待</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span>(<span class=\"params\">duration</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</div><div class=\"line\">        setTimeout(resolve,duration);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\">wait(<span class=\"number\">1000</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)&#125;).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> wait(<span class=\"number\">2000</span>)&#125;).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>)&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    image.onload  = resolve;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">    image.src = path;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"10-参考资料\"><a href=\"#10-参考资料\" class=\"headerlink\" title=\"10.参考资料\"></a><a id='a10'>10.参考资料</a></h2><ul>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/promise\">ECMAScript 6 入门</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000492290\">JavaScript Promise启示录</a></li>\n<li><a href=\"http://www.cnblogs.com/dojo-lzz/p/5495671.html\">一道关于Promise应用的面试题</a></li>\n</ul>\n"},{"title":"vue的Runtime Compiler vs Runtime-only","date":"2017-10-11T16:00:00.000Z","_content":"在vue的官方文档中可以得知，vue有两种不同的构建方式，运行时+编译器（Runtime+Compiler）和只包含运行时（Runtime-only）。\n\n两者的区别是：\n\n运行时+编译器是完整版的构建，即vue.common.js,支持创建vue实例时，传入template选项。编译器会将模板编译成渲染函数。\n\n运行时构建的vue版本删除了模板编译的功能，因此无法支持带template属性的Vue实例选项。使用该构建方式的vue需要借助vue-loader或者vueify事先将.vue文件内部的模板会在构建时预编译成渲染函数，供vue实例使用。\n\n> 因为运行时构建相比完整版缩减了30%的体积，你应该尽可能使用这个版本。\n\nVue的npm包也将package.json中的main指向了运行时构建dist/vue.runtime.common.js。\n\n当你使用了运行时构建的版本，而由没有将模板预先编译成渲染函数，vue就会报如下的警告：\n> [Vue warn]: Failed to mount component: template or render function not defined. (found in root instance).\n## 参考资料\n* [https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时](https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时)\n* [https://zhuanlan.zhihu.com/p/25486761](https://zhuanlan.zhihu.com/p/25486761)\n","source":"_posts/vue的Runtime   Compiler vs. Runtime-only.md","raw":"---\ntitle: vue的Runtime Compiler vs Runtime-only\ndate: 2017-10-12\ntags: ['vue']\ncategories: ['笔记']\n---\n在vue的官方文档中可以得知，vue有两种不同的构建方式，运行时+编译器（Runtime+Compiler）和只包含运行时（Runtime-only）。\n\n两者的区别是：\n\n运行时+编译器是完整版的构建，即vue.common.js,支持创建vue实例时，传入template选项。编译器会将模板编译成渲染函数。\n\n运行时构建的vue版本删除了模板编译的功能，因此无法支持带template属性的Vue实例选项。使用该构建方式的vue需要借助vue-loader或者vueify事先将.vue文件内部的模板会在构建时预编译成渲染函数，供vue实例使用。\n\n> 因为运行时构建相比完整版缩减了30%的体积，你应该尽可能使用这个版本。\n\nVue的npm包也将package.json中的main指向了运行时构建dist/vue.runtime.common.js。\n\n当你使用了运行时构建的版本，而由没有将模板预先编译成渲染函数，vue就会报如下的警告：\n> [Vue warn]: Failed to mount component: template or render function not defined. (found in root instance).\n## 参考资料\n* [https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时](https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时)\n* [https://zhuanlan.zhihu.com/p/25486761](https://zhuanlan.zhihu.com/p/25486761)\n","slug":"vue的Runtime   Compiler vs. Runtime-only","published":1,"updated":"2017-10-12T14:16:21.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1c6000df4b4ysiuwfck","content":"<p>在vue的官方文档中可以得知，vue有两种不同的构建方式，运行时+编译器（Runtime+Compiler）和只包含运行时（Runtime-only）。</p>\n<p>两者的区别是：</p>\n<p>运行时+编译器是完整版的构建，即vue.common.js,支持创建vue实例时，传入template选项。编译器会将模板编译成渲染函数。</p>\n<p>运行时构建的vue版本删除了模板编译的功能，因此无法支持带template属性的Vue实例选项。使用该构建方式的vue需要借助vue-loader或者vueify事先将.vue文件内部的模板会在构建时预编译成渲染函数，供vue实例使用。</p>\n<blockquote>\n<p>因为运行时构建相比完整版缩减了30%的体积，你应该尽可能使用这个版本。</p>\n</blockquote>\n<p>Vue的npm包也将package.json中的main指向了运行时构建dist/vue.runtime.common.js。</p>\n<p>当你使用了运行时构建的版本，而由没有将模板预先编译成渲染函数，vue就会报如下的警告：</p>\n<blockquote>\n<p>[Vue warn]: Failed to mount component: template or render function not defined. (found in root instance).</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25486761\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/25486761</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在vue的官方文档中可以得知，vue有两种不同的构建方式，运行时+编译器（Runtime+Compiler）和只包含运行时（Runtime-only）。</p>\n<p>两者的区别是：</p>\n<p>运行时+编译器是完整版的构建，即vue.common.js,支持创建vue实例时，传入template选项。编译器会将模板编译成渲染函数。</p>\n<p>运行时构建的vue版本删除了模板编译的功能，因此无法支持带template属性的Vue实例选项。使用该构建方式的vue需要借助vue-loader或者vueify事先将.vue文件内部的模板会在构建时预编译成渲染函数，供vue实例使用。</p>\n<blockquote>\n<p>因为运行时构建相比完整版缩减了30%的体积，你应该尽可能使用这个版本。</p>\n</blockquote>\n<p>Vue的npm包也将package.json中的main指向了运行时构建dist/vue.runtime.common.js。</p>\n<p>当你使用了运行时构建的版本，而由没有将模板预先编译成渲染函数，vue就会报如下的警告：</p>\n<blockquote>\n<p>[Vue warn]: Failed to mount component: template or render function not defined. (found in root instance).</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时\">https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25486761\">https://zhuanlan.zhihu.com/p/25486761</a></li>\n</ul>\n</blockquote>\n"},{"title":"vue项目总结","date":"2017-06-09T16:00:00.000Z","_content":"1. 项目结构: 使用vue官方手脚架生成初始结构，src目录结构修改为\n````javascript\n│  App.vue\n│  main.js\n│\n├─assets\n│  ├─css\n│  │      style.css \n│  │\n│  └─images\n│          product.jpg\n│\n├─components\n│      Head.vue\n│      Loading.vue\n│\n├─lib\n│      api.js\n│      mobileUtil.js\n│\n├─router\n│      router.js\n│\n├─views\n│  ├─pageA\n│  │      childA.vue\n│  │      childB.vue\n│  │      Main.vue\n│  │\n│  ├─pageB\n│  │      childA.vue\n│  │      childB.vue\n│  │      Main.vue\n│  │\n│  └─pageC\n│         childA.vue\n│         childB.vue\n│         Main.vue\n│  \n│\n└─vuex\n    │  store.js\n    │\n    └─modules\n        ├─pageA\n        │      actions.js\n        │      getters.js\n        │      index.js\n        │      mutation-type.js\n        │      mutations.js\n        │\n        ├─pageB\n        │      actions.js\n        │      getters.js\n        │      index.js\n        │      mutation-type.js\n        │      mutations.js\n        │\n        └─pageC\n               actions.js\n               getters.js\n               index.js\n               mutation-type.js\n               mutations.js\n````\nassets文件夹存放img，css等静态资源。\n\ncomponents文件夹存放公共组件。\n\nlib文件夹存放工具类，api配置等。\n\nrouter文件夹存放路由配置。\n\nviews文件夹存放页面级的组件，统一Main.vue为每个页面主入口，同一页面的其他组件为子路由组件。\n\nvuex文件夹存放vuex全局数据，store.js为主入口，里面的子文件夹按页面划分模块。\n\n2. vuex的action间需要进行异步回调时，使用Promise。\n3. <img>标签里可以通过require引入静态资源。\n4. <keep-alive>配合activated钩子。\n5. [动态路由](http://60kmlh.github.io/2017/07/08/基于vue-router的管理系统权限控制的实现/)\n6. 利用process.env.NODE_ENV管理生产环境的api和开发环境的api前缀。\n7. 利用v-if强制更新一个组件，$forceUpdate不生效。\n8. 表单校验使用v-validate插件。\n","source":"_posts/vue项目总结.md","raw":"---\ntitle: vue项目总结\ndate: 2017-06-10\ntags: ['vue']\ncategories: ['工作总结']\n---\n1. 项目结构: 使用vue官方手脚架生成初始结构，src目录结构修改为\n````javascript\n│  App.vue\n│  main.js\n│\n├─assets\n│  ├─css\n│  │      style.css \n│  │\n│  └─images\n│          product.jpg\n│\n├─components\n│      Head.vue\n│      Loading.vue\n│\n├─lib\n│      api.js\n│      mobileUtil.js\n│\n├─router\n│      router.js\n│\n├─views\n│  ├─pageA\n│  │      childA.vue\n│  │      childB.vue\n│  │      Main.vue\n│  │\n│  ├─pageB\n│  │      childA.vue\n│  │      childB.vue\n│  │      Main.vue\n│  │\n│  └─pageC\n│         childA.vue\n│         childB.vue\n│         Main.vue\n│  \n│\n└─vuex\n    │  store.js\n    │\n    └─modules\n        ├─pageA\n        │      actions.js\n        │      getters.js\n        │      index.js\n        │      mutation-type.js\n        │      mutations.js\n        │\n        ├─pageB\n        │      actions.js\n        │      getters.js\n        │      index.js\n        │      mutation-type.js\n        │      mutations.js\n        │\n        └─pageC\n               actions.js\n               getters.js\n               index.js\n               mutation-type.js\n               mutations.js\n````\nassets文件夹存放img，css等静态资源。\n\ncomponents文件夹存放公共组件。\n\nlib文件夹存放工具类，api配置等。\n\nrouter文件夹存放路由配置。\n\nviews文件夹存放页面级的组件，统一Main.vue为每个页面主入口，同一页面的其他组件为子路由组件。\n\nvuex文件夹存放vuex全局数据，store.js为主入口，里面的子文件夹按页面划分模块。\n\n2. vuex的action间需要进行异步回调时，使用Promise。\n3. <img>标签里可以通过require引入静态资源。\n4. <keep-alive>配合activated钩子。\n5. [动态路由](http://60kmlh.github.io/2017/07/08/基于vue-router的管理系统权限控制的实现/)\n6. 利用process.env.NODE_ENV管理生产环境的api和开发环境的api前缀。\n7. 利用v-if强制更新一个组件，$forceUpdate不生效。\n8. 表单校验使用v-validate插件。\n","slug":"vue项目总结","published":1,"updated":"2017-07-09T08:41:20.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1c9000hf4b4jy93z7dm","content":"<ol>\n<li>项目结构: 使用vue官方手脚架生成初始结构，src目录结构修改为<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  App.vue</div><div class=\"line\">│  main.js</div><div class=\"line\">│</div><div class=\"line\">├─assets</div><div class=\"line\">│  ├─css</div><div class=\"line\">│  │      style.css </div><div class=\"line\">│  │</div><div class=\"line\">│  └─images</div><div class=\"line\">│          product.jpg</div><div class=\"line\">│</div><div class=\"line\">├─components</div><div class=\"line\">│      Head.vue</div><div class=\"line\">│      Loading.vue</div><div class=\"line\">│</div><div class=\"line\">├─lib</div><div class=\"line\">│      api.js</div><div class=\"line\">│      mobileUtil.js</div><div class=\"line\">│</div><div class=\"line\">├─router</div><div class=\"line\">│      router.js</div><div class=\"line\">│</div><div class=\"line\">├─views</div><div class=\"line\">│  ├─pageA</div><div class=\"line\">│  │      childA.vue</div><div class=\"line\">│  │      childB.vue</div><div class=\"line\">│  │      Main.vue</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─pageB</div><div class=\"line\">│  │      childA.vue</div><div class=\"line\">│  │      childB.vue</div><div class=\"line\">│  │      Main.vue</div><div class=\"line\">│  │</div><div class=\"line\">│  └─pageC</div><div class=\"line\">│         childA.vue</div><div class=\"line\">│         childB.vue</div><div class=\"line\">│         Main.vue</div><div class=\"line\">│  </div><div class=\"line\">│</div><div class=\"line\">└─vuex</div><div class=\"line\">    │  store.js</div><div class=\"line\">    │</div><div class=\"line\">    └─modules</div><div class=\"line\">        ├─pageA</div><div class=\"line\">        │      actions.js</div><div class=\"line\">        │      getters.js</div><div class=\"line\">        │      index.js</div><div class=\"line\">        │      mutation-type.js</div><div class=\"line\">        │      mutations.js</div><div class=\"line\">        │</div><div class=\"line\">        ├─pageB</div><div class=\"line\">        │      actions.js</div><div class=\"line\">        │      getters.js</div><div class=\"line\">        │      index.js</div><div class=\"line\">        │      mutation-type.js</div><div class=\"line\">        │      mutations.js</div><div class=\"line\">        │</div><div class=\"line\">        └─pageC</div><div class=\"line\">               actions.js</div><div class=\"line\">               getters.js</div><div class=\"line\">               index.js</div><div class=\"line\">               mutation-type.js</div><div class=\"line\">               mutations.js</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>assets文件夹存放img，css等静态资源。</p>\n<p>components文件夹存放公共组件。</p>\n<p>lib文件夹存放工具类，api配置等。</p>\n<p>router文件夹存放路由配置。</p>\n<p>views文件夹存放页面级的组件，统一Main.vue为每个页面主入口，同一页面的其他组件为子路由组件。</p>\n<p>vuex文件夹存放vuex全局数据，store.js为主入口，里面的子文件夹按页面划分模块。</p>\n<ol>\n<li>vuex的action间需要进行异步回调时，使用Promise。</li>\n<li><img>标签里可以通过require引入静态资源。</li>\n<li><keep-alive>配合activated钩子。</keep-alive></li>\n<li><a href=\"http://60kmlh.github.io/2017/07/08/基于vue-router的管理系统权限控制的实现/\">动态路由</a></li>\n<li>利用process.env.NODE_ENV管理生产环境的api和开发环境的api前缀。</li>\n<li>利用v-if强制更新一个组件，$forceUpdate不生效。</li>\n<li>表单校验使用v-validate插件。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>项目结构: 使用vue官方手脚架生成初始结构，src目录结构修改为<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  App.vue</div><div class=\"line\">│  main.js</div><div class=\"line\">│</div><div class=\"line\">├─assets</div><div class=\"line\">│  ├─css</div><div class=\"line\">│  │      style.css </div><div class=\"line\">│  │</div><div class=\"line\">│  └─images</div><div class=\"line\">│          product.jpg</div><div class=\"line\">│</div><div class=\"line\">├─components</div><div class=\"line\">│      Head.vue</div><div class=\"line\">│      Loading.vue</div><div class=\"line\">│</div><div class=\"line\">├─lib</div><div class=\"line\">│      api.js</div><div class=\"line\">│      mobileUtil.js</div><div class=\"line\">│</div><div class=\"line\">├─router</div><div class=\"line\">│      router.js</div><div class=\"line\">│</div><div class=\"line\">├─views</div><div class=\"line\">│  ├─pageA</div><div class=\"line\">│  │      childA.vue</div><div class=\"line\">│  │      childB.vue</div><div class=\"line\">│  │      Main.vue</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─pageB</div><div class=\"line\">│  │      childA.vue</div><div class=\"line\">│  │      childB.vue</div><div class=\"line\">│  │      Main.vue</div><div class=\"line\">│  │</div><div class=\"line\">│  └─pageC</div><div class=\"line\">│         childA.vue</div><div class=\"line\">│         childB.vue</div><div class=\"line\">│         Main.vue</div><div class=\"line\">│  </div><div class=\"line\">│</div><div class=\"line\">└─vuex</div><div class=\"line\">    │  store.js</div><div class=\"line\">    │</div><div class=\"line\">    └─modules</div><div class=\"line\">        ├─pageA</div><div class=\"line\">        │      actions.js</div><div class=\"line\">        │      getters.js</div><div class=\"line\">        │      index.js</div><div class=\"line\">        │      mutation-type.js</div><div class=\"line\">        │      mutations.js</div><div class=\"line\">        │</div><div class=\"line\">        ├─pageB</div><div class=\"line\">        │      actions.js</div><div class=\"line\">        │      getters.js</div><div class=\"line\">        │      index.js</div><div class=\"line\">        │      mutation-type.js</div><div class=\"line\">        │      mutations.js</div><div class=\"line\">        │</div><div class=\"line\">        └─pageC</div><div class=\"line\">               actions.js</div><div class=\"line\">               getters.js</div><div class=\"line\">               index.js</div><div class=\"line\">               mutation-type.js</div><div class=\"line\">               mutations.js</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>assets文件夹存放img，css等静态资源。</p>\n<p>components文件夹存放公共组件。</p>\n<p>lib文件夹存放工具类，api配置等。</p>\n<p>router文件夹存放路由配置。</p>\n<p>views文件夹存放页面级的组件，统一Main.vue为每个页面主入口，同一页面的其他组件为子路由组件。</p>\n<p>vuex文件夹存放vuex全局数据，store.js为主入口，里面的子文件夹按页面划分模块。</p>\n<ol>\n<li>vuex的action间需要进行异步回调时，使用Promise。</li>\n<li><img>标签里可以通过require引入静态资源。</li>\n<li><keep-alive>配合activated钩子。</li>\n<li><a href=\"http://60kmlh.github.io/2017/07/08/基于vue-router的管理系统权限控制的实现/\">动态路由</a></li>\n<li>利用process.env.NODE_ENV管理生产环境的api和开发环境的api前缀。</li>\n<li>利用v-if强制更新一个组件，$forceUpdate不生效。</li>\n<li>表单校验使用v-validate插件。</li>\n</ol>\n"},{"title":"《图解http》第一章笔记","date":"2017-09-14T16:00:00.000Z","_content":"## TCP/IP协议族\n### 简介\n计算机与网络设备要相互通信，双方必须基于相同的方法。如，如何探测到目标，使用哪种语言进行通信等，所有的这一切都需要一种规则，这种规则称为协议。\n\n协议中存在各式各样的内容，如从电缆规格到IP地址的选取方法寻找异地用户的方法等。与互联网相关联的协议集合，称为TCP/IP。\n### TCP/IP的分层管理\n为了方便管理和改动，TCP/IP协议族按层次分为以下四层：\n* 应用层\n\n  决定了向用户提供应用服务时的通信活动。\n  \n  FTP(File Transfer Protocol,文件传输协议)，DNS(Domain Name System,域名系统)，HTTP(Hyper Transfer Potocol, 超文本传输协议)均处于改层。\n* 传输层\n\n  提供处于网络连接中两台计算机之间的数据传输。\n\n  TCP(Transmission Control Protocol,传输控制协议)，UDP(User Data Protocol,用户数据报协议)处于该层。\n* 网络层\n\n  应用层用来处理网络上流动的数据包。数据包是网络传输的最小单位。\n\n  该层规定了提供怎样的路径到达对方计算机，并把数据包传给对方。\n  IP(Internal Protocol,网际协议)位于该层。\n* 数据链路层\n\n  用来处理连接网络的硬件部分。包括控制操作系统，硬件的设备驱动，网卡，光纤的可见部分。\n### TCP/IP通信传输流\n利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则从链路层往上走。\n\n用 HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。\n\n\n接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。\n\n在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。\n\n接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。\n\n当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。\n\n发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息，反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。这种做法称为封装（encapsulate）。\n### IP协议\nIP协议的作用是把各种数据包传送给对方，其中重要的条件是IP地址和MAC地址。\n\nIP地址指明节点被分配到的地址，MAC地址指网卡所属的固定地址。IP地址和MAC地址可以进行配对。\n\nIP间的通信依赖MAC地址，通信双经常是经过多台计算机和网络设备中转才能连接到对方。而中转采用ARP协议。\n\nARP协议是一种用来解析地址的协议，根据通信方的IP地址反查出MAC地址。\n### TCP协议\nTCP协议提供可靠的字节流服务。TCP协议为了容易传输大数据将数据分割，而且能够准确的确认数据最终是否送达到对方。\n\nTCP采用三次握手（three-way-handshaking）策略。握手过程使用TCP的标志（flag）———SYN（synchronize）和ACK（acknowledgement）。\n\n发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表握手结束。\n### DNS协议\nDNS服务提供域名到IP地址之间的解析服务。DNS协议提供通过域名查找IP地址，或逆向从IP地址查找域名的服务。\n### URI和URL\nURI统一资源标示符，表示由某个协议方案表示的资源的定位标示符。而URL表示资源的地址。\n\nURL格式：\n  ![URL格式](http://oq8q06ybp.bkt.clouddn.com/image/URL.PNG)\n### 各种协议和HTTP协议的关系\n当客户端向某一个网址发起请求时，会向DNS查询这个域名的IP地址。\n\n接着HTTP协议生成针对WEB目标服务器的HTTP请求报文。\n\n为了方便通讯，TCP协议按序号将HTTP请求报文分割成报文段，采用三次握手把每个报文段可靠地传给对方。\n\n路由器根据IP协议，搜索对方的地址，一遍中转一遍传送。\n\n当对方接受到数据包时，根据TCP协议，将从对方那里接受到的报文段，按序号以原来的顺序重组报文。\n\n接着HTTP协议再对WEB服务器请求的内容进行处理，在发送给服务器，服务器处理完的结果也同样利用TCP/IP通讯协议向客户端回传。\n","source":"_posts/《图解http》第一章笔记.md","raw":"---\ntitle: 《图解http》第一章笔记\ndate: 2017-09-15\ntags: ['http']\ncategories: ['笔记']\n---\n## TCP/IP协议族\n### 简介\n计算机与网络设备要相互通信，双方必须基于相同的方法。如，如何探测到目标，使用哪种语言进行通信等，所有的这一切都需要一种规则，这种规则称为协议。\n\n协议中存在各式各样的内容，如从电缆规格到IP地址的选取方法寻找异地用户的方法等。与互联网相关联的协议集合，称为TCP/IP。\n### TCP/IP的分层管理\n为了方便管理和改动，TCP/IP协议族按层次分为以下四层：\n* 应用层\n\n  决定了向用户提供应用服务时的通信活动。\n  \n  FTP(File Transfer Protocol,文件传输协议)，DNS(Domain Name System,域名系统)，HTTP(Hyper Transfer Potocol, 超文本传输协议)均处于改层。\n* 传输层\n\n  提供处于网络连接中两台计算机之间的数据传输。\n\n  TCP(Transmission Control Protocol,传输控制协议)，UDP(User Data Protocol,用户数据报协议)处于该层。\n* 网络层\n\n  应用层用来处理网络上流动的数据包。数据包是网络传输的最小单位。\n\n  该层规定了提供怎样的路径到达对方计算机，并把数据包传给对方。\n  IP(Internal Protocol,网际协议)位于该层。\n* 数据链路层\n\n  用来处理连接网络的硬件部分。包括控制操作系统，硬件的设备驱动，网卡，光纤的可见部分。\n### TCP/IP通信传输流\n利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则从链路层往上走。\n\n用 HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。\n\n\n接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。\n\n在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。\n\n接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。\n\n当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。\n\n发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息，反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。这种做法称为封装（encapsulate）。\n### IP协议\nIP协议的作用是把各种数据包传送给对方，其中重要的条件是IP地址和MAC地址。\n\nIP地址指明节点被分配到的地址，MAC地址指网卡所属的固定地址。IP地址和MAC地址可以进行配对。\n\nIP间的通信依赖MAC地址，通信双经常是经过多台计算机和网络设备中转才能连接到对方。而中转采用ARP协议。\n\nARP协议是一种用来解析地址的协议，根据通信方的IP地址反查出MAC地址。\n### TCP协议\nTCP协议提供可靠的字节流服务。TCP协议为了容易传输大数据将数据分割，而且能够准确的确认数据最终是否送达到对方。\n\nTCP采用三次握手（three-way-handshaking）策略。握手过程使用TCP的标志（flag）———SYN（synchronize）和ACK（acknowledgement）。\n\n发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表握手结束。\n### DNS协议\nDNS服务提供域名到IP地址之间的解析服务。DNS协议提供通过域名查找IP地址，或逆向从IP地址查找域名的服务。\n### URI和URL\nURI统一资源标示符，表示由某个协议方案表示的资源的定位标示符。而URL表示资源的地址。\n\nURL格式：\n  ![URL格式](http://oq8q06ybp.bkt.clouddn.com/image/URL.PNG)\n### 各种协议和HTTP协议的关系\n当客户端向某一个网址发起请求时，会向DNS查询这个域名的IP地址。\n\n接着HTTP协议生成针对WEB目标服务器的HTTP请求报文。\n\n为了方便通讯，TCP协议按序号将HTTP请求报文分割成报文段，采用三次握手把每个报文段可靠地传给对方。\n\n路由器根据IP协议，搜索对方的地址，一遍中转一遍传送。\n\n当对方接受到数据包时，根据TCP协议，将从对方那里接受到的报文段，按序号以原来的顺序重组报文。\n\n接着HTTP协议再对WEB服务器请求的内容进行处理，在发送给服务器，服务器处理完的结果也同样利用TCP/IP通讯协议向客户端回传。\n","slug":"《图解http》第一章笔记","published":1,"updated":"2017-09-28T14:34:50.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cb000jf4b4fbd0z4cu","content":"<h2 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP/IP协议族\"></a>TCP/IP协议族</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>计算机与网络设备要相互通信，双方必须基于相同的方法。如，如何探测到目标，使用哪种语言进行通信等，所有的这一切都需要一种规则，这种规则称为协议。</p>\n<p>协议中存在各式各样的内容，如从电缆规格到IP地址的选取方法寻找异地用户的方法等。与互联网相关联的协议集合，称为TCP/IP。</p>\n<h3 id=\"TCP-IP的分层管理\"><a href=\"#TCP-IP的分层管理\" class=\"headerlink\" title=\"TCP/IP的分层管理\"></a>TCP/IP的分层管理</h3><p>为了方便管理和改动，TCP/IP协议族按层次分为以下四层：</p>\n<ul>\n<li><p>应用层</p>\n<p>决定了向用户提供应用服务时的通信活动。</p>\n<p>FTP(File Transfer Protocol,文件传输协议)，DNS(Domain Name System,域名系统)，HTTP(Hyper Transfer Potocol, 超文本传输协议)均处于改层。</p>\n</li>\n<li><p>传输层</p>\n<p>提供处于网络连接中两台计算机之间的数据传输。</p>\n<p>TCP(Transmission Control Protocol,传输控制协议)，UDP(User Data Protocol,用户数据报协议)处于该层。</p>\n</li>\n<li><p>网络层</p>\n<p>应用层用来处理网络上流动的数据包。数据包是网络传输的最小单位。</p>\n<p>该层规定了提供怎样的路径到达对方计算机，并把数据包传给对方。<br>IP(Internal Protocol,网际协议)位于该层。</p>\n</li>\n<li><p>数据链路层</p>\n<p>用来处理连接网络的硬件部分。包括控制操作系统，硬件的设备驱动，网卡，光纤的可见部分。</p>\n<h3 id=\"TCP-IP通信传输流\"><a href=\"#TCP-IP通信传输流\" class=\"headerlink\" title=\"TCP/IP通信传输流\"></a>TCP/IP通信传输流</h3><p>利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则从链路层往上走。</p>\n</li>\n</ul>\n<p>用 HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。</p>\n<p>接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p>\n<p>在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</p>\n<p>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。</p>\n<p>当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。</p>\n<p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息，反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。这种做法称为封装（encapsulate）。</p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>IP协议的作用是把各种数据包传送给对方，其中重要的条件是IP地址和MAC地址。</p>\n<p>IP地址指明节点被分配到的地址，MAC地址指网卡所属的固定地址。IP地址和MAC地址可以进行配对。</p>\n<p>IP间的通信依赖MAC地址，通信双经常是经过多台计算机和网络设备中转才能连接到对方。而中转采用ARP协议。</p>\n<p>ARP协议是一种用来解析地址的协议，根据通信方的IP地址反查出MAC地址。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>TCP协议提供可靠的字节流服务。TCP协议为了容易传输大数据将数据分割，而且能够准确的确认数据最终是否送达到对方。</p>\n<p>TCP采用三次握手（three-way-handshaking）策略。握手过程使用TCP的标志（flag）———SYN（synchronize）和ACK（acknowledgement）。</p>\n<p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表握手结束。</p>\n<h3 id=\"DNS协议\"><a href=\"#DNS协议\" class=\"headerlink\" title=\"DNS协议\"></a>DNS协议</h3><p>DNS服务提供域名到IP地址之间的解析服务。DNS协议提供通过域名查找IP地址，或逆向从IP地址查找域名的服务。</p>\n<h3 id=\"URI和URL\"><a href=\"#URI和URL\" class=\"headerlink\" title=\"URI和URL\"></a>URI和URL</h3><p>URI统一资源标示符，表示由某个协议方案表示的资源的定位标示符。而URL表示资源的地址。</p>\n<p>URL格式：<br>  <img src=\"http://oq8q06ybp.bkt.clouddn.com/image/URL.PNG\" alt=\"URL格式\"></p>\n<h3 id=\"各种协议和HTTP协议的关系\"><a href=\"#各种协议和HTTP协议的关系\" class=\"headerlink\" title=\"各种协议和HTTP协议的关系\"></a>各种协议和HTTP协议的关系</h3><p>当客户端向某一个网址发起请求时，会向DNS查询这个域名的IP地址。</p>\n<p>接着HTTP协议生成针对WEB目标服务器的HTTP请求报文。</p>\n<p>为了方便通讯，TCP协议按序号将HTTP请求报文分割成报文段，采用三次握手把每个报文段可靠地传给对方。</p>\n<p>路由器根据IP协议，搜索对方的地址，一遍中转一遍传送。</p>\n<p>当对方接受到数据包时，根据TCP协议，将从对方那里接受到的报文段，按序号以原来的顺序重组报文。</p>\n<p>接着HTTP协议再对WEB服务器请求的内容进行处理，在发送给服务器，服务器处理完的结果也同样利用TCP/IP通讯协议向客户端回传。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP/IP协议族\"></a>TCP/IP协议族</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>计算机与网络设备要相互通信，双方必须基于相同的方法。如，如何探测到目标，使用哪种语言进行通信等，所有的这一切都需要一种规则，这种规则称为协议。</p>\n<p>协议中存在各式各样的内容，如从电缆规格到IP地址的选取方法寻找异地用户的方法等。与互联网相关联的协议集合，称为TCP/IP。</p>\n<h3 id=\"TCP-IP的分层管理\"><a href=\"#TCP-IP的分层管理\" class=\"headerlink\" title=\"TCP/IP的分层管理\"></a>TCP/IP的分层管理</h3><p>为了方便管理和改动，TCP/IP协议族按层次分为以下四层：</p>\n<ul>\n<li><p>应用层</p>\n<p>决定了向用户提供应用服务时的通信活动。</p>\n<p>FTP(File Transfer Protocol,文件传输协议)，DNS(Domain Name System,域名系统)，HTTP(Hyper Transfer Potocol, 超文本传输协议)均处于改层。</p>\n</li>\n<li><p>传输层</p>\n<p>提供处于网络连接中两台计算机之间的数据传输。</p>\n<p>TCP(Transmission Control Protocol,传输控制协议)，UDP(User Data Protocol,用户数据报协议)处于该层。</p>\n</li>\n<li><p>网络层</p>\n<p>应用层用来处理网络上流动的数据包。数据包是网络传输的最小单位。</p>\n<p>该层规定了提供怎样的路径到达对方计算机，并把数据包传给对方。<br>IP(Internal Protocol,网际协议)位于该层。</p>\n</li>\n<li><p>数据链路层</p>\n<p>用来处理连接网络的硬件部分。包括控制操作系统，硬件的设备驱动，网卡，光纤的可见部分。</p>\n<h3 id=\"TCP-IP通信传输流\"><a href=\"#TCP-IP通信传输流\" class=\"headerlink\" title=\"TCP/IP通信传输流\"></a>TCP/IP通信传输流</h3><p>利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则从链路层往上走。</p>\n</li>\n</ul>\n<p>用 HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。</p>\n<p>接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p>\n<p>在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</p>\n<p>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。</p>\n<p>当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。</p>\n<p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息，反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。这种做法称为封装（encapsulate）。</p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>IP协议的作用是把各种数据包传送给对方，其中重要的条件是IP地址和MAC地址。</p>\n<p>IP地址指明节点被分配到的地址，MAC地址指网卡所属的固定地址。IP地址和MAC地址可以进行配对。</p>\n<p>IP间的通信依赖MAC地址，通信双经常是经过多台计算机和网络设备中转才能连接到对方。而中转采用ARP协议。</p>\n<p>ARP协议是一种用来解析地址的协议，根据通信方的IP地址反查出MAC地址。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>TCP协议提供可靠的字节流服务。TCP协议为了容易传输大数据将数据分割，而且能够准确的确认数据最终是否送达到对方。</p>\n<p>TCP采用三次握手（three-way-handshaking）策略。握手过程使用TCP的标志（flag）———SYN（synchronize）和ACK（acknowledgement）。</p>\n<p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表握手结束。</p>\n<h3 id=\"DNS协议\"><a href=\"#DNS协议\" class=\"headerlink\" title=\"DNS协议\"></a>DNS协议</h3><p>DNS服务提供域名到IP地址之间的解析服务。DNS协议提供通过域名查找IP地址，或逆向从IP地址查找域名的服务。</p>\n<h3 id=\"URI和URL\"><a href=\"#URI和URL\" class=\"headerlink\" title=\"URI和URL\"></a>URI和URL</h3><p>URI统一资源标示符，表示由某个协议方案表示的资源的定位标示符。而URL表示资源的地址。</p>\n<p>URL格式：<br>  <img src=\"http://oq8q06ybp.bkt.clouddn.com/image/URL.PNG\" alt=\"URL格式\"></p>\n<h3 id=\"各种协议和HTTP协议的关系\"><a href=\"#各种协议和HTTP协议的关系\" class=\"headerlink\" title=\"各种协议和HTTP协议的关系\"></a>各种协议和HTTP协议的关系</h3><p>当客户端向某一个网址发起请求时，会向DNS查询这个域名的IP地址。</p>\n<p>接着HTTP协议生成针对WEB目标服务器的HTTP请求报文。</p>\n<p>为了方便通讯，TCP协议按序号将HTTP请求报文分割成报文段，采用三次握手把每个报文段可靠地传给对方。</p>\n<p>路由器根据IP协议，搜索对方的地址，一遍中转一遍传送。</p>\n<p>当对方接受到数据包时，根据TCP协议，将从对方那里接受到的报文段，按序号以原来的顺序重组报文。</p>\n<p>接着HTTP协议再对WEB服务器请求的内容进行处理，在发送给服务器，服务器处理完的结果也同样利用TCP/IP通讯协议向客户端回传。</p>\n"},{"title":"《图解http》第三章笔记","date":"2017-09-15T16:00:00.000Z","_content":"## HTTP报文内的HTTP信息\n### HTTP报文\n用于HTTP协议交互的信息被称为HTTP报文。HTTP报文本身是由多行（使用CRLF作换行符）数据构成的字符串文本。\n\nHTTP报文大体可分为报文首部和报文实体。两者有最初出现的空行（CRLF）来划分。\n### 请求报文及响应报文的结构\n请求报文和响应报文的内容由以下数据组成：\n* 请求行\n    包含用于请求的方法，请求URI和HTTP版本。\n* 状态行\n    包含表明响应状态的状态码，原因短语和HTTP版本。\n* 首部字段\n    包含表示请求和响应的各种条件和属性的各类首部。一般有4种首部：通用首部，请求首部，响应首部，实体首部。\n* 其他\n    可能包含HTTP的RFC里未定义的首部。\n### 编码提升传输速率\n报文主体和实体主体的差异：\n* 报文（message）\n    是HTTP通信中的基本单位，由8位组字节流（octet sequence，其中octet为8个比特）组成，通过HTTP通信传输。\n* 实体（entity）\n    作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。\n\nHTTP报文的主体用于传输请求或响应的实体主体。\n\n通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。\n\n内容编码应指明应用在实体内容上的编码格式，并保持实体信息的原样压缩。编码后的实体由客户端负责接收和解码。\n\n常用的内容编码有以下几种：\n* gzip（GNU zip）\n* compress（UNIX系统的标准压缩）\n* deflate（zlib）\n* identity不进行编码）\n在传输大数据容量时，通过把数据分割成多块，能够让浏览器逐步显示画面。这种把主体实体分块的功能称为分块传输编码（Chunked Transfer Coding）。\n\n分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记大小，而实体主体的最后一块会用'0(CRLF)'来标记。\n\n使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码之前的实体主体。\n### 发送多种数据的多部分对象集合\n多部分对象集合包含的对象如下：\n* multipart/form-data\n    在Web表单上传时使用\n* multipart/byteranges\n    状态码206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。\n在HTTP报文中使用多部分对象集合时，需要在首部字段里加上Content-Type。\n\n使用boundary字符串来划分多部分对象集合指明的各类实体。\n### 获取部分内容的范围请求\n指定范围发送的请求叫做范围请求（Range Request）。\n\n执行范围请求时，会使用首部字段Range来指定资源是byte范围。byte范围的指定形式如下：\n\n* 5001 ~ 10000字节\n    Range: bytes=5001-10000\n* 从5001字节之后到全部\n    Range: bytes=5001-\n* 从一开始到3000字节和5000字节到7000字节的多重范围\n    bytes: -3000, 5000-7000\n针对范围请求，响应会返回状态码为206 Partial Content的响应报文。\n\n对多重范围的范围请求，响应会在首部字段标明Content-Type为multipart/byteranges后返回响应报文。\n\n如果服务器端无法响应范围请求，则会返回状态码200 OK和完整的实体内容。\n### 内容协商返回最适合的内容\n内容协商（Content Negotiation）机制是指客户端和服务端就就响应的资源内容进行交涉，然后提供给客户端最为合适的资源。\n\n内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。如以下的首部字段，可作为基准：\n\n* Accept\n* Accept-charset\n* Accept-Encoding\n* Accept-Language \n* Content-Language \n内容协商技术有以下三种类型：\n* 服务器驱动协商（Server-driven Negotiation）\n* 客户端驱动协商（Agent-driven Negotiation）\n* 透明协商（Transparent Negotiation）\n","source":"_posts/《图解http》第三章笔记.md","raw":"---\ntitle: 《图解http》第三章笔记\ndate: 2017-09-16\ntags: ['http']\ncategories: ['笔记']\n---\n## HTTP报文内的HTTP信息\n### HTTP报文\n用于HTTP协议交互的信息被称为HTTP报文。HTTP报文本身是由多行（使用CRLF作换行符）数据构成的字符串文本。\n\nHTTP报文大体可分为报文首部和报文实体。两者有最初出现的空行（CRLF）来划分。\n### 请求报文及响应报文的结构\n请求报文和响应报文的内容由以下数据组成：\n* 请求行\n    包含用于请求的方法，请求URI和HTTP版本。\n* 状态行\n    包含表明响应状态的状态码，原因短语和HTTP版本。\n* 首部字段\n    包含表示请求和响应的各种条件和属性的各类首部。一般有4种首部：通用首部，请求首部，响应首部，实体首部。\n* 其他\n    可能包含HTTP的RFC里未定义的首部。\n### 编码提升传输速率\n报文主体和实体主体的差异：\n* 报文（message）\n    是HTTP通信中的基本单位，由8位组字节流（octet sequence，其中octet为8个比特）组成，通过HTTP通信传输。\n* 实体（entity）\n    作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。\n\nHTTP报文的主体用于传输请求或响应的实体主体。\n\n通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。\n\n内容编码应指明应用在实体内容上的编码格式，并保持实体信息的原样压缩。编码后的实体由客户端负责接收和解码。\n\n常用的内容编码有以下几种：\n* gzip（GNU zip）\n* compress（UNIX系统的标准压缩）\n* deflate（zlib）\n* identity不进行编码）\n在传输大数据容量时，通过把数据分割成多块，能够让浏览器逐步显示画面。这种把主体实体分块的功能称为分块传输编码（Chunked Transfer Coding）。\n\n分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记大小，而实体主体的最后一块会用'0(CRLF)'来标记。\n\n使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码之前的实体主体。\n### 发送多种数据的多部分对象集合\n多部分对象集合包含的对象如下：\n* multipart/form-data\n    在Web表单上传时使用\n* multipart/byteranges\n    状态码206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。\n在HTTP报文中使用多部分对象集合时，需要在首部字段里加上Content-Type。\n\n使用boundary字符串来划分多部分对象集合指明的各类实体。\n### 获取部分内容的范围请求\n指定范围发送的请求叫做范围请求（Range Request）。\n\n执行范围请求时，会使用首部字段Range来指定资源是byte范围。byte范围的指定形式如下：\n\n* 5001 ~ 10000字节\n    Range: bytes=5001-10000\n* 从5001字节之后到全部\n    Range: bytes=5001-\n* 从一开始到3000字节和5000字节到7000字节的多重范围\n    bytes: -3000, 5000-7000\n针对范围请求，响应会返回状态码为206 Partial Content的响应报文。\n\n对多重范围的范围请求，响应会在首部字段标明Content-Type为multipart/byteranges后返回响应报文。\n\n如果服务器端无法响应范围请求，则会返回状态码200 OK和完整的实体内容。\n### 内容协商返回最适合的内容\n内容协商（Content Negotiation）机制是指客户端和服务端就就响应的资源内容进行交涉，然后提供给客户端最为合适的资源。\n\n内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。如以下的首部字段，可作为基准：\n\n* Accept\n* Accept-charset\n* Accept-Encoding\n* Accept-Language \n* Content-Language \n内容协商技术有以下三种类型：\n* 服务器驱动协商（Server-driven Negotiation）\n* 客户端驱动协商（Agent-driven Negotiation）\n* 透明协商（Transparent Negotiation）\n","slug":"《图解http》第三章笔记","published":1,"updated":"2017-09-28T14:29:14.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cd000mf4b496h0pppe","content":"<h2 id=\"HTTP报文内的HTTP信息\"><a href=\"#HTTP报文内的HTTP信息\" class=\"headerlink\" title=\"HTTP报文内的HTTP信息\"></a>HTTP报文内的HTTP信息</h2><h3 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h3><p>用于HTTP协议交互的信息被称为HTTP报文。HTTP报文本身是由多行（使用CRLF作换行符）数据构成的字符串文本。</p>\n<p>HTTP报文大体可分为报文首部和报文实体。两者有最初出现的空行（CRLF）来划分。</p>\n<h3 id=\"请求报文及响应报文的结构\"><a href=\"#请求报文及响应报文的结构\" class=\"headerlink\" title=\"请求报文及响应报文的结构\"></a>请求报文及响应报文的结构</h3><p>请求报文和响应报文的内容由以下数据组成：</p>\n<ul>\n<li>请求行<br>  包含用于请求的方法，请求URI和HTTP版本。</li>\n<li>状态行<br>  包含表明响应状态的状态码，原因短语和HTTP版本。</li>\n<li>首部字段<br>  包含表示请求和响应的各种条件和属性的各类首部。一般有4种首部：通用首部，请求首部，响应首部，实体首部。</li>\n<li>其他<br>  可能包含HTTP的RFC里未定义的首部。<h3 id=\"编码提升传输速率\"><a href=\"#编码提升传输速率\" class=\"headerlink\" title=\"编码提升传输速率\"></a>编码提升传输速率</h3>报文主体和实体主体的差异：</li>\n<li>报文（message）<br>  是HTTP通信中的基本单位，由8位组字节流（octet sequence，其中octet为8个比特）组成，通过HTTP通信传输。</li>\n<li>实体（entity）<br>  作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。</li>\n</ul>\n<p>HTTP报文的主体用于传输请求或响应的实体主体。</p>\n<p>通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</p>\n<p>内容编码应指明应用在实体内容上的编码格式，并保持实体信息的原样压缩。编码后的实体由客户端负责接收和解码。</p>\n<p>常用的内容编码有以下几种：</p>\n<ul>\n<li>gzip（GNU zip）</li>\n<li>compress（UNIX系统的标准压缩）</li>\n<li>deflate（zlib）</li>\n<li>identity不进行编码）<br>在传输大数据容量时，通过把数据分割成多块，能够让浏览器逐步显示画面。这种把主体实体分块的功能称为分块传输编码（Chunked Transfer Coding）。</li>\n</ul>\n<p>分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记大小，而实体主体的最后一块会用’0(CRLF)’来标记。</p>\n<p>使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码之前的实体主体。</p>\n<h3 id=\"发送多种数据的多部分对象集合\"><a href=\"#发送多种数据的多部分对象集合\" class=\"headerlink\" title=\"发送多种数据的多部分对象集合\"></a>发送多种数据的多部分对象集合</h3><p>多部分对象集合包含的对象如下：</p>\n<ul>\n<li>multipart/form-data<br>  在Web表单上传时使用</li>\n<li>multipart/byteranges<br>  状态码206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。<br>在HTTP报文中使用多部分对象集合时，需要在首部字段里加上Content-Type。</li>\n</ul>\n<p>使用boundary字符串来划分多部分对象集合指明的各类实体。</p>\n<h3 id=\"获取部分内容的范围请求\"><a href=\"#获取部分内容的范围请求\" class=\"headerlink\" title=\"获取部分内容的范围请求\"></a>获取部分内容的范围请求</h3><p>指定范围发送的请求叫做范围请求（Range Request）。</p>\n<p>执行范围请求时，会使用首部字段Range来指定资源是byte范围。byte范围的指定形式如下：</p>\n<ul>\n<li>5001 ~ 10000字节<br>  Range: bytes=5001-10000</li>\n<li>从5001字节之后到全部<br>  Range: bytes=5001-</li>\n<li>从一开始到3000字节和5000字节到7000字节的多重范围<br>  bytes: -3000, 5000-7000<br>针对范围请求，响应会返回状态码为206 Partial Content的响应报文。</li>\n</ul>\n<p>对多重范围的范围请求，响应会在首部字段标明Content-Type为multipart/byteranges后返回响应报文。</p>\n<p>如果服务器端无法响应范围请求，则会返回状态码200 OK和完整的实体内容。</p>\n<h3 id=\"内容协商返回最适合的内容\"><a href=\"#内容协商返回最适合的内容\" class=\"headerlink\" title=\"内容协商返回最适合的内容\"></a>内容协商返回最适合的内容</h3><p>内容协商（Content Negotiation）机制是指客户端和服务端就就响应的资源内容进行交涉，然后提供给客户端最为合适的资源。</p>\n<p>内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。如以下的首部字段，可作为基准：</p>\n<ul>\n<li>Accept</li>\n<li>Accept-charset</li>\n<li>Accept-Encoding</li>\n<li>Accept-Language </li>\n<li>Content-Language<br>内容协商技术有以下三种类型：</li>\n<li>服务器驱动协商（Server-driven Negotiation）</li>\n<li>客户端驱动协商（Agent-driven Negotiation）</li>\n<li>透明协商（Transparent Negotiation）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTTP报文内的HTTP信息\"><a href=\"#HTTP报文内的HTTP信息\" class=\"headerlink\" title=\"HTTP报文内的HTTP信息\"></a>HTTP报文内的HTTP信息</h2><h3 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h3><p>用于HTTP协议交互的信息被称为HTTP报文。HTTP报文本身是由多行（使用CRLF作换行符）数据构成的字符串文本。</p>\n<p>HTTP报文大体可分为报文首部和报文实体。两者有最初出现的空行（CRLF）来划分。</p>\n<h3 id=\"请求报文及响应报文的结构\"><a href=\"#请求报文及响应报文的结构\" class=\"headerlink\" title=\"请求报文及响应报文的结构\"></a>请求报文及响应报文的结构</h3><p>请求报文和响应报文的内容由以下数据组成：</p>\n<ul>\n<li>请求行<br>  包含用于请求的方法，请求URI和HTTP版本。</li>\n<li>状态行<br>  包含表明响应状态的状态码，原因短语和HTTP版本。</li>\n<li>首部字段<br>  包含表示请求和响应的各种条件和属性的各类首部。一般有4种首部：通用首部，请求首部，响应首部，实体首部。</li>\n<li>其他<br>  可能包含HTTP的RFC里未定义的首部。<h3 id=\"编码提升传输速率\"><a href=\"#编码提升传输速率\" class=\"headerlink\" title=\"编码提升传输速率\"></a>编码提升传输速率</h3>报文主体和实体主体的差异：</li>\n<li>报文（message）<br>  是HTTP通信中的基本单位，由8位组字节流（octet sequence，其中octet为8个比特）组成，通过HTTP通信传输。</li>\n<li>实体（entity）<br>  作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。</li>\n</ul>\n<p>HTTP报文的主体用于传输请求或响应的实体主体。</p>\n<p>通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</p>\n<p>内容编码应指明应用在实体内容上的编码格式，并保持实体信息的原样压缩。编码后的实体由客户端负责接收和解码。</p>\n<p>常用的内容编码有以下几种：</p>\n<ul>\n<li>gzip（GNU zip）</li>\n<li>compress（UNIX系统的标准压缩）</li>\n<li>deflate（zlib）</li>\n<li>identity不进行编码）<br>在传输大数据容量时，通过把数据分割成多块，能够让浏览器逐步显示画面。这种把主体实体分块的功能称为分块传输编码（Chunked Transfer Coding）。</li>\n</ul>\n<p>分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记大小，而实体主体的最后一块会用’0(CRLF)’来标记。</p>\n<p>使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码之前的实体主体。</p>\n<h3 id=\"发送多种数据的多部分对象集合\"><a href=\"#发送多种数据的多部分对象集合\" class=\"headerlink\" title=\"发送多种数据的多部分对象集合\"></a>发送多种数据的多部分对象集合</h3><p>多部分对象集合包含的对象如下：</p>\n<ul>\n<li>multipart/form-data<br>  在Web表单上传时使用</li>\n<li>multipart/byteranges<br>  状态码206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。<br>在HTTP报文中使用多部分对象集合时，需要在首部字段里加上Content-Type。</li>\n</ul>\n<p>使用boundary字符串来划分多部分对象集合指明的各类实体。</p>\n<h3 id=\"获取部分内容的范围请求\"><a href=\"#获取部分内容的范围请求\" class=\"headerlink\" title=\"获取部分内容的范围请求\"></a>获取部分内容的范围请求</h3><p>指定范围发送的请求叫做范围请求（Range Request）。</p>\n<p>执行范围请求时，会使用首部字段Range来指定资源是byte范围。byte范围的指定形式如下：</p>\n<ul>\n<li>5001 ~ 10000字节<br>  Range: bytes=5001-10000</li>\n<li>从5001字节之后到全部<br>  Range: bytes=5001-</li>\n<li>从一开始到3000字节和5000字节到7000字节的多重范围<br>  bytes: -3000, 5000-7000<br>针对范围请求，响应会返回状态码为206 Partial Content的响应报文。</li>\n</ul>\n<p>对多重范围的范围请求，响应会在首部字段标明Content-Type为multipart/byteranges后返回响应报文。</p>\n<p>如果服务器端无法响应范围请求，则会返回状态码200 OK和完整的实体内容。</p>\n<h3 id=\"内容协商返回最适合的内容\"><a href=\"#内容协商返回最适合的内容\" class=\"headerlink\" title=\"内容协商返回最适合的内容\"></a>内容协商返回最适合的内容</h3><p>内容协商（Content Negotiation）机制是指客户端和服务端就就响应的资源内容进行交涉，然后提供给客户端最为合适的资源。</p>\n<p>内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。如以下的首部字段，可作为基准：</p>\n<ul>\n<li>Accept</li>\n<li>Accept-charset</li>\n<li>Accept-Encoding</li>\n<li>Accept-Language </li>\n<li>Content-Language<br>内容协商技术有以下三种类型：</li>\n<li>服务器驱动协商（Server-driven Negotiation）</li>\n<li>客户端驱动协商（Agent-driven Negotiation）</li>\n<li>透明协商（Transparent Negotiation）</li>\n</ul>\n"},{"title":"《图解http》第二章笔记","date":"2017-09-15T16:00:00.000Z","_content":"## 简单的http协议\n两台计算机使用HTTP协议进行通信时，在一条通信线路上必定有一端是客户端，另一端则是客户端。\n\n### 下面是客户端发给某个HTTP客户端的请求报文中的内容。\n````http\nGET /index.html HTTP/1.1\nHOST: hackr.jp\n````\nGET表示请求访问服务器的类型，称为方法（method）。\n\n随后的/index.html指明请求访问的资源对象，叫做请求URI（request-URI）。\n\n最后的HTTP/1.1表明HTTP的版本号。\n\n请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。\n### 接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\n````http\nHTTP/1.1 200 OK\nDate: Tue, 10 Jul 2012 06:50:15 GMT\nContent-Length: 362\nContent-Type: text/html\n\n<html>\n....\n````\n开头的HTTP/1.1代表服务端对应的HTTP版本。\n\n紧接着的200 OK代表请求的处理结果的状态码（status code）和原因短语（reason-phrase）。\n\n下一行显示创建响应的日期时间、内容长度、内容类型，是首部字段（header field）内的一个属性。\n\n接着以一空行分隔，之后的内容称为资源内容的主体（entity body）。\n\n响应报文基本上由协议版本、状态码、解释状态码的原因短语、可选的响应首部字段已经实体主体构成。\n### HTTP是一种不保存状态，即无状态（stateless）协议。\nhttp协议自身不对请求和响应之间的通信状态进行保存。\n### 请求URI定位资源\n请求指定URI的方式\n1. URI为完整的URI\n````http\nGET http://hackr.jp/index.htm HTTP/1.1\n````\n2. 在首部字段Host中写明网络域名或IP地址\n````http\nGET /index.htm HTTP/1.1\nHost: hackr.jp\n````\n### 告知服务器意图的HTTP方法\n* GET：获取资源\n    \n    用来请求访问已被URI识别的资源。指定的资源经服务端解析后返回响应的内容。\n* POST：传输主体实体\n\n    用来传输实体的主体。\n* PUT：传输文件\n    \n    要求在请求报文的主体包含文件内容，然后保存到URI指定的位置。\n\n    鉴于HTTP/1.1的PUT方法不带验证机制，任何人都可以上传文件，因此存在安全性问题,一般不使用。\n* HEAD：获得报文首部\n\n    HEAD方法和GET方法一样，这是不返回报文的主体部分。\n\n    用于确认URI的有效性及资源更新的日期时间等。\n* DELETE：删除文件\n\n    DELETE方法按请求的URI删除指定的资源。\n\n    但是DELETE方法和PUT方法一样不带验证机制，一般也不使用DELETE方法。\n* OPTIONS：查询支持的方法\n\n    用来查询针对请求URI指定的资源支持的方法。\n* TRACE：追踪路径\n\n    TRACE方法是让Web服务器将之前请求通信环回给客户端的方法。可以查询发送出去的请求是怎样被加工或者篡改的。\n* CONNECT：要求用隧道协议连接代理\n    \n    该方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。\n\n    主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n### 持久连接节省通信量\n1. 持久连接\n在初始版本的HTTP协议中，每进行一次HTTP通信就要断开一次TCP连接，增加通信量的开销。\n\n为解决上述TCP连接的问题，HTTP/1.1和一部分HTTP/1.0提出了持久化的连接（HTTP Persistent Connections），也叫做HTTP keep-alive或HTTP connection reuse。\n\n持久化连接的特点是，只要任意一方没有明确提出断开连接，则保持TCP连接状态。\n\n好处是减少了TCP连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。减少开销的那部分时间，使得Web页面的显示速度提高。\n\n在HTTP/1.1中，默认所有连接都是持久连接。\n\n持久连接使得多数请求以管线化（pipeling）方式发送成为可能，可以并行发送请求。\n### 使用cookie的状态管理\ncookie技术通过在请求和响应的报文中写入cookie信息来控制服务端状态。\n\ncookie会根据从服务器发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存cookie。下次客户端再往服务端发送请求时，客户端会自动在请求报文中加入cookie值后发送出去。\n\n服务端接收到客户端发送过来的cookie后会去检查究竟是哪个客户端发来的连接请求，对比服务器上的记录，最后得到之前的状态信息。\n### If-Modified-Since\nIf-Modified-Since是标准的HTTP请求头标签，在发送HTTP请求时，把浏览器端缓存页面的最后修改时间一起发到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行比较。\n\n如果时间一致，那么返回HTTP状态码304（不返回文件内容），客户端接到之后，就直接把本地缓存文件显示到浏览器中。\n\n如果时间不一致，就返回HTTP状态码200和新的文件内容，客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示到浏览器中。\n### 参考资料\n* [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since)\n* [http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html](http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html)\n","source":"_posts/《图解http》第二章笔记.md","raw":"---\ntitle: 《图解http》第二章笔记\ndate: 2017-09-16\ntags: ['http']\ncategories: ['笔记']\n---\n## 简单的http协议\n两台计算机使用HTTP协议进行通信时，在一条通信线路上必定有一端是客户端，另一端则是客户端。\n\n### 下面是客户端发给某个HTTP客户端的请求报文中的内容。\n````http\nGET /index.html HTTP/1.1\nHOST: hackr.jp\n````\nGET表示请求访问服务器的类型，称为方法（method）。\n\n随后的/index.html指明请求访问的资源对象，叫做请求URI（request-URI）。\n\n最后的HTTP/1.1表明HTTP的版本号。\n\n请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。\n### 接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\n````http\nHTTP/1.1 200 OK\nDate: Tue, 10 Jul 2012 06:50:15 GMT\nContent-Length: 362\nContent-Type: text/html\n\n<html>\n....\n````\n开头的HTTP/1.1代表服务端对应的HTTP版本。\n\n紧接着的200 OK代表请求的处理结果的状态码（status code）和原因短语（reason-phrase）。\n\n下一行显示创建响应的日期时间、内容长度、内容类型，是首部字段（header field）内的一个属性。\n\n接着以一空行分隔，之后的内容称为资源内容的主体（entity body）。\n\n响应报文基本上由协议版本、状态码、解释状态码的原因短语、可选的响应首部字段已经实体主体构成。\n### HTTP是一种不保存状态，即无状态（stateless）协议。\nhttp协议自身不对请求和响应之间的通信状态进行保存。\n### 请求URI定位资源\n请求指定URI的方式\n1. URI为完整的URI\n````http\nGET http://hackr.jp/index.htm HTTP/1.1\n````\n2. 在首部字段Host中写明网络域名或IP地址\n````http\nGET /index.htm HTTP/1.1\nHost: hackr.jp\n````\n### 告知服务器意图的HTTP方法\n* GET：获取资源\n    \n    用来请求访问已被URI识别的资源。指定的资源经服务端解析后返回响应的内容。\n* POST：传输主体实体\n\n    用来传输实体的主体。\n* PUT：传输文件\n    \n    要求在请求报文的主体包含文件内容，然后保存到URI指定的位置。\n\n    鉴于HTTP/1.1的PUT方法不带验证机制，任何人都可以上传文件，因此存在安全性问题,一般不使用。\n* HEAD：获得报文首部\n\n    HEAD方法和GET方法一样，这是不返回报文的主体部分。\n\n    用于确认URI的有效性及资源更新的日期时间等。\n* DELETE：删除文件\n\n    DELETE方法按请求的URI删除指定的资源。\n\n    但是DELETE方法和PUT方法一样不带验证机制，一般也不使用DELETE方法。\n* OPTIONS：查询支持的方法\n\n    用来查询针对请求URI指定的资源支持的方法。\n* TRACE：追踪路径\n\n    TRACE方法是让Web服务器将之前请求通信环回给客户端的方法。可以查询发送出去的请求是怎样被加工或者篡改的。\n* CONNECT：要求用隧道协议连接代理\n    \n    该方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。\n\n    主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n### 持久连接节省通信量\n1. 持久连接\n在初始版本的HTTP协议中，每进行一次HTTP通信就要断开一次TCP连接，增加通信量的开销。\n\n为解决上述TCP连接的问题，HTTP/1.1和一部分HTTP/1.0提出了持久化的连接（HTTP Persistent Connections），也叫做HTTP keep-alive或HTTP connection reuse。\n\n持久化连接的特点是，只要任意一方没有明确提出断开连接，则保持TCP连接状态。\n\n好处是减少了TCP连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。减少开销的那部分时间，使得Web页面的显示速度提高。\n\n在HTTP/1.1中，默认所有连接都是持久连接。\n\n持久连接使得多数请求以管线化（pipeling）方式发送成为可能，可以并行发送请求。\n### 使用cookie的状态管理\ncookie技术通过在请求和响应的报文中写入cookie信息来控制服务端状态。\n\ncookie会根据从服务器发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存cookie。下次客户端再往服务端发送请求时，客户端会自动在请求报文中加入cookie值后发送出去。\n\n服务端接收到客户端发送过来的cookie后会去检查究竟是哪个客户端发来的连接请求，对比服务器上的记录，最后得到之前的状态信息。\n### If-Modified-Since\nIf-Modified-Since是标准的HTTP请求头标签，在发送HTTP请求时，把浏览器端缓存页面的最后修改时间一起发到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行比较。\n\n如果时间一致，那么返回HTTP状态码304（不返回文件内容），客户端接到之后，就直接把本地缓存文件显示到浏览器中。\n\n如果时间不一致，就返回HTTP状态码200和新的文件内容，客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示到浏览器中。\n### 参考资料\n* [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since)\n* [http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html](http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html)\n","slug":"《图解http》第二章笔记","published":1,"updated":"2017-09-28T14:28:53.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cf000pf4b4kbkirjuc","content":"<h2 id=\"简单的http协议\"><a href=\"#简单的http协议\" class=\"headerlink\" title=\"简单的http协议\"></a>简单的http协议</h2><p>两台计算机使用HTTP协议进行通信时，在一条通信线路上必定有一端是客户端，另一端则是客户端。</p>\n<h3 id=\"下面是客户端发给某个HTTP客户端的请求报文中的内容。\"><a href=\"#下面是客户端发给某个HTTP客户端的请求报文中的内容。\" class=\"headerlink\" title=\"下面是客户端发给某个HTTP客户端的请求报文中的内容。\"></a>下面是客户端发给某个HTTP客户端的请求报文中的内容。</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/index.html</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">HOST</span>: hackr.jp</div></pre></td></tr></table></figure>\n<p>GET表示请求访问服务器的类型，称为方法（method）。</p>\n<p>随后的/index.html指明请求访问的资源对象，叫做请求URI（request-URI）。</p>\n<p>最后的HTTP/1.1表明HTTP的版本号。</p>\n<p>请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。</p>\n<h3 id=\"接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\"><a href=\"#接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\" class=\"headerlink\" title=\"接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\"></a>接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</div><div class=\"line\"><span class=\"attribute\">Date</span>: Tue, 10 Jul 2012 06:50:15 GMT</div><div class=\"line\"><span class=\"attribute\">Content-Length</span>: 362</div><div class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></div><div class=\"line\">....</div></pre></td></tr></table></figure>\n<p>开头的HTTP/1.1代表服务端对应的HTTP版本。</p>\n<p>紧接着的200 OK代表请求的处理结果的状态码（status code）和原因短语（reason-phrase）。</p>\n<p>下一行显示创建响应的日期时间、内容长度、内容类型，是首部字段（header field）内的一个属性。</p>\n<p>接着以一空行分隔，之后的内容称为资源内容的主体（entity body）。</p>\n<p>响应报文基本上由协议版本、状态码、解释状态码的原因短语、可选的响应首部字段已经实体主体构成。</p>\n<h3 id=\"HTTP是一种不保存状态，即无状态（stateless）协议。\"><a href=\"#HTTP是一种不保存状态，即无状态（stateless）协议。\" class=\"headerlink\" title=\"HTTP是一种不保存状态，即无状态（stateless）协议。\"></a>HTTP是一种不保存状态，即无状态（stateless）协议。</h3><p>http协议自身不对请求和响应之间的通信状态进行保存。</p>\n<h3 id=\"请求URI定位资源\"><a href=\"#请求URI定位资源\" class=\"headerlink\" title=\"请求URI定位资源\"></a>请求URI定位资源</h3><p>请求指定URI的方式</p>\n<ol>\n<li><p>URI为完整的URI</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">http://hackr.jp/index.htm</span> HTTP/1.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>在首部字段Host中写明网络域名或IP地址</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/index.htm</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: hackr.jp</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"告知服务器意图的HTTP方法\"><a href=\"#告知服务器意图的HTTP方法\" class=\"headerlink\" title=\"告知服务器意图的HTTP方法\"></a>告知服务器意图的HTTP方法</h3><ul>\n<li><p>GET：获取资源</p>\n<p>  用来请求访问已被URI识别的资源。指定的资源经服务端解析后返回响应的内容。</p>\n</li>\n<li><p>POST：传输主体实体</p>\n<p>  用来传输实体的主体。</p>\n</li>\n<li><p>PUT：传输文件</p>\n<p>  要求在请求报文的主体包含文件内容，然后保存到URI指定的位置。</p>\n<p>  鉴于HTTP/1.1的PUT方法不带验证机制，任何人都可以上传文件，因此存在安全性问题,一般不使用。</p>\n</li>\n<li><p>HEAD：获得报文首部</p>\n<p>  HEAD方法和GET方法一样，这是不返回报文的主体部分。</p>\n<p>  用于确认URI的有效性及资源更新的日期时间等。</p>\n</li>\n<li><p>DELETE：删除文件</p>\n<p>  DELETE方法按请求的URI删除指定的资源。</p>\n<p>  但是DELETE方法和PUT方法一样不带验证机制，一般也不使用DELETE方法。</p>\n</li>\n<li><p>OPTIONS：查询支持的方法</p>\n<p>  用来查询针对请求URI指定的资源支持的方法。</p>\n</li>\n<li><p>TRACE：追踪路径</p>\n<p>  TRACE方法是让Web服务器将之前请求通信环回给客户端的方法。可以查询发送出去的请求是怎样被加工或者篡改的。</p>\n</li>\n<li><p>CONNECT：要求用隧道协议连接代理</p>\n<p>  该方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。</p>\n<p>  主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>\n<h3 id=\"持久连接节省通信量\"><a href=\"#持久连接节省通信量\" class=\"headerlink\" title=\"持久连接节省通信量\"></a>持久连接节省通信量</h3></li>\n</ul>\n<ol>\n<li>持久连接<br>在初始版本的HTTP协议中，每进行一次HTTP通信就要断开一次TCP连接，增加通信量的开销。</li>\n</ol>\n<p>为解决上述TCP连接的问题，HTTP/1.1和一部分HTTP/1.0提出了持久化的连接（HTTP Persistent Connections），也叫做HTTP keep-alive或HTTP connection reuse。</p>\n<p>持久化连接的特点是，只要任意一方没有明确提出断开连接，则保持TCP连接状态。</p>\n<p>好处是减少了TCP连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。减少开销的那部分时间，使得Web页面的显示速度提高。</p>\n<p>在HTTP/1.1中，默认所有连接都是持久连接。</p>\n<p>持久连接使得多数请求以管线化（pipeling）方式发送成为可能，可以并行发送请求。</p>\n<h3 id=\"使用cookie的状态管理\"><a href=\"#使用cookie的状态管理\" class=\"headerlink\" title=\"使用cookie的状态管理\"></a>使用cookie的状态管理</h3><p>cookie技术通过在请求和响应的报文中写入cookie信息来控制服务端状态。</p>\n<p>cookie会根据从服务器发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存cookie。下次客户端再往服务端发送请求时，客户端会自动在请求报文中加入cookie值后发送出去。</p>\n<p>服务端接收到客户端发送过来的cookie后会去检查究竟是哪个客户端发来的连接请求，对比服务器上的记录，最后得到之前的状态信息。</p>\n<h3 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h3><p>If-Modified-Since是标准的HTTP请求头标签，在发送HTTP请求时，把浏览器端缓存页面的最后修改时间一起发到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行比较。</p>\n<p>如果时间一致，那么返回HTTP状态码304（不返回文件内容），客户端接到之后，就直接把本地缓存文件显示到浏览器中。</p>\n<p>如果时间不一致，就返回HTTP状态码200和新的文件内容，客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示到浏览器中。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since</a></li>\n<li><a href=\"http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单的http协议\"><a href=\"#简单的http协议\" class=\"headerlink\" title=\"简单的http协议\"></a>简单的http协议</h2><p>两台计算机使用HTTP协议进行通信时，在一条通信线路上必定有一端是客户端，另一端则是客户端。</p>\n<h3 id=\"下面是客户端发给某个HTTP客户端的请求报文中的内容。\"><a href=\"#下面是客户端发给某个HTTP客户端的请求报文中的内容。\" class=\"headerlink\" title=\"下面是客户端发给某个HTTP客户端的请求报文中的内容。\"></a>下面是客户端发给某个HTTP客户端的请求报文中的内容。</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/index.html</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">HOST</span>: hackr.jp</div></pre></td></tr></table></figure>\n<p>GET表示请求访问服务器的类型，称为方法（method）。</p>\n<p>随后的/index.html指明请求访问的资源对象，叫做请求URI（request-URI）。</p>\n<p>最后的HTTP/1.1表明HTTP的版本号。</p>\n<p>请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。</p>\n<h3 id=\"接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\"><a href=\"#接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\" class=\"headerlink\" title=\"接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。\"></a>接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</div><div class=\"line\"><span class=\"attribute\">Date</span>: Tue, 10 Jul 2012 06:50:15 GMT</div><div class=\"line\"><span class=\"attribute\">Content-Length</span>: 362</div><div class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">....</span></div></pre></td></tr></table></figure>\n<p>开头的HTTP/1.1代表服务端对应的HTTP版本。</p>\n<p>紧接着的200 OK代表请求的处理结果的状态码（status code）和原因短语（reason-phrase）。</p>\n<p>下一行显示创建响应的日期时间、内容长度、内容类型，是首部字段（header field）内的一个属性。</p>\n<p>接着以一空行分隔，之后的内容称为资源内容的主体（entity body）。</p>\n<p>响应报文基本上由协议版本、状态码、解释状态码的原因短语、可选的响应首部字段已经实体主体构成。</p>\n<h3 id=\"HTTP是一种不保存状态，即无状态（stateless）协议。\"><a href=\"#HTTP是一种不保存状态，即无状态（stateless）协议。\" class=\"headerlink\" title=\"HTTP是一种不保存状态，即无状态（stateless）协议。\"></a>HTTP是一种不保存状态，即无状态（stateless）协议。</h3><p>http协议自身不对请求和响应之间的通信状态进行保存。</p>\n<h3 id=\"请求URI定位资源\"><a href=\"#请求URI定位资源\" class=\"headerlink\" title=\"请求URI定位资源\"></a>请求URI定位资源</h3><p>请求指定URI的方式</p>\n<ol>\n<li><p>URI为完整的URI</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">http://hackr.jp/index.htm</span> HTTP/1.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>在首部字段Host中写明网络域名或IP地址</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/index.htm</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: hackr.jp</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"告知服务器意图的HTTP方法\"><a href=\"#告知服务器意图的HTTP方法\" class=\"headerlink\" title=\"告知服务器意图的HTTP方法\"></a>告知服务器意图的HTTP方法</h3><ul>\n<li><p>GET：获取资源</p>\n<p>  用来请求访问已被URI识别的资源。指定的资源经服务端解析后返回响应的内容。</p>\n</li>\n<li><p>POST：传输主体实体</p>\n<p>  用来传输实体的主体。</p>\n</li>\n<li><p>PUT：传输文件</p>\n<p>  要求在请求报文的主体包含文件内容，然后保存到URI指定的位置。</p>\n<p>  鉴于HTTP/1.1的PUT方法不带验证机制，任何人都可以上传文件，因此存在安全性问题,一般不使用。</p>\n</li>\n<li><p>HEAD：获得报文首部</p>\n<p>  HEAD方法和GET方法一样，这是不返回报文的主体部分。</p>\n<p>  用于确认URI的有效性及资源更新的日期时间等。</p>\n</li>\n<li><p>DELETE：删除文件</p>\n<p>  DELETE方法按请求的URI删除指定的资源。</p>\n<p>  但是DELETE方法和PUT方法一样不带验证机制，一般也不使用DELETE方法。</p>\n</li>\n<li><p>OPTIONS：查询支持的方法</p>\n<p>  用来查询针对请求URI指定的资源支持的方法。</p>\n</li>\n<li><p>TRACE：追踪路径</p>\n<p>  TRACE方法是让Web服务器将之前请求通信环回给客户端的方法。可以查询发送出去的请求是怎样被加工或者篡改的。</p>\n</li>\n<li><p>CONNECT：要求用隧道协议连接代理</p>\n<p>  该方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。</p>\n<p>  主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>\n<h3 id=\"持久连接节省通信量\"><a href=\"#持久连接节省通信量\" class=\"headerlink\" title=\"持久连接节省通信量\"></a>持久连接节省通信量</h3></li>\n</ul>\n<ol>\n<li>持久连接<br>在初始版本的HTTP协议中，每进行一次HTTP通信就要断开一次TCP连接，增加通信量的开销。</li>\n</ol>\n<p>为解决上述TCP连接的问题，HTTP/1.1和一部分HTTP/1.0提出了持久化的连接（HTTP Persistent Connections），也叫做HTTP keep-alive或HTTP connection reuse。</p>\n<p>持久化连接的特点是，只要任意一方没有明确提出断开连接，则保持TCP连接状态。</p>\n<p>好处是减少了TCP连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。减少开销的那部分时间，使得Web页面的显示速度提高。</p>\n<p>在HTTP/1.1中，默认所有连接都是持久连接。</p>\n<p>持久连接使得多数请求以管线化（pipeling）方式发送成为可能，可以并行发送请求。</p>\n<h3 id=\"使用cookie的状态管理\"><a href=\"#使用cookie的状态管理\" class=\"headerlink\" title=\"使用cookie的状态管理\"></a>使用cookie的状态管理</h3><p>cookie技术通过在请求和响应的报文中写入cookie信息来控制服务端状态。</p>\n<p>cookie会根据从服务器发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存cookie。下次客户端再往服务端发送请求时，客户端会自动在请求报文中加入cookie值后发送出去。</p>\n<p>服务端接收到客户端发送过来的cookie后会去检查究竟是哪个客户端发来的连接请求，对比服务器上的记录，最后得到之前的状态信息。</p>\n<h3 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h3><p>If-Modified-Since是标准的HTTP请求头标签，在发送HTTP请求时，把浏览器端缓存页面的最后修改时间一起发到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行比较。</p>\n<p>如果时间一致，那么返回HTTP状态码304（不返回文件内容），客户端接到之后，就直接把本地缓存文件显示到浏览器中。</p>\n<p>如果时间不一致，就返回HTTP状态码200和新的文件内容，客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示到浏览器中。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since</a></li>\n<li><a href=\"http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html\">http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html</a></li>\n</ul>\n"},{"title":"《图解http》第五章笔记","date":"2017-09-23T16:00:00.000Z","_content":"## 用单台虚拟主机实现多个域名\n即使物理层面只有一台服务器，但只要使用虚拟主机的功能（Virtual Host），则可以假想已具有多台服务器，搭建多个WEB站点，持有各自的域名，运行各自的网站。\n\n客户端使用HTTP协议访问服务器时，主机名和域名会通过DNS服务映射到ip地址访问目标网站。如果一台服务器托管了多个域名，就需要知道是访问哪个域名。\n\n因此在发送HTTP请求时，必须在Host首部内完整地指定主机名或域名的URI。\n## 通讯数据转发程序：代理、网关、隧道\n1. 代理\n\n  代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变URI，会直接发给前方持有资源的目标服务器。\n\n  这个过程可以级联多台服务器，转发时，需要附加Via首部字段以标记出经过的主机信息。\n\n  持有资源实体的服务器叫做源服务器。从源服务器返回的响应经过代理服务器再传给客户端。\n\n  ### 使用代理服务器的理由\n  按两种基准分类，一是是否使用缓存，另一种是是否修改报文。\n  * 利用缓存技术减少带宽流量\n\n    代理转发响应时缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。\n\n    当代理再次接受到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。\n  * 透明代理\n    转发请求或响应时，不对报文做任何加工的代理类型称为透明代理（Transparent Proxy）。反之称为非透明代理。\n\n  此外使用代理服务器还可以组织内部针对特定网站进行访问控制，获取访问日志等。\n2. 网关\n\n  网关能使通讯线路上的服务器提供非HTTP通讯协议。\n  \n  利用网关能提高通讯的安全性，因为可以在客户端和网关之间的通讯线路上加密以确保通讯的安全。\n\n  接收客户端发来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端也不能分辨自己的通信目标是一个网关。\n3. 隧道\n\n  隧道是在相隔甚远的客户端和服务器之间进行中转。并保持双方通信连接的应用程序，确保客户端和服务器端能进行安全的通信。\n\n  隧道本身不解析HTTP请求，原样中转给之后的服务器。\n  \n  隧道会在通信双方断开连接时结束。\n","source":"_posts/《图解http》第五章笔记.md","raw":"---\ntitle: 《图解http》第五章笔记\ndate: 2017-9-24\ntags: ['http']\ncategories: ['笔记']\n---\n## 用单台虚拟主机实现多个域名\n即使物理层面只有一台服务器，但只要使用虚拟主机的功能（Virtual Host），则可以假想已具有多台服务器，搭建多个WEB站点，持有各自的域名，运行各自的网站。\n\n客户端使用HTTP协议访问服务器时，主机名和域名会通过DNS服务映射到ip地址访问目标网站。如果一台服务器托管了多个域名，就需要知道是访问哪个域名。\n\n因此在发送HTTP请求时，必须在Host首部内完整地指定主机名或域名的URI。\n## 通讯数据转发程序：代理、网关、隧道\n1. 代理\n\n  代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变URI，会直接发给前方持有资源的目标服务器。\n\n  这个过程可以级联多台服务器，转发时，需要附加Via首部字段以标记出经过的主机信息。\n\n  持有资源实体的服务器叫做源服务器。从源服务器返回的响应经过代理服务器再传给客户端。\n\n  ### 使用代理服务器的理由\n  按两种基准分类，一是是否使用缓存，另一种是是否修改报文。\n  * 利用缓存技术减少带宽流量\n\n    代理转发响应时缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。\n\n    当代理再次接受到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。\n  * 透明代理\n    转发请求或响应时，不对报文做任何加工的代理类型称为透明代理（Transparent Proxy）。反之称为非透明代理。\n\n  此外使用代理服务器还可以组织内部针对特定网站进行访问控制，获取访问日志等。\n2. 网关\n\n  网关能使通讯线路上的服务器提供非HTTP通讯协议。\n  \n  利用网关能提高通讯的安全性，因为可以在客户端和网关之间的通讯线路上加密以确保通讯的安全。\n\n  接收客户端发来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端也不能分辨自己的通信目标是一个网关。\n3. 隧道\n\n  隧道是在相隔甚远的客户端和服务器之间进行中转。并保持双方通信连接的应用程序，确保客户端和服务器端能进行安全的通信。\n\n  隧道本身不解析HTTP请求，原样中转给之后的服务器。\n  \n  隧道会在通信双方断开连接时结束。\n","slug":"《图解http》第五章笔记","published":1,"updated":"2017-10-25T14:08:23.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1ch000tf4b4r3ah21w9","content":"<h2 id=\"用单台虚拟主机实现多个域名\"><a href=\"#用单台虚拟主机实现多个域名\" class=\"headerlink\" title=\"用单台虚拟主机实现多个域名\"></a>用单台虚拟主机实现多个域名</h2><p>即使物理层面只有一台服务器，但只要使用虚拟主机的功能（Virtual Host），则可以假想已具有多台服务器，搭建多个WEB站点，持有各自的域名，运行各自的网站。</p>\n<p>客户端使用HTTP协议访问服务器时，主机名和域名会通过DNS服务映射到ip地址访问目标网站。如果一台服务器托管了多个域名，就需要知道是访问哪个域名。</p>\n<p>因此在发送HTTP请求时，必须在Host首部内完整地指定主机名或域名的URI。</p>\n<h2 id=\"通讯数据转发程序：代理、网关、隧道\"><a href=\"#通讯数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通讯数据转发程序：代理、网关、隧道\"></a>通讯数据转发程序：代理、网关、隧道</h2><ol>\n<li><p>代理</p>\n<p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变URI，会直接发给前方持有资源的目标服务器。</p>\n<p>这个过程可以级联多台服务器，转发时，需要附加Via首部字段以标记出经过的主机信息。</p>\n<p>持有资源实体的服务器叫做源服务器。从源服务器返回的响应经过代理服务器再传给客户端。</p>\n<h3 id=\"使用代理服务器的理由\"><a href=\"#使用代理服务器的理由\" class=\"headerlink\" title=\"使用代理服务器的理由\"></a>使用代理服务器的理由</h3><p>按两种基准分类，一是是否使用缓存，另一种是是否修改报文。</p>\n<ul>\n<li><p>利用缓存技术减少带宽流量</p>\n<p>代理转发响应时缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。</p>\n<p>当代理再次接受到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</p>\n</li>\n<li>透明代理<br>转发请求或响应时，不对报文做任何加工的代理类型称为透明代理（Transparent Proxy）。反之称为非透明代理。</li>\n</ul>\n<p>此外使用代理服务器还可以组织内部针对特定网站进行访问控制，获取访问日志等。</p>\n</li>\n<li><p>网关</p>\n<p>网关能使通讯线路上的服务器提供非HTTP通讯协议。</p>\n<p>利用网关能提高通讯的安全性，因为可以在客户端和网关之间的通讯线路上加密以确保通讯的安全。</p>\n<p>接收客户端发来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端也不能分辨自己的通信目标是一个网关。</p>\n</li>\n<li><p>隧道</p>\n<p>隧道是在相隔甚远的客户端和服务器之间进行中转。并保持双方通信连接的应用程序，确保客户端和服务器端能进行安全的通信。</p>\n<p>隧道本身不解析HTTP请求，原样中转给之后的服务器。</p>\n<p>隧道会在通信双方断开连接时结束。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用单台虚拟主机实现多个域名\"><a href=\"#用单台虚拟主机实现多个域名\" class=\"headerlink\" title=\"用单台虚拟主机实现多个域名\"></a>用单台虚拟主机实现多个域名</h2><p>即使物理层面只有一台服务器，但只要使用虚拟主机的功能（Virtual Host），则可以假想已具有多台服务器，搭建多个WEB站点，持有各自的域名，运行各自的网站。</p>\n<p>客户端使用HTTP协议访问服务器时，主机名和域名会通过DNS服务映射到ip地址访问目标网站。如果一台服务器托管了多个域名，就需要知道是访问哪个域名。</p>\n<p>因此在发送HTTP请求时，必须在Host首部内完整地指定主机名或域名的URI。</p>\n<h2 id=\"通讯数据转发程序：代理、网关、隧道\"><a href=\"#通讯数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通讯数据转发程序：代理、网关、隧道\"></a>通讯数据转发程序：代理、网关、隧道</h2><ol>\n<li><p>代理</p>\n<p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变URI，会直接发给前方持有资源的目标服务器。</p>\n<p>这个过程可以级联多台服务器，转发时，需要附加Via首部字段以标记出经过的主机信息。</p>\n<p>持有资源实体的服务器叫做源服务器。从源服务器返回的响应经过代理服务器再传给客户端。</p>\n<h3 id=\"使用代理服务器的理由\"><a href=\"#使用代理服务器的理由\" class=\"headerlink\" title=\"使用代理服务器的理由\"></a>使用代理服务器的理由</h3><p>按两种基准分类，一是是否使用缓存，另一种是是否修改报文。</p>\n<ul>\n<li><p>利用缓存技术减少带宽流量</p>\n<p>代理转发响应时缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。</p>\n<p>当代理再次接受到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</p>\n</li>\n<li>透明代理<br>转发请求或响应时，不对报文做任何加工的代理类型称为透明代理（Transparent Proxy）。反之称为非透明代理。</li>\n</ul>\n<p>此外使用代理服务器还可以组织内部针对特定网站进行访问控制，获取访问日志等。</p>\n</li>\n<li><p>网关</p>\n<p>网关能使通讯线路上的服务器提供非HTTP通讯协议。</p>\n<p>利用网关能提高通讯的安全性，因为可以在客户端和网关之间的通讯线路上加密以确保通讯的安全。</p>\n<p>接收客户端发来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端也不能分辨自己的通信目标是一个网关。</p>\n</li>\n<li><p>隧道</p>\n<p>隧道是在相隔甚远的客户端和服务器之间进行中转。并保持双方通信连接的应用程序，确保客户端和服务器端能进行安全的通信。</p>\n<p>隧道本身不解析HTTP请求，原样中转给之后的服务器。</p>\n<p>隧道会在通信双方断开连接时结束。</p>\n</li>\n</ol>\n"},{"title":"《图解http》第六章笔记","date":"2017-10-19T16:00:00.000Z","_content":"## http 报文首部\n\nHTTP报文首部起到传递额外重要信息的作用。\n\nHTTP请求报文首部由方法、URI、HTTP版本、请求首部字段、通用首部字段、实体首部字段构成。\n\nHTTP响应报文首部由HTTP版本、状态码、响应首部字段、通用首部字段、实体首部字段构成。\n### http 首部字段的四种类型\nHTTP首部字段根据实际用途被分为以下四类：\n* 通用首部字段（General Header Fields）\n\n  请求报文和响应报文都会使用的首部\n* 请求首部字段（Requset Header Fields）\n\n  从客户端向服务端发送请求报文时使用的首部。\n* 响应首部字段（Response Header Fields）\n\n  从服务端向客户端返回响应报文时使用的首部。\n* 实体首部字段（Entity Header Fields）\n\n  针对请求报文和响应报文的实体部分使用的首部。\n### End-to-end 首部和Hop-by-hop 首部\nHTTP首部字段将定义成缓存代理和非缓存代理的行为。\n\n* 端到端首部\n\n  分在此类别的首部会转发给请求/响应对应的最终接收目标，且必须保存在由缓存生成的响应中。另外规定他必须被转发。\n* 逐跳首部\n\n  分在此类别的首部只对单次转发有效，会因通过缓存或代理而不再转发。\n### 通用首部字段\n#### Cache-Control\n* public指令(仅为响应指令)\n\n  表明其他用户也可利用缓存。\n* private指令(仅为响应指令)\n\n  响应只以特定的用户作为对象，对应其他用户发送过来的请求，代理服务器不会返回缓存。\n* no-cache\n\n  位于请求首部：表明客户端不接受缓存过的响应，“中间”的缓存服务器必须把客户端的请求转发给源服务器。\n\n  位于响应首部：响应中包含no-chche指令，则缓存服务器不对资源进行缓存。\n* no-store\n\n  规定缓存不能在本地存储请求或响应的任一部分。\n* max-age\n\n  当发送的请求包含max-age指令时，判断缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。值为0时，那么缓存服务器会将请求转发给源服务器。\n\n  当返回的响应包含max-age指令时，缓存服务器不再对资源的有效性进行确认，max-age代表资源保存为缓存的最长时间。\n\n  HTTP/1.1遇到同时存在Expries字段时，优先处理max-age。HTTP/1.0则相反。\n\n* s-maxage(仅为响应指令)\n\n  与max-age的唯一区别是,s-maxage仅仅应用于共享缓存。而不引用于用户代理的本地缓存,等针对单用户的缓存。另外,s-maxage的优先级要高于max-age和Expries。\n* min-frassh(仅为请求指令)\n\n  要求缓存服务器返回至少还未过指定时间的缓存资源。\n* max-stale\n\n  指示缓存资源，过期也照样接收或返回。\n  指定数值，即使过期，在指定数值之内，依然接收或返回。\n* only-if-cached(仅为请求指令)\n\n  表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。若请求缓存服务器的本地缓存无响应则返回状态码504。\n* must-revalidate(仅为响应指令)\n\n  指明代理服务器会向源服务器验证即将返回的响应缓存目前是否有效。\n\n  若无法连通源服务器，返回504。\n\n  在该指令存在的条件下，忽略max-stale指令。\n* proxy-revalidate(仅为请求指令)\n\n  要求代理服务器在接收到具有该指令的请求返回响应之前，必须再次验证资源的有效性。\n* no-transform\n\n  要求缓存不能改变实体资源的媒体类型，可防止缓存或代理压缩图片等操作。\n* cache-extension token\n\n  通过cache-extension标记（token），可以扩展Cache-Control首部字段的指令。\n\n  extension token仅对能理解它的缓存服务器来说是有意义的，不能理解则忽略。\n#### Connection\n  * 控制不再转发给代理的首部字段\n  * 管理持久连接\n\n  HTTP/1.1默认连接都是持久连接。客户端会在持久连接上连续发送请求。当服务端想明确断开连接时，则指定Connection首部字段的值为close。\n\n  HTTP/1.1之前的HTTP版本的默认连接是非持久化连接，为此，要在旧的协议版本维持持续连接需要指定Connection为keep-alive。\n#### Date\n表明创建HTTP报文的日期和时间\n#### Pragma\nHTTP/1.1之前版本的遗留字段，仅作为和HTTP/1.0向后兼容而定义。\n\n只用在客户端发送的请求中，要求所以的中间服务器不返回缓存的资源。\n\n为了兼容HTTP/1.1及其之前的版本，发送的请求会同时包含两个字段\n````http\nCache-Control: no-cache\nPragma: no-cache\n````\n#### Trailer\nTrailer会事先说明在报文主体后记录了哪些首部字段，也用于分块编码传输。\n#### Transfer-Encoding\nTransfer-Encoding规定传输报文主体时采用的编码方式。\n#### Upgrade\nUpgrade用于检测HTTP协议及其他协议是否可使用更高的版本进行通信。\n#### Via\n追踪客户端和服务器之间的请求和响应报文的传输路径，避免请求回环的发生。\n\n报文经过代理和网关时，会先在首部字段Via中附加该服务器的信息，再进行转发。\n#### Warning\n该首部通常会告知用户一些缓存相关问题的警告。\n### 请求首部字段\n#### Accept\n用于通知服务器，用户代理可以处理的媒体类型及媒体类型的相对优先级。\n\n增加优先级，使用q=来表示权重的值。范围为0~1.0,1为最大，默认为1。\n#### Accept-Charset\n通知服务器用户代理支持的字符集和字符集的相对优先顺序。权重设置方式与Accept相同。\n#### Accept-Encoding\n告知服务器用户代理支持的内容编码及内容编码的优先顺序。\n#### Accept-Language\n告知服务器用户代理支持的自然语言集及自然语言集的优先顺序。\n#### Authorization\n告知服务器，用户代理的认证信息。\n#### From\n告知服务器使用用户代理的电子邮件地址。\n#### Host\n告知服务器，请求的资源所处的互联网主机名和端口号。\n### If-Match\nIf-xxx的字段称为条件请求，服务器接受到附带条件的请求后，只有判断条件为真时，才会执行请求。\n### If-Modified-Since\n告知服务器若If-Modified-Since字段值早于资源的更新时间，则希望处理该请求。\n\n若再If-Modified-Since字段值的时间之后资源没有更新过，返回304状态码。\n\n获取资源的更新日期，可通过首部字段Last-Modified来确定。\n#### Range\n告知服务器资源的指定范围，服务器返回206 Partial Content的响应。\n#### Referer\n告知服务器请求的原始资源的URI。\n#### User-Agent\nUse-Agent字段会将创建请求的浏览器和用户代理名称等信息传达给服务器。\n### 响应首部字段\n#### Accept-Range\n告知客户端服务器是否能处理范围请求，以指定获取服务端某个部分的资源。\n\n可处理时指定为btyes，反之为none。\n#### Age\n告知客户端源服务器在多久之前创建了响应，单位为秒。\n#### ETag\n告知客户端的实体标示。\n\n服务器会为每份资源分配对应的ETag值。\n#### Location\n可以将响应接收方引导至某个与请求URI位置不同的资源。\n\n几乎所有浏览器在接收到包含Location首部字段的响应后，都会强制性地尝试对已提示的重定向资源的访问。\n#### Proxy-Authenticate\n将由代理服务器所要求的认证信息发送给客户端。\n#### Retry-After\n告知客户端多久之后再次发起请求。\n#### Server\n告知客户端当前服务器上安装的HTTP服务器应用程序的信息。\n#### WWW-Authenticate\n用于HTTP访问认证。\n### 实体首部字段\n#### Allow\n用于通知客户端能够支持的Request-URI指定资源的HTTP方法。当服服务器接受到不支持的HTTP方法时，会以状态码405 Method Not Allowed作为响应返回。\n#### Content-Encoding\n告知客户端服务端对实体的主体部分选用的内容编码方式。\n\n主要采用以下4种编码方式：\n* gzip\n* compress\n* deflate\n* identity\n#### Content-Language\n告知客户端实体主体使用的自然语言。\n#### Content-Length\n表明实体主体部分的大小，单位为字节。\n#### Content-Location\n给出与报文主体部分像对应的URI。\n#### Content-MD5\n客户端对接受的报文主体执行相同的MD5算法，然后与首部字段的Content-MD5字段值进行比较。\n#### Content-Range\n告知客户端作为响应返回的实体的哪个部分符合范围请求。\n#### Content-Type\n说明主体实体内对象的媒体类型。\n#### Expires\n将资源的实效日期告知客户端。\n#### Last-Modified\n指明资源最终修改的时间。\n### 为Cookie服务的首部字段\nCookie的工作机制是用户识别和状态管理。\n#### Set-Cookie\n当服务端开始准备管理客户端的状态时，会事先告知各种信息。\n\n|属性|说明|\n|:--|:--|\n|NAME=VALUE|赋予Cookie的名称及其值（必需项）|\n|expires=DATE|Cookie的有效期（若不指定则到浏览器关闭时为止，维持会话（Session）的时间段内）|\n|path=PATH|将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）|\n|domain=域名|作为Cookie适用对象的域名（若不指定则为创建Cookie的服务器的域名）|\n|Secure|仅在https安全通信时才会发送Cookie|\n|HttpOnly|加以限制，使Cookie不能被JavaScript脚本访问|\n#### Cookie\n告知服务器，当客户端想获得HTTP状态管理的支持时，就会在请求中包含从服务器接收到的Cookie。\n### 其他首部字段\n#### X-Frame-Options\n属于HTTP响应首部，用于控制网站内容在其他Web站点的Frame标签的显示问题。\n\n字段值：\n* DENY 拒绝\n* SAMEORIGIN 仅同源域名下的页面匹配时许可\n#### X-XSS-Protection\n属于HTTP响应首部，用于控制浏览器XSS防护机制的开关。\n字段值：\n* 0 将XSS过滤设置为无效状态\n* 1 将XSS过滤设置为有效状态\n#### DNT\n属于HTTP请求首部，全称为Do not Track，意味拒绝个人信息被收集，是表示拒绝精准广告定位的一种方法。\n* 0 同意被追踪\n* 1 拒绝被追踪\n#### P3P\n属于HTTP响应首部，利用P3P技术，让Web网站上的个人隐私变成一种仅供程序可理解的形式，已达到保护用户隐私的目的。\n","source":"_posts/《图解http》第六章笔记.md","raw":"---\ntitle: 《图解http》第六章笔记\ndate: 2017-10-20\ntags: ['http']\ncategories: ['笔记']\n---\n## http 报文首部\n\nHTTP报文首部起到传递额外重要信息的作用。\n\nHTTP请求报文首部由方法、URI、HTTP版本、请求首部字段、通用首部字段、实体首部字段构成。\n\nHTTP响应报文首部由HTTP版本、状态码、响应首部字段、通用首部字段、实体首部字段构成。\n### http 首部字段的四种类型\nHTTP首部字段根据实际用途被分为以下四类：\n* 通用首部字段（General Header Fields）\n\n  请求报文和响应报文都会使用的首部\n* 请求首部字段（Requset Header Fields）\n\n  从客户端向服务端发送请求报文时使用的首部。\n* 响应首部字段（Response Header Fields）\n\n  从服务端向客户端返回响应报文时使用的首部。\n* 实体首部字段（Entity Header Fields）\n\n  针对请求报文和响应报文的实体部分使用的首部。\n### End-to-end 首部和Hop-by-hop 首部\nHTTP首部字段将定义成缓存代理和非缓存代理的行为。\n\n* 端到端首部\n\n  分在此类别的首部会转发给请求/响应对应的最终接收目标，且必须保存在由缓存生成的响应中。另外规定他必须被转发。\n* 逐跳首部\n\n  分在此类别的首部只对单次转发有效，会因通过缓存或代理而不再转发。\n### 通用首部字段\n#### Cache-Control\n* public指令(仅为响应指令)\n\n  表明其他用户也可利用缓存。\n* private指令(仅为响应指令)\n\n  响应只以特定的用户作为对象，对应其他用户发送过来的请求，代理服务器不会返回缓存。\n* no-cache\n\n  位于请求首部：表明客户端不接受缓存过的响应，“中间”的缓存服务器必须把客户端的请求转发给源服务器。\n\n  位于响应首部：响应中包含no-chche指令，则缓存服务器不对资源进行缓存。\n* no-store\n\n  规定缓存不能在本地存储请求或响应的任一部分。\n* max-age\n\n  当发送的请求包含max-age指令时，判断缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。值为0时，那么缓存服务器会将请求转发给源服务器。\n\n  当返回的响应包含max-age指令时，缓存服务器不再对资源的有效性进行确认，max-age代表资源保存为缓存的最长时间。\n\n  HTTP/1.1遇到同时存在Expries字段时，优先处理max-age。HTTP/1.0则相反。\n\n* s-maxage(仅为响应指令)\n\n  与max-age的唯一区别是,s-maxage仅仅应用于共享缓存。而不引用于用户代理的本地缓存,等针对单用户的缓存。另外,s-maxage的优先级要高于max-age和Expries。\n* min-frassh(仅为请求指令)\n\n  要求缓存服务器返回至少还未过指定时间的缓存资源。\n* max-stale\n\n  指示缓存资源，过期也照样接收或返回。\n  指定数值，即使过期，在指定数值之内，依然接收或返回。\n* only-if-cached(仅为请求指令)\n\n  表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。若请求缓存服务器的本地缓存无响应则返回状态码504。\n* must-revalidate(仅为响应指令)\n\n  指明代理服务器会向源服务器验证即将返回的响应缓存目前是否有效。\n\n  若无法连通源服务器，返回504。\n\n  在该指令存在的条件下，忽略max-stale指令。\n* proxy-revalidate(仅为请求指令)\n\n  要求代理服务器在接收到具有该指令的请求返回响应之前，必须再次验证资源的有效性。\n* no-transform\n\n  要求缓存不能改变实体资源的媒体类型，可防止缓存或代理压缩图片等操作。\n* cache-extension token\n\n  通过cache-extension标记（token），可以扩展Cache-Control首部字段的指令。\n\n  extension token仅对能理解它的缓存服务器来说是有意义的，不能理解则忽略。\n#### Connection\n  * 控制不再转发给代理的首部字段\n  * 管理持久连接\n\n  HTTP/1.1默认连接都是持久连接。客户端会在持久连接上连续发送请求。当服务端想明确断开连接时，则指定Connection首部字段的值为close。\n\n  HTTP/1.1之前的HTTP版本的默认连接是非持久化连接，为此，要在旧的协议版本维持持续连接需要指定Connection为keep-alive。\n#### Date\n表明创建HTTP报文的日期和时间\n#### Pragma\nHTTP/1.1之前版本的遗留字段，仅作为和HTTP/1.0向后兼容而定义。\n\n只用在客户端发送的请求中，要求所以的中间服务器不返回缓存的资源。\n\n为了兼容HTTP/1.1及其之前的版本，发送的请求会同时包含两个字段\n````http\nCache-Control: no-cache\nPragma: no-cache\n````\n#### Trailer\nTrailer会事先说明在报文主体后记录了哪些首部字段，也用于分块编码传输。\n#### Transfer-Encoding\nTransfer-Encoding规定传输报文主体时采用的编码方式。\n#### Upgrade\nUpgrade用于检测HTTP协议及其他协议是否可使用更高的版本进行通信。\n#### Via\n追踪客户端和服务器之间的请求和响应报文的传输路径，避免请求回环的发生。\n\n报文经过代理和网关时，会先在首部字段Via中附加该服务器的信息，再进行转发。\n#### Warning\n该首部通常会告知用户一些缓存相关问题的警告。\n### 请求首部字段\n#### Accept\n用于通知服务器，用户代理可以处理的媒体类型及媒体类型的相对优先级。\n\n增加优先级，使用q=来表示权重的值。范围为0~1.0,1为最大，默认为1。\n#### Accept-Charset\n通知服务器用户代理支持的字符集和字符集的相对优先顺序。权重设置方式与Accept相同。\n#### Accept-Encoding\n告知服务器用户代理支持的内容编码及内容编码的优先顺序。\n#### Accept-Language\n告知服务器用户代理支持的自然语言集及自然语言集的优先顺序。\n#### Authorization\n告知服务器，用户代理的认证信息。\n#### From\n告知服务器使用用户代理的电子邮件地址。\n#### Host\n告知服务器，请求的资源所处的互联网主机名和端口号。\n### If-Match\nIf-xxx的字段称为条件请求，服务器接受到附带条件的请求后，只有判断条件为真时，才会执行请求。\n### If-Modified-Since\n告知服务器若If-Modified-Since字段值早于资源的更新时间，则希望处理该请求。\n\n若再If-Modified-Since字段值的时间之后资源没有更新过，返回304状态码。\n\n获取资源的更新日期，可通过首部字段Last-Modified来确定。\n#### Range\n告知服务器资源的指定范围，服务器返回206 Partial Content的响应。\n#### Referer\n告知服务器请求的原始资源的URI。\n#### User-Agent\nUse-Agent字段会将创建请求的浏览器和用户代理名称等信息传达给服务器。\n### 响应首部字段\n#### Accept-Range\n告知客户端服务器是否能处理范围请求，以指定获取服务端某个部分的资源。\n\n可处理时指定为btyes，反之为none。\n#### Age\n告知客户端源服务器在多久之前创建了响应，单位为秒。\n#### ETag\n告知客户端的实体标示。\n\n服务器会为每份资源分配对应的ETag值。\n#### Location\n可以将响应接收方引导至某个与请求URI位置不同的资源。\n\n几乎所有浏览器在接收到包含Location首部字段的响应后，都会强制性地尝试对已提示的重定向资源的访问。\n#### Proxy-Authenticate\n将由代理服务器所要求的认证信息发送给客户端。\n#### Retry-After\n告知客户端多久之后再次发起请求。\n#### Server\n告知客户端当前服务器上安装的HTTP服务器应用程序的信息。\n#### WWW-Authenticate\n用于HTTP访问认证。\n### 实体首部字段\n#### Allow\n用于通知客户端能够支持的Request-URI指定资源的HTTP方法。当服服务器接受到不支持的HTTP方法时，会以状态码405 Method Not Allowed作为响应返回。\n#### Content-Encoding\n告知客户端服务端对实体的主体部分选用的内容编码方式。\n\n主要采用以下4种编码方式：\n* gzip\n* compress\n* deflate\n* identity\n#### Content-Language\n告知客户端实体主体使用的自然语言。\n#### Content-Length\n表明实体主体部分的大小，单位为字节。\n#### Content-Location\n给出与报文主体部分像对应的URI。\n#### Content-MD5\n客户端对接受的报文主体执行相同的MD5算法，然后与首部字段的Content-MD5字段值进行比较。\n#### Content-Range\n告知客户端作为响应返回的实体的哪个部分符合范围请求。\n#### Content-Type\n说明主体实体内对象的媒体类型。\n#### Expires\n将资源的实效日期告知客户端。\n#### Last-Modified\n指明资源最终修改的时间。\n### 为Cookie服务的首部字段\nCookie的工作机制是用户识别和状态管理。\n#### Set-Cookie\n当服务端开始准备管理客户端的状态时，会事先告知各种信息。\n\n|属性|说明|\n|:--|:--|\n|NAME=VALUE|赋予Cookie的名称及其值（必需项）|\n|expires=DATE|Cookie的有效期（若不指定则到浏览器关闭时为止，维持会话（Session）的时间段内）|\n|path=PATH|将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）|\n|domain=域名|作为Cookie适用对象的域名（若不指定则为创建Cookie的服务器的域名）|\n|Secure|仅在https安全通信时才会发送Cookie|\n|HttpOnly|加以限制，使Cookie不能被JavaScript脚本访问|\n#### Cookie\n告知服务器，当客户端想获得HTTP状态管理的支持时，就会在请求中包含从服务器接收到的Cookie。\n### 其他首部字段\n#### X-Frame-Options\n属于HTTP响应首部，用于控制网站内容在其他Web站点的Frame标签的显示问题。\n\n字段值：\n* DENY 拒绝\n* SAMEORIGIN 仅同源域名下的页面匹配时许可\n#### X-XSS-Protection\n属于HTTP响应首部，用于控制浏览器XSS防护机制的开关。\n字段值：\n* 0 将XSS过滤设置为无效状态\n* 1 将XSS过滤设置为有效状态\n#### DNT\n属于HTTP请求首部，全称为Do not Track，意味拒绝个人信息被收集，是表示拒绝精准广告定位的一种方法。\n* 0 同意被追踪\n* 1 拒绝被追踪\n#### P3P\n属于HTTP响应首部，利用P3P技术，让Web网站上的个人隐私变成一种仅供程序可理解的形式，已达到保护用户隐私的目的。\n","slug":"《图解http》第六章笔记","published":1,"updated":"2017-10-25T14:13:55.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cl000vf4b4orsv0638","content":"<h2 id=\"http-报文首部\"><a href=\"#http-报文首部\" class=\"headerlink\" title=\"http 报文首部\"></a>http 报文首部</h2><p>HTTP报文首部起到传递额外重要信息的作用。</p>\n<p>HTTP请求报文首部由方法、URI、HTTP版本、请求首部字段、通用首部字段、实体首部字段构成。</p>\n<p>HTTP响应报文首部由HTTP版本、状态码、响应首部字段、通用首部字段、实体首部字段构成。</p>\n<h3 id=\"http-首部字段的四种类型\"><a href=\"#http-首部字段的四种类型\" class=\"headerlink\" title=\"http 首部字段的四种类型\"></a>http 首部字段的四种类型</h3><p>HTTP首部字段根据实际用途被分为以下四类：</p>\n<ul>\n<li><p>通用首部字段（General Header Fields）</p>\n<p>请求报文和响应报文都会使用的首部</p>\n</li>\n<li><p>请求首部字段（Requset Header Fields）</p>\n<p>从客户端向服务端发送请求报文时使用的首部。</p>\n</li>\n<li><p>响应首部字段（Response Header Fields）</p>\n<p>从服务端向客户端返回响应报文时使用的首部。</p>\n</li>\n<li><p>实体首部字段（Entity Header Fields）</p>\n<p>针对请求报文和响应报文的实体部分使用的首部。</p>\n<h3 id=\"End-to-end-首部和Hop-by-hop-首部\"><a href=\"#End-to-end-首部和Hop-by-hop-首部\" class=\"headerlink\" title=\"End-to-end 首部和Hop-by-hop 首部\"></a>End-to-end 首部和Hop-by-hop 首部</h3><p>HTTP首部字段将定义成缓存代理和非缓存代理的行为。</p>\n</li>\n<li><p>端到端首部</p>\n<p>分在此类别的首部会转发给请求/响应对应的最终接收目标，且必须保存在由缓存生成的响应中。另外规定他必须被转发。</p>\n</li>\n<li><p>逐跳首部</p>\n<p>分在此类别的首部只对单次转发有效，会因通过缓存或代理而不再转发。</p>\n<h3 id=\"通用首部字段\"><a href=\"#通用首部字段\" class=\"headerlink\" title=\"通用首部字段\"></a>通用首部字段</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4></li>\n<li><p>public指令(仅为响应指令)</p>\n<p>表明其他用户也可利用缓存。</p>\n</li>\n<li><p>private指令(仅为响应指令)</p>\n<p>响应只以特定的用户作为对象，对应其他用户发送过来的请求，代理服务器不会返回缓存。</p>\n</li>\n<li><p>no-cache</p>\n<p>位于请求首部：表明客户端不接受缓存过的响应，“中间”的缓存服务器必须把客户端的请求转发给源服务器。</p>\n<p>位于响应首部：响应中包含no-chche指令，则缓存服务器不对资源进行缓存。</p>\n</li>\n<li><p>no-store</p>\n<p>规定缓存不能在本地存储请求或响应的任一部分。</p>\n</li>\n<li><p>max-age</p>\n<p>当发送的请求包含max-age指令时，判断缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。值为0时，那么缓存服务器会将请求转发给源服务器。</p>\n<p>当返回的响应包含max-age指令时，缓存服务器不再对资源的有效性进行确认，max-age代表资源保存为缓存的最长时间。</p>\n<p>HTTP/1.1遇到同时存在Expries字段时，优先处理max-age。HTTP/1.0则相反。</p>\n</li>\n<li><p>s-maxage(仅为响应指令)</p>\n<p>与max-age的唯一区别是,s-maxage仅仅应用于共享缓存。而不引用于用户代理的本地缓存,等针对单用户的缓存。另外,s-maxage的优先级要高于max-age和Expries。</p>\n</li>\n<li><p>min-frassh(仅为请求指令)</p>\n<p>要求缓存服务器返回至少还未过指定时间的缓存资源。</p>\n</li>\n<li><p>max-stale</p>\n<p>指示缓存资源，过期也照样接收或返回。<br>指定数值，即使过期，在指定数值之内，依然接收或返回。</p>\n</li>\n<li><p>only-if-cached(仅为请求指令)</p>\n<p>表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。若请求缓存服务器的本地缓存无响应则返回状态码504。</p>\n</li>\n<li><p>must-revalidate(仅为响应指令)</p>\n<p>指明代理服务器会向源服务器验证即将返回的响应缓存目前是否有效。</p>\n<p>若无法连通源服务器，返回504。</p>\n<p>在该指令存在的条件下，忽略max-stale指令。</p>\n</li>\n<li><p>proxy-revalidate(仅为请求指令)</p>\n<p>要求代理服务器在接收到具有该指令的请求返回响应之前，必须再次验证资源的有效性。</p>\n</li>\n<li><p>no-transform</p>\n<p>要求缓存不能改变实体资源的媒体类型，可防止缓存或代理压缩图片等操作。</p>\n</li>\n<li><p>cache-extension token</p>\n<p>通过cache-extension标记（token），可以扩展Cache-Control首部字段的指令。</p>\n<p>extension token仅对能理解它的缓存服务器来说是有意义的，不能理解则忽略。</p>\n<h4 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h4><ul>\n<li>控制不再转发给代理的首部字段</li>\n<li>管理持久连接</li>\n</ul>\n<p>HTTP/1.1默认连接都是持久连接。客户端会在持久连接上连续发送请求。当服务端想明确断开连接时，则指定Connection首部字段的值为close。</p>\n<p>HTTP/1.1之前的HTTP版本的默认连接是非持久化连接，为此，要在旧的协议版本维持持续连接需要指定Connection为keep-alive。</p>\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><p>表明创建HTTP报文的日期和时间</p>\n<h4 id=\"Pragma\"><a href=\"#Pragma\" class=\"headerlink\" title=\"Pragma\"></a>Pragma</h4><p>HTTP/1.1之前版本的遗留字段，仅作为和HTTP/1.0向后兼容而定义。</p>\n</li>\n</ul>\n<p>只用在客户端发送的请求中，要求所以的中间服务器不返回缓存的资源。</p>\n<p>为了兼容HTTP/1.1及其之前的版本，发送的请求会同时包含两个字段<br><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache</div><div class=\"line\"><span class=\"attribute\">Pragma</span>: no-cache</div></pre></td></tr></table></figure></p>\n<h4 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h4><p>Trailer会事先说明在报文主体后记录了哪些首部字段，也用于分块编码传输。</p>\n<h4 id=\"Transfer-Encoding\"><a href=\"#Transfer-Encoding\" class=\"headerlink\" title=\"Transfer-Encoding\"></a>Transfer-Encoding</h4><p>Transfer-Encoding规定传输报文主体时采用的编码方式。</p>\n<h4 id=\"Upgrade\"><a href=\"#Upgrade\" class=\"headerlink\" title=\"Upgrade\"></a>Upgrade</h4><p>Upgrade用于检测HTTP协议及其他协议是否可使用更高的版本进行通信。</p>\n<h4 id=\"Via\"><a href=\"#Via\" class=\"headerlink\" title=\"Via\"></a>Via</h4><p>追踪客户端和服务器之间的请求和响应报文的传输路径，避免请求回环的发生。</p>\n<p>报文经过代理和网关时，会先在首部字段Via中附加该服务器的信息，再进行转发。</p>\n<h4 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h4><p>该首部通常会告知用户一些缓存相关问题的警告。</p>\n<h3 id=\"请求首部字段\"><a href=\"#请求首部字段\" class=\"headerlink\" title=\"请求首部字段\"></a>请求首部字段</h3><h4 id=\"Accept\"><a href=\"#Accept\" class=\"headerlink\" title=\"Accept\"></a>Accept</h4><p>用于通知服务器，用户代理可以处理的媒体类型及媒体类型的相对优先级。</p>\n<p>增加优先级，使用q=来表示权重的值。范围为0~1.0,1为最大，默认为1。</p>\n<h4 id=\"Accept-Charset\"><a href=\"#Accept-Charset\" class=\"headerlink\" title=\"Accept-Charset\"></a>Accept-Charset</h4><p>通知服务器用户代理支持的字符集和字符集的相对优先顺序。权重设置方式与Accept相同。</p>\n<h4 id=\"Accept-Encoding\"><a href=\"#Accept-Encoding\" class=\"headerlink\" title=\"Accept-Encoding\"></a>Accept-Encoding</h4><p>告知服务器用户代理支持的内容编码及内容编码的优先顺序。</p>\n<h4 id=\"Accept-Language\"><a href=\"#Accept-Language\" class=\"headerlink\" title=\"Accept-Language\"></a>Accept-Language</h4><p>告知服务器用户代理支持的自然语言集及自然语言集的优先顺序。</p>\n<h4 id=\"Authorization\"><a href=\"#Authorization\" class=\"headerlink\" title=\"Authorization\"></a>Authorization</h4><p>告知服务器，用户代理的认证信息。</p>\n<h4 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h4><p>告知服务器使用用户代理的电子邮件地址。</p>\n<h4 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h4><p>告知服务器，请求的资源所处的互联网主机名和端口号。</p>\n<h3 id=\"If-Match\"><a href=\"#If-Match\" class=\"headerlink\" title=\"If-Match\"></a>If-Match</h3><p>If-xxx的字段称为条件请求，服务器接受到附带条件的请求后，只有判断条件为真时，才会执行请求。</p>\n<h3 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h3><p>告知服务器若If-Modified-Since字段值早于资源的更新时间，则希望处理该请求。</p>\n<p>若再If-Modified-Since字段值的时间之后资源没有更新过，返回304状态码。</p>\n<p>获取资源的更新日期，可通过首部字段Last-Modified来确定。</p>\n<h4 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h4><p>告知服务器资源的指定范围，服务器返回206 Partial Content的响应。</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><p>告知服务器请求的原始资源的URI。</p>\n<h4 id=\"User-Agent\"><a href=\"#User-Agent\" class=\"headerlink\" title=\"User-Agent\"></a>User-Agent</h4><p>Use-Agent字段会将创建请求的浏览器和用户代理名称等信息传达给服务器。</p>\n<h3 id=\"响应首部字段\"><a href=\"#响应首部字段\" class=\"headerlink\" title=\"响应首部字段\"></a>响应首部字段</h3><h4 id=\"Accept-Range\"><a href=\"#Accept-Range\" class=\"headerlink\" title=\"Accept-Range\"></a>Accept-Range</h4><p>告知客户端服务器是否能处理范围请求，以指定获取服务端某个部分的资源。</p>\n<p>可处理时指定为btyes，反之为none。</p>\n<h4 id=\"Age\"><a href=\"#Age\" class=\"headerlink\" title=\"Age\"></a>Age</h4><p>告知客户端源服务器在多久之前创建了响应，单位为秒。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><p>告知客户端的实体标示。</p>\n<p>服务器会为每份资源分配对应的ETag值。</p>\n<h4 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h4><p>可以将响应接收方引导至某个与请求URI位置不同的资源。</p>\n<p>几乎所有浏览器在接收到包含Location首部字段的响应后，都会强制性地尝试对已提示的重定向资源的访问。</p>\n<h4 id=\"Proxy-Authenticate\"><a href=\"#Proxy-Authenticate\" class=\"headerlink\" title=\"Proxy-Authenticate\"></a>Proxy-Authenticate</h4><p>将由代理服务器所要求的认证信息发送给客户端。</p>\n<h4 id=\"Retry-After\"><a href=\"#Retry-After\" class=\"headerlink\" title=\"Retry-After\"></a>Retry-After</h4><p>告知客户端多久之后再次发起请求。</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>告知客户端当前服务器上安装的HTTP服务器应用程序的信息。</p>\n<h4 id=\"WWW-Authenticate\"><a href=\"#WWW-Authenticate\" class=\"headerlink\" title=\"WWW-Authenticate\"></a>WWW-Authenticate</h4><p>用于HTTP访问认证。</p>\n<h3 id=\"实体首部字段\"><a href=\"#实体首部字段\" class=\"headerlink\" title=\"实体首部字段\"></a>实体首部字段</h3><h4 id=\"Allow\"><a href=\"#Allow\" class=\"headerlink\" title=\"Allow\"></a>Allow</h4><p>用于通知客户端能够支持的Request-URI指定资源的HTTP方法。当服服务器接受到不支持的HTTP方法时，会以状态码405 Method Not Allowed作为响应返回。</p>\n<h4 id=\"Content-Encoding\"><a href=\"#Content-Encoding\" class=\"headerlink\" title=\"Content-Encoding\"></a>Content-Encoding</h4><p>告知客户端服务端对实体的主体部分选用的内容编码方式。</p>\n<p>主要采用以下4种编码方式：</p>\n<ul>\n<li>gzip</li>\n<li>compress</li>\n<li>deflate</li>\n<li>identity<h4 id=\"Content-Language\"><a href=\"#Content-Language\" class=\"headerlink\" title=\"Content-Language\"></a>Content-Language</h4>告知客户端实体主体使用的自然语言。<h4 id=\"Content-Length\"><a href=\"#Content-Length\" class=\"headerlink\" title=\"Content-Length\"></a>Content-Length</h4>表明实体主体部分的大小，单位为字节。<h4 id=\"Content-Location\"><a href=\"#Content-Location\" class=\"headerlink\" title=\"Content-Location\"></a>Content-Location</h4>给出与报文主体部分像对应的URI。<h4 id=\"Content-MD5\"><a href=\"#Content-MD5\" class=\"headerlink\" title=\"Content-MD5\"></a>Content-MD5</h4>客户端对接受的报文主体执行相同的MD5算法，然后与首部字段的Content-MD5字段值进行比较。<h4 id=\"Content-Range\"><a href=\"#Content-Range\" class=\"headerlink\" title=\"Content-Range\"></a>Content-Range</h4>告知客户端作为响应返回的实体的哪个部分符合范围请求。<h4 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h4>说明主体实体内对象的媒体类型。<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4>将资源的实效日期告知客户端。<h4 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h4>指明资源最终修改的时间。<h3 id=\"为Cookie服务的首部字段\"><a href=\"#为Cookie服务的首部字段\" class=\"headerlink\" title=\"为Cookie服务的首部字段\"></a>为Cookie服务的首部字段</h3>Cookie的工作机制是用户识别和状态管理。<h4 id=\"Set-Cookie\"><a href=\"#Set-Cookie\" class=\"headerlink\" title=\"Set-Cookie\"></a>Set-Cookie</h4>当服务端开始准备管理客户端的状态时，会事先告知各种信息。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NAME=VALUE</td>\n<td style=\"text-align:left\">赋予Cookie的名称及其值（必需项）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">expires=DATE</td>\n<td style=\"text-align:left\">Cookie的有效期（若不指定则到浏览器关闭时为止，维持会话（Session）的时间段内）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">path=PATH</td>\n<td style=\"text-align:left\">将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">domain=域名</td>\n<td style=\"text-align:left\">作为Cookie适用对象的域名（若不指定则为创建Cookie的服务器的域名）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Secure</td>\n<td style=\"text-align:left\">仅在https安全通信时才会发送Cookie</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HttpOnly</td>\n<td style=\"text-align:left\">加以限制，使Cookie不能被JavaScript脚本访问</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>告知服务器，当客户端想获得HTTP状态管理的支持时，就会在请求中包含从服务器接收到的Cookie。</p>\n<h3 id=\"其他首部字段\"><a href=\"#其他首部字段\" class=\"headerlink\" title=\"其他首部字段\"></a>其他首部字段</h3><h4 id=\"X-Frame-Options\"><a href=\"#X-Frame-Options\" class=\"headerlink\" title=\"X-Frame-Options\"></a>X-Frame-Options</h4><p>属于HTTP响应首部，用于控制网站内容在其他Web站点的Frame标签的显示问题。</p>\n<p>字段值：</p>\n<ul>\n<li>DENY 拒绝</li>\n<li>SAMEORIGIN 仅同源域名下的页面匹配时许可<h4 id=\"X-XSS-Protection\"><a href=\"#X-XSS-Protection\" class=\"headerlink\" title=\"X-XSS-Protection\"></a>X-XSS-Protection</h4>属于HTTP响应首部，用于控制浏览器XSS防护机制的开关。<br>字段值：</li>\n<li>0 将XSS过滤设置为无效状态</li>\n<li>1 将XSS过滤设置为有效状态<h4 id=\"DNT\"><a href=\"#DNT\" class=\"headerlink\" title=\"DNT\"></a>DNT</h4>属于HTTP请求首部，全称为Do not Track，意味拒绝个人信息被收集，是表示拒绝精准广告定位的一种方法。</li>\n<li>0 同意被追踪</li>\n<li>1 拒绝被追踪<h4 id=\"P3P\"><a href=\"#P3P\" class=\"headerlink\" title=\"P3P\"></a>P3P</h4>属于HTTP响应首部，利用P3P技术，让Web网站上的个人隐私变成一种仅供程序可理解的形式，已达到保护用户隐私的目的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"http-报文首部\"><a href=\"#http-报文首部\" class=\"headerlink\" title=\"http 报文首部\"></a>http 报文首部</h2><p>HTTP报文首部起到传递额外重要信息的作用。</p>\n<p>HTTP请求报文首部由方法、URI、HTTP版本、请求首部字段、通用首部字段、实体首部字段构成。</p>\n<p>HTTP响应报文首部由HTTP版本、状态码、响应首部字段、通用首部字段、实体首部字段构成。</p>\n<h3 id=\"http-首部字段的四种类型\"><a href=\"#http-首部字段的四种类型\" class=\"headerlink\" title=\"http 首部字段的四种类型\"></a>http 首部字段的四种类型</h3><p>HTTP首部字段根据实际用途被分为以下四类：</p>\n<ul>\n<li><p>通用首部字段（General Header Fields）</p>\n<p>请求报文和响应报文都会使用的首部</p>\n</li>\n<li><p>请求首部字段（Requset Header Fields）</p>\n<p>从客户端向服务端发送请求报文时使用的首部。</p>\n</li>\n<li><p>响应首部字段（Response Header Fields）</p>\n<p>从服务端向客户端返回响应报文时使用的首部。</p>\n</li>\n<li><p>实体首部字段（Entity Header Fields）</p>\n<p>针对请求报文和响应报文的实体部分使用的首部。</p>\n<h3 id=\"End-to-end-首部和Hop-by-hop-首部\"><a href=\"#End-to-end-首部和Hop-by-hop-首部\" class=\"headerlink\" title=\"End-to-end 首部和Hop-by-hop 首部\"></a>End-to-end 首部和Hop-by-hop 首部</h3><p>HTTP首部字段将定义成缓存代理和非缓存代理的行为。</p>\n</li>\n<li><p>端到端首部</p>\n<p>分在此类别的首部会转发给请求/响应对应的最终接收目标，且必须保存在由缓存生成的响应中。另外规定他必须被转发。</p>\n</li>\n<li><p>逐跳首部</p>\n<p>分在此类别的首部只对单次转发有效，会因通过缓存或代理而不再转发。</p>\n<h3 id=\"通用首部字段\"><a href=\"#通用首部字段\" class=\"headerlink\" title=\"通用首部字段\"></a>通用首部字段</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4></li>\n<li><p>public指令(仅为响应指令)</p>\n<p>表明其他用户也可利用缓存。</p>\n</li>\n<li><p>private指令(仅为响应指令)</p>\n<p>响应只以特定的用户作为对象，对应其他用户发送过来的请求，代理服务器不会返回缓存。</p>\n</li>\n<li><p>no-cache</p>\n<p>位于请求首部：表明客户端不接受缓存过的响应，“中间”的缓存服务器必须把客户端的请求转发给源服务器。</p>\n<p>位于响应首部：响应中包含no-chche指令，则缓存服务器不对资源进行缓存。</p>\n</li>\n<li><p>no-store</p>\n<p>规定缓存不能在本地存储请求或响应的任一部分。</p>\n</li>\n<li><p>max-age</p>\n<p>当发送的请求包含max-age指令时，判断缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。值为0时，那么缓存服务器会将请求转发给源服务器。</p>\n<p>当返回的响应包含max-age指令时，缓存服务器不再对资源的有效性进行确认，max-age代表资源保存为缓存的最长时间。</p>\n<p>HTTP/1.1遇到同时存在Expries字段时，优先处理max-age。HTTP/1.0则相反。</p>\n</li>\n<li><p>s-maxage(仅为响应指令)</p>\n<p>与max-age的唯一区别是,s-maxage仅仅应用于共享缓存。而不引用于用户代理的本地缓存,等针对单用户的缓存。另外,s-maxage的优先级要高于max-age和Expries。</p>\n</li>\n<li><p>min-frassh(仅为请求指令)</p>\n<p>要求缓存服务器返回至少还未过指定时间的缓存资源。</p>\n</li>\n<li><p>max-stale</p>\n<p>指示缓存资源，过期也照样接收或返回。<br>指定数值，即使过期，在指定数值之内，依然接收或返回。</p>\n</li>\n<li><p>only-if-cached(仅为请求指令)</p>\n<p>表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。若请求缓存服务器的本地缓存无响应则返回状态码504。</p>\n</li>\n<li><p>must-revalidate(仅为响应指令)</p>\n<p>指明代理服务器会向源服务器验证即将返回的响应缓存目前是否有效。</p>\n<p>若无法连通源服务器，返回504。</p>\n<p>在该指令存在的条件下，忽略max-stale指令。</p>\n</li>\n<li><p>proxy-revalidate(仅为请求指令)</p>\n<p>要求代理服务器在接收到具有该指令的请求返回响应之前，必须再次验证资源的有效性。</p>\n</li>\n<li><p>no-transform</p>\n<p>要求缓存不能改变实体资源的媒体类型，可防止缓存或代理压缩图片等操作。</p>\n</li>\n<li><p>cache-extension token</p>\n<p>通过cache-extension标记（token），可以扩展Cache-Control首部字段的指令。</p>\n<p>extension token仅对能理解它的缓存服务器来说是有意义的，不能理解则忽略。</p>\n<h4 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h4><ul>\n<li>控制不再转发给代理的首部字段</li>\n<li>管理持久连接</li>\n</ul>\n<p>HTTP/1.1默认连接都是持久连接。客户端会在持久连接上连续发送请求。当服务端想明确断开连接时，则指定Connection首部字段的值为close。</p>\n<p>HTTP/1.1之前的HTTP版本的默认连接是非持久化连接，为此，要在旧的协议版本维持持续连接需要指定Connection为keep-alive。</p>\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><p>表明创建HTTP报文的日期和时间</p>\n<h4 id=\"Pragma\"><a href=\"#Pragma\" class=\"headerlink\" title=\"Pragma\"></a>Pragma</h4><p>HTTP/1.1之前版本的遗留字段，仅作为和HTTP/1.0向后兼容而定义。</p>\n</li>\n</ul>\n<p>只用在客户端发送的请求中，要求所以的中间服务器不返回缓存的资源。</p>\n<p>为了兼容HTTP/1.1及其之前的版本，发送的请求会同时包含两个字段<br><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache</div><div class=\"line\"><span class=\"attribute\">Pragma</span>: no-cache</div></pre></td></tr></table></figure></p>\n<h4 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h4><p>Trailer会事先说明在报文主体后记录了哪些首部字段，也用于分块编码传输。</p>\n<h4 id=\"Transfer-Encoding\"><a href=\"#Transfer-Encoding\" class=\"headerlink\" title=\"Transfer-Encoding\"></a>Transfer-Encoding</h4><p>Transfer-Encoding规定传输报文主体时采用的编码方式。</p>\n<h4 id=\"Upgrade\"><a href=\"#Upgrade\" class=\"headerlink\" title=\"Upgrade\"></a>Upgrade</h4><p>Upgrade用于检测HTTP协议及其他协议是否可使用更高的版本进行通信。</p>\n<h4 id=\"Via\"><a href=\"#Via\" class=\"headerlink\" title=\"Via\"></a>Via</h4><p>追踪客户端和服务器之间的请求和响应报文的传输路径，避免请求回环的发生。</p>\n<p>报文经过代理和网关时，会先在首部字段Via中附加该服务器的信息，再进行转发。</p>\n<h4 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h4><p>该首部通常会告知用户一些缓存相关问题的警告。</p>\n<h3 id=\"请求首部字段\"><a href=\"#请求首部字段\" class=\"headerlink\" title=\"请求首部字段\"></a>请求首部字段</h3><h4 id=\"Accept\"><a href=\"#Accept\" class=\"headerlink\" title=\"Accept\"></a>Accept</h4><p>用于通知服务器，用户代理可以处理的媒体类型及媒体类型的相对优先级。</p>\n<p>增加优先级，使用q=来表示权重的值。范围为0~1.0,1为最大，默认为1。</p>\n<h4 id=\"Accept-Charset\"><a href=\"#Accept-Charset\" class=\"headerlink\" title=\"Accept-Charset\"></a>Accept-Charset</h4><p>通知服务器用户代理支持的字符集和字符集的相对优先顺序。权重设置方式与Accept相同。</p>\n<h4 id=\"Accept-Encoding\"><a href=\"#Accept-Encoding\" class=\"headerlink\" title=\"Accept-Encoding\"></a>Accept-Encoding</h4><p>告知服务器用户代理支持的内容编码及内容编码的优先顺序。</p>\n<h4 id=\"Accept-Language\"><a href=\"#Accept-Language\" class=\"headerlink\" title=\"Accept-Language\"></a>Accept-Language</h4><p>告知服务器用户代理支持的自然语言集及自然语言集的优先顺序。</p>\n<h4 id=\"Authorization\"><a href=\"#Authorization\" class=\"headerlink\" title=\"Authorization\"></a>Authorization</h4><p>告知服务器，用户代理的认证信息。</p>\n<h4 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h4><p>告知服务器使用用户代理的电子邮件地址。</p>\n<h4 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h4><p>告知服务器，请求的资源所处的互联网主机名和端口号。</p>\n<h3 id=\"If-Match\"><a href=\"#If-Match\" class=\"headerlink\" title=\"If-Match\"></a>If-Match</h3><p>If-xxx的字段称为条件请求，服务器接受到附带条件的请求后，只有判断条件为真时，才会执行请求。</p>\n<h3 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h3><p>告知服务器若If-Modified-Since字段值早于资源的更新时间，则希望处理该请求。</p>\n<p>若再If-Modified-Since字段值的时间之后资源没有更新过，返回304状态码。</p>\n<p>获取资源的更新日期，可通过首部字段Last-Modified来确定。</p>\n<h4 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h4><p>告知服务器资源的指定范围，服务器返回206 Partial Content的响应。</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><p>告知服务器请求的原始资源的URI。</p>\n<h4 id=\"User-Agent\"><a href=\"#User-Agent\" class=\"headerlink\" title=\"User-Agent\"></a>User-Agent</h4><p>Use-Agent字段会将创建请求的浏览器和用户代理名称等信息传达给服务器。</p>\n<h3 id=\"响应首部字段\"><a href=\"#响应首部字段\" class=\"headerlink\" title=\"响应首部字段\"></a>响应首部字段</h3><h4 id=\"Accept-Range\"><a href=\"#Accept-Range\" class=\"headerlink\" title=\"Accept-Range\"></a>Accept-Range</h4><p>告知客户端服务器是否能处理范围请求，以指定获取服务端某个部分的资源。</p>\n<p>可处理时指定为btyes，反之为none。</p>\n<h4 id=\"Age\"><a href=\"#Age\" class=\"headerlink\" title=\"Age\"></a>Age</h4><p>告知客户端源服务器在多久之前创建了响应，单位为秒。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><p>告知客户端的实体标示。</p>\n<p>服务器会为每份资源分配对应的ETag值。</p>\n<h4 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h4><p>可以将响应接收方引导至某个与请求URI位置不同的资源。</p>\n<p>几乎所有浏览器在接收到包含Location首部字段的响应后，都会强制性地尝试对已提示的重定向资源的访问。</p>\n<h4 id=\"Proxy-Authenticate\"><a href=\"#Proxy-Authenticate\" class=\"headerlink\" title=\"Proxy-Authenticate\"></a>Proxy-Authenticate</h4><p>将由代理服务器所要求的认证信息发送给客户端。</p>\n<h4 id=\"Retry-After\"><a href=\"#Retry-After\" class=\"headerlink\" title=\"Retry-After\"></a>Retry-After</h4><p>告知客户端多久之后再次发起请求。</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>告知客户端当前服务器上安装的HTTP服务器应用程序的信息。</p>\n<h4 id=\"WWW-Authenticate\"><a href=\"#WWW-Authenticate\" class=\"headerlink\" title=\"WWW-Authenticate\"></a>WWW-Authenticate</h4><p>用于HTTP访问认证。</p>\n<h3 id=\"实体首部字段\"><a href=\"#实体首部字段\" class=\"headerlink\" title=\"实体首部字段\"></a>实体首部字段</h3><h4 id=\"Allow\"><a href=\"#Allow\" class=\"headerlink\" title=\"Allow\"></a>Allow</h4><p>用于通知客户端能够支持的Request-URI指定资源的HTTP方法。当服服务器接受到不支持的HTTP方法时，会以状态码405 Method Not Allowed作为响应返回。</p>\n<h4 id=\"Content-Encoding\"><a href=\"#Content-Encoding\" class=\"headerlink\" title=\"Content-Encoding\"></a>Content-Encoding</h4><p>告知客户端服务端对实体的主体部分选用的内容编码方式。</p>\n<p>主要采用以下4种编码方式：</p>\n<ul>\n<li>gzip</li>\n<li>compress</li>\n<li>deflate</li>\n<li>identity<h4 id=\"Content-Language\"><a href=\"#Content-Language\" class=\"headerlink\" title=\"Content-Language\"></a>Content-Language</h4>告知客户端实体主体使用的自然语言。<h4 id=\"Content-Length\"><a href=\"#Content-Length\" class=\"headerlink\" title=\"Content-Length\"></a>Content-Length</h4>表明实体主体部分的大小，单位为字节。<h4 id=\"Content-Location\"><a href=\"#Content-Location\" class=\"headerlink\" title=\"Content-Location\"></a>Content-Location</h4>给出与报文主体部分像对应的URI。<h4 id=\"Content-MD5\"><a href=\"#Content-MD5\" class=\"headerlink\" title=\"Content-MD5\"></a>Content-MD5</h4>客户端对接受的报文主体执行相同的MD5算法，然后与首部字段的Content-MD5字段值进行比较。<h4 id=\"Content-Range\"><a href=\"#Content-Range\" class=\"headerlink\" title=\"Content-Range\"></a>Content-Range</h4>告知客户端作为响应返回的实体的哪个部分符合范围请求。<h4 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h4>说明主体实体内对象的媒体类型。<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4>将资源的实效日期告知客户端。<h4 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h4>指明资源最终修改的时间。<h3 id=\"为Cookie服务的首部字段\"><a href=\"#为Cookie服务的首部字段\" class=\"headerlink\" title=\"为Cookie服务的首部字段\"></a>为Cookie服务的首部字段</h3>Cookie的工作机制是用户识别和状态管理。<h4 id=\"Set-Cookie\"><a href=\"#Set-Cookie\" class=\"headerlink\" title=\"Set-Cookie\"></a>Set-Cookie</h4>当服务端开始准备管理客户端的状态时，会事先告知各种信息。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NAME=VALUE</td>\n<td style=\"text-align:left\">赋予Cookie的名称及其值（必需项）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">expires=DATE</td>\n<td style=\"text-align:left\">Cookie的有效期（若不指定则到浏览器关闭时为止，维持会话（Session）的时间段内）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">path=PATH</td>\n<td style=\"text-align:left\">将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">domain=域名</td>\n<td style=\"text-align:left\">作为Cookie适用对象的域名（若不指定则为创建Cookie的服务器的域名）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Secure</td>\n<td style=\"text-align:left\">仅在https安全通信时才会发送Cookie</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HttpOnly</td>\n<td style=\"text-align:left\">加以限制，使Cookie不能被JavaScript脚本访问</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>告知服务器，当客户端想获得HTTP状态管理的支持时，就会在请求中包含从服务器接收到的Cookie。</p>\n<h3 id=\"其他首部字段\"><a href=\"#其他首部字段\" class=\"headerlink\" title=\"其他首部字段\"></a>其他首部字段</h3><h4 id=\"X-Frame-Options\"><a href=\"#X-Frame-Options\" class=\"headerlink\" title=\"X-Frame-Options\"></a>X-Frame-Options</h4><p>属于HTTP响应首部，用于控制网站内容在其他Web站点的Frame标签的显示问题。</p>\n<p>字段值：</p>\n<ul>\n<li>DENY 拒绝</li>\n<li>SAMEORIGIN 仅同源域名下的页面匹配时许可<h4 id=\"X-XSS-Protection\"><a href=\"#X-XSS-Protection\" class=\"headerlink\" title=\"X-XSS-Protection\"></a>X-XSS-Protection</h4>属于HTTP响应首部，用于控制浏览器XSS防护机制的开关。<br>字段值：</li>\n<li>0 将XSS过滤设置为无效状态</li>\n<li>1 将XSS过滤设置为有效状态<h4 id=\"DNT\"><a href=\"#DNT\" class=\"headerlink\" title=\"DNT\"></a>DNT</h4>属于HTTP请求首部，全称为Do not Track，意味拒绝个人信息被收集，是表示拒绝精准广告定位的一种方法。</li>\n<li>0 同意被追踪</li>\n<li>1 拒绝被追踪<h4 id=\"P3P\"><a href=\"#P3P\" class=\"headerlink\" title=\"P3P\"></a>P3P</h4>属于HTTP响应首部，利用P3P技术，让Web网站上的个人隐私变成一种仅供程序可理解的形式，已达到保护用户隐私的目的。</li>\n</ul>\n"},{"title":"《图解http》第四章笔记","date":"2017-09-22T16:00:00.000Z","_content":"## 返回结果的HTTP状态码\n### 状态码告知从服务器端返回的请求结果\n状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。\n\n状态码由3位数字和原因短语组成。数字中的第一位指明响应类别，后两位无分类。\n\n状态码的类别\n状态码 | 类别 | 原因短语\n------:|------|------\n1xx   | Informational（信息性状态码） | 接收的请求这种处理\n2xx   | Success（成功状态码） | 请求正常，处理完毕\n3xx   | Redirection（重定向状态码） | 需要进行附加操作以完成请求\n4xx   | Client Error（客户端错误性状态码） | 服务器无法处理请求\n4xx   | Server Error（服务端错误状态码） | 服务器处理请求出错\n### 2xx 成功\n* 200 OK\n    表示从客户端发来的请求被服务端正常处理了\n* 204 No Content\n    表示服务器接收的请求处理成功，但在返回的响应报文中不含实体的主体部分。\n* 206 Partial Content\n    表示客户端进行了范围请求，而服务器成功执行了这部分GET请求。\n\n    响应报文中由Content-Range指定范围的实体内容。\n### 3xx 重定向\n* 301 Move Permanently\n    永久性重定向，表示请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。\n* 302 Found\n    临时性重定向，表示请求的资源已经被分配了新的URI，希望用户（本次）能够使用新的URI访问。\n* 303 See Other\n    表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。和302的区别是，明确表示使用GET获取。\n* 304 Not Modified\n    表示客户端发送附带条件的请求时，服务端允许请求访问资源，但为满足条件的情况。\n\n    304状态码返回时，不包含任何响应的主体部分。\n    \n    附带的条件值采用GET方法的请求报文中包含If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中的任意首部。\n* 307 Temporary Redirect\n    表示临时重定向\n### 4xx 错误\n* 400 Bad Request\n    表示请求报文中发生语法错误。\n* 401 Unauthorized\n    表示发送的请求需要有通过HTTP认证（BASIC认证， DIFEST认证）的认证信息。\n\n    返回含有401的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用以质询（challenge）用户信息。\n* 403 Fobbiden\n    标明对请求资源的访问被服务器拒绝了。\n* 404 Not Found\n    表明服务器上无法找到请求的资源。\n### 5xx 服务器错误\n* 500 Internal Server Error\n    表明服务端在执行请求是发生了错误。\n* 503 Server Unavailable\n    表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n    如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。\n","source":"_posts/《图解http》第四章笔记.md","raw":"---\ntitle: 《图解http》第四章笔记\ndate: 2017-09-23\ntags: ['http']\ncategories: ['笔记']\n---\n## 返回结果的HTTP状态码\n### 状态码告知从服务器端返回的请求结果\n状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。\n\n状态码由3位数字和原因短语组成。数字中的第一位指明响应类别，后两位无分类。\n\n状态码的类别\n状态码 | 类别 | 原因短语\n------:|------|------\n1xx   | Informational（信息性状态码） | 接收的请求这种处理\n2xx   | Success（成功状态码） | 请求正常，处理完毕\n3xx   | Redirection（重定向状态码） | 需要进行附加操作以完成请求\n4xx   | Client Error（客户端错误性状态码） | 服务器无法处理请求\n4xx   | Server Error（服务端错误状态码） | 服务器处理请求出错\n### 2xx 成功\n* 200 OK\n    表示从客户端发来的请求被服务端正常处理了\n* 204 No Content\n    表示服务器接收的请求处理成功，但在返回的响应报文中不含实体的主体部分。\n* 206 Partial Content\n    表示客户端进行了范围请求，而服务器成功执行了这部分GET请求。\n\n    响应报文中由Content-Range指定范围的实体内容。\n### 3xx 重定向\n* 301 Move Permanently\n    永久性重定向，表示请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。\n* 302 Found\n    临时性重定向，表示请求的资源已经被分配了新的URI，希望用户（本次）能够使用新的URI访问。\n* 303 See Other\n    表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。和302的区别是，明确表示使用GET获取。\n* 304 Not Modified\n    表示客户端发送附带条件的请求时，服务端允许请求访问资源，但为满足条件的情况。\n\n    304状态码返回时，不包含任何响应的主体部分。\n    \n    附带的条件值采用GET方法的请求报文中包含If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中的任意首部。\n* 307 Temporary Redirect\n    表示临时重定向\n### 4xx 错误\n* 400 Bad Request\n    表示请求报文中发生语法错误。\n* 401 Unauthorized\n    表示发送的请求需要有通过HTTP认证（BASIC认证， DIFEST认证）的认证信息。\n\n    返回含有401的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用以质询（challenge）用户信息。\n* 403 Fobbiden\n    标明对请求资源的访问被服务器拒绝了。\n* 404 Not Found\n    表明服务器上无法找到请求的资源。\n### 5xx 服务器错误\n* 500 Internal Server Error\n    表明服务端在执行请求是发生了错误。\n* 503 Server Unavailable\n    表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n    如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。\n","slug":"《图解http》第四章笔记","published":1,"updated":"2017-10-12T14:20:29.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1co000xf4b4gj6j3awt","content":"<h2 id=\"返回结果的HTTP状态码\"><a href=\"#返回结果的HTTP状态码\" class=\"headerlink\" title=\"返回结果的HTTP状态码\"></a>返回结果的HTTP状态码</h2><h3 id=\"状态码告知从服务器端返回的请求结果\"><a href=\"#状态码告知从服务器端返回的请求结果\" class=\"headerlink\" title=\"状态码告知从服务器端返回的请求结果\"></a>状态码告知从服务器端返回的请求结果</h3><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</p>\n<p>状态码由3位数字和原因短语组成。数字中的第一位指明响应类别，后两位无分类。</p>\n<p>状态码的类别<br>状态码 | 类别 | 原因短语<br>——:|——|——<br>1xx   | Informational（信息性状态码） | 接收的请求这种处理<br>2xx   | Success（成功状态码） | 请求正常，处理完毕<br>3xx   | Redirection（重定向状态码） | 需要进行附加操作以完成请求<br>4xx   | Client Error（客户端错误性状态码） | 服务器无法处理请求<br>4xx   | Server Error（服务端错误状态码） | 服务器处理请求出错</p>\n<h3 id=\"2xx-成功\"><a href=\"#2xx-成功\" class=\"headerlink\" title=\"2xx 成功\"></a>2xx 成功</h3><ul>\n<li>200 OK<br>  表示从客户端发来的请求被服务端正常处理了</li>\n<li>204 No Content<br>  表示服务器接收的请求处理成功，但在返回的响应报文中不含实体的主体部分。</li>\n<li><p>206 Partial Content<br>  表示客户端进行了范围请求，而服务器成功执行了这部分GET请求。</p>\n<p>  响应报文中由Content-Range指定范围的实体内容。</p>\n<h3 id=\"3xx-重定向\"><a href=\"#3xx-重定向\" class=\"headerlink\" title=\"3xx 重定向\"></a>3xx 重定向</h3></li>\n<li>301 Move Permanently<br>  永久性重定向，表示请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。</li>\n<li>302 Found<br>  临时性重定向，表示请求的资源已经被分配了新的URI，希望用户（本次）能够使用新的URI访问。</li>\n<li>303 See Other<br>  表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。和302的区别是，明确表示使用GET获取。</li>\n<li><p>304 Not Modified<br>  表示客户端发送附带条件的请求时，服务端允许请求访问资源，但为满足条件的情况。</p>\n<p>  304状态码返回时，不包含任何响应的主体部分。</p>\n<p>  附带的条件值采用GET方法的请求报文中包含If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中的任意首部。</p>\n</li>\n<li>307 Temporary Redirect<br>  表示临时重定向<h3 id=\"4xx-错误\"><a href=\"#4xx-错误\" class=\"headerlink\" title=\"4xx 错误\"></a>4xx 错误</h3></li>\n<li>400 Bad Request<br>  表示请求报文中发生语法错误。</li>\n<li><p>401 Unauthorized<br>  表示发送的请求需要有通过HTTP认证（BASIC认证， DIFEST认证）的认证信息。</p>\n<p>  返回含有401的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用以质询（challenge）用户信息。</p>\n</li>\n<li>403 Fobbiden<br>  标明对请求资源的访问被服务器拒绝了。</li>\n<li>404 Not Found<br>  表明服务器上无法找到请求的资源。<h3 id=\"5xx-服务器错误\"><a href=\"#5xx-服务器错误\" class=\"headerlink\" title=\"5xx 服务器错误\"></a>5xx 服务器错误</h3></li>\n<li>500 Internal Server Error<br>  表明服务端在执行请求是发生了错误。</li>\n<li><p>503 Server Unavailable<br>  表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>\n<p>  如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"返回结果的HTTP状态码\"><a href=\"#返回结果的HTTP状态码\" class=\"headerlink\" title=\"返回结果的HTTP状态码\"></a>返回结果的HTTP状态码</h2><h3 id=\"状态码告知从服务器端返回的请求结果\"><a href=\"#状态码告知从服务器端返回的请求结果\" class=\"headerlink\" title=\"状态码告知从服务器端返回的请求结果\"></a>状态码告知从服务器端返回的请求结果</h3><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</p>\n<p>状态码由3位数字和原因短语组成。数字中的第一位指明响应类别，后两位无分类。</p>\n<p>状态码的类别<br>状态码 | 类别 | 原因短语<br>——:|——|——<br>1xx   | Informational（信息性状态码） | 接收的请求这种处理<br>2xx   | Success（成功状态码） | 请求正常，处理完毕<br>3xx   | Redirection（重定向状态码） | 需要进行附加操作以完成请求<br>4xx   | Client Error（客户端错误性状态码） | 服务器无法处理请求<br>4xx   | Server Error（服务端错误状态码） | 服务器处理请求出错</p>\n<h3 id=\"2xx-成功\"><a href=\"#2xx-成功\" class=\"headerlink\" title=\"2xx 成功\"></a>2xx 成功</h3><ul>\n<li>200 OK<br>  表示从客户端发来的请求被服务端正常处理了</li>\n<li>204 No Content<br>  表示服务器接收的请求处理成功，但在返回的响应报文中不含实体的主体部分。</li>\n<li><p>206 Partial Content<br>  表示客户端进行了范围请求，而服务器成功执行了这部分GET请求。</p>\n<p>  响应报文中由Content-Range指定范围的实体内容。</p>\n<h3 id=\"3xx-重定向\"><a href=\"#3xx-重定向\" class=\"headerlink\" title=\"3xx 重定向\"></a>3xx 重定向</h3></li>\n<li>301 Move Permanently<br>  永久性重定向，表示请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。</li>\n<li>302 Found<br>  临时性重定向，表示请求的资源已经被分配了新的URI，希望用户（本次）能够使用新的URI访问。</li>\n<li>303 See Other<br>  表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。和302的区别是，明确表示使用GET获取。</li>\n<li><p>304 Not Modified<br>  表示客户端发送附带条件的请求时，服务端允许请求访问资源，但为满足条件的情况。</p>\n<p>  304状态码返回时，不包含任何响应的主体部分。</p>\n<p>  附带的条件值采用GET方法的请求报文中包含If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中的任意首部。</p>\n</li>\n<li>307 Temporary Redirect<br>  表示临时重定向<h3 id=\"4xx-错误\"><a href=\"#4xx-错误\" class=\"headerlink\" title=\"4xx 错误\"></a>4xx 错误</h3></li>\n<li>400 Bad Request<br>  表示请求报文中发生语法错误。</li>\n<li><p>401 Unauthorized<br>  表示发送的请求需要有通过HTTP认证（BASIC认证， DIFEST认证）的认证信息。</p>\n<p>  返回含有401的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用以质询（challenge）用户信息。</p>\n</li>\n<li>403 Fobbiden<br>  标明对请求资源的访问被服务器拒绝了。</li>\n<li>404 Not Found<br>  表明服务器上无法找到请求的资源。<h3 id=\"5xx-服务器错误\"><a href=\"#5xx-服务器错误\" class=\"headerlink\" title=\"5xx 服务器错误\"></a>5xx 服务器错误</h3></li>\n<li>500 Internal Server Error<br>  表明服务端在执行请求是发生了错误。</li>\n<li><p>503 Server Unavailable<br>  表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>\n<p>  如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。</p>\n</li>\n</ul>\n"},{"title":"《精通正则表达式》第一章笔记","date":"2017-09-07T16:00:00.000Z","_content":"## 元字符\n元字符 | 名称 | 匹配对象\n------|------|------\n.     |点号  |除了换行符以外的单个任意字符\n[...] |字符组  |列出的任意字符\n[^...]|排除型字符组  |未列出的任意字符\n^ |脱字符  |行的起始位置\n$ |美元符  |行的接受位置\n\\< |反斜线-小于  |单词的起始位置\n\\> |反斜线-大于  |单词的结束位置\n\\|  |竖线  |匹配分割两边的任意一个表达式\n(...)  |括号  |限制竖线的作用范围\n* 在字符组内部,元字符的定义规则和意义是不一样的。\n* 不用混合多选项h和字符组，字符组只能匹配一个字符，多选项可以匹配长字符串。\n* ^X 排除型字符的意思是匹配一个不为X的字符。\n* -i参数规定在匹配时不区分大小写。\n\n### 表示重复的元字符\n元字符 | 次数下限 | 次数上限 | 含义\n----|----|----|----\n?|无|1|可以不出现，也可以只出现一次\n*|无|无|可以出现无数次，也可以不出现\n+|1|无|可以出现无数次，但至少要出现一次\n\n规定重现次数的范围：区间{min,max}\n## 括号及反向引用\n使用括号的三个作用：\n1. 限制多选结构\n2. 分组\n3. 捕获文本\n一个表达式中可以使用多个括号，用\\1,\\2,\\3来表示第一，第二，第三组括号匹配的文本。\n## 转义\n如果需要匹配的某个字符本身就是元字符,使用反斜线（转义符）加上改符号来表示，作用是使元字符失去特殊含义，变成普通字符。\n","source":"_posts/《精通正则表达式》第一章笔记.md","raw":"---\ntitle: 《精通正则表达式》第一章笔记\ndate: 2017-09-08\ntags: ['正则表达式']\ncategories: ['笔记']\n---\n## 元字符\n元字符 | 名称 | 匹配对象\n------|------|------\n.     |点号  |除了换行符以外的单个任意字符\n[...] |字符组  |列出的任意字符\n[^...]|排除型字符组  |未列出的任意字符\n^ |脱字符  |行的起始位置\n$ |美元符  |行的接受位置\n\\< |反斜线-小于  |单词的起始位置\n\\> |反斜线-大于  |单词的结束位置\n\\|  |竖线  |匹配分割两边的任意一个表达式\n(...)  |括号  |限制竖线的作用范围\n* 在字符组内部,元字符的定义规则和意义是不一样的。\n* 不用混合多选项h和字符组，字符组只能匹配一个字符，多选项可以匹配长字符串。\n* ^X 排除型字符的意思是匹配一个不为X的字符。\n* -i参数规定在匹配时不区分大小写。\n\n### 表示重复的元字符\n元字符 | 次数下限 | 次数上限 | 含义\n----|----|----|----\n?|无|1|可以不出现，也可以只出现一次\n*|无|无|可以出现无数次，也可以不出现\n+|1|无|可以出现无数次，但至少要出现一次\n\n规定重现次数的范围：区间{min,max}\n## 括号及反向引用\n使用括号的三个作用：\n1. 限制多选结构\n2. 分组\n3. 捕获文本\n一个表达式中可以使用多个括号，用\\1,\\2,\\3来表示第一，第二，第三组括号匹配的文本。\n## 转义\n如果需要匹配的某个字符本身就是元字符,使用反斜线（转义符）加上改符号来表示，作用是使元字符失去特殊含义，变成普通字符。\n","slug":"《精通正则表达式》第一章笔记","published":1,"updated":"2017-09-24T13:38:05.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cr0010f4b4byappbl8","content":"<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>名称</th>\n<th>匹配对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>点号</td>\n<td>除了换行符以外的单个任意字符</td>\n</tr>\n<tr>\n<td>[…]</td>\n<td>字符组</td>\n<td>列出的任意字符</td>\n</tr>\n<tr>\n<td>[^…]</td>\n<td>排除型字符组</td>\n<td>未列出的任意字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td>脱字符</td>\n<td>行的起始位置</td>\n</tr>\n<tr>\n<td>$</td>\n<td>美元符</td>\n<td>行的接受位置</td>\n</tr>\n<tr>\n<td>\\&lt;</td>\n<td>反斜线-小于</td>\n<td>单词的起始位置</td>\n</tr>\n<tr>\n<td>></td>\n<td>反斜线-大于</td>\n<td>单词的结束位置</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>竖线</td>\n<td>匹配分割两边的任意一个表达式</td>\n</tr>\n<tr>\n<td>(…)</td>\n<td>括号</td>\n<td>限制竖线的作用范围</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在字符组内部,元字符的定义规则和意义是不一样的。</li>\n<li>不用混合多选项h和字符组，字符组只能匹配一个字符，多选项可以匹配长字符串。</li>\n<li>^X 排除型字符的意思是匹配一个不为X的字符。</li>\n<li>-i参数规定在匹配时不区分大小写。</li>\n</ul>\n<h3 id=\"表示重复的元字符\"><a href=\"#表示重复的元字符\" class=\"headerlink\" title=\"表示重复的元字符\"></a>表示重复的元字符</h3><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>次数下限</th>\n<th>次数上限</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td>无</td>\n<td>1</td>\n<td>可以不出现，也可以只出现一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>无</td>\n<td>无</td>\n<td>可以出现无数次，也可以不出现</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1</td>\n<td>无</td>\n<td>可以出现无数次，但至少要出现一次</td>\n</tr>\n</tbody>\n</table>\n<p>规定重现次数的范围：区间{min,max}</p>\n<h2 id=\"括号及反向引用\"><a href=\"#括号及反向引用\" class=\"headerlink\" title=\"括号及反向引用\"></a>括号及反向引用</h2><p>使用括号的三个作用：</p>\n<ol>\n<li>限制多选结构</li>\n<li>分组</li>\n<li>捕获文本<br>一个表达式中可以使用多个括号，用\\1,\\2,\\3来表示第一，第二，第三组括号匹配的文本。<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2>如果需要匹配的某个字符本身就是元字符,使用反斜线（转义符）加上改符号来表示，作用是使元字符失去特殊含义，变成普通字符。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>名称</th>\n<th>匹配对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>点号</td>\n<td>除了换行符以外的单个任意字符</td>\n</tr>\n<tr>\n<td>[…]</td>\n<td>字符组</td>\n<td>列出的任意字符</td>\n</tr>\n<tr>\n<td>[^…]</td>\n<td>排除型字符组</td>\n<td>未列出的任意字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td>脱字符</td>\n<td>行的起始位置</td>\n</tr>\n<tr>\n<td>$</td>\n<td>美元符</td>\n<td>行的接受位置</td>\n</tr>\n<tr>\n<td>\\&lt;</td>\n<td>反斜线-小于</td>\n<td>单词的起始位置</td>\n</tr>\n<tr>\n<td>></td>\n<td>反斜线-大于</td>\n<td>单词的结束位置</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>竖线</td>\n<td>匹配分割两边的任意一个表达式</td>\n</tr>\n<tr>\n<td>(…)</td>\n<td>括号</td>\n<td>限制竖线的作用范围</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在字符组内部,元字符的定义规则和意义是不一样的。</li>\n<li>不用混合多选项h和字符组，字符组只能匹配一个字符，多选项可以匹配长字符串。</li>\n<li>^X 排除型字符的意思是匹配一个不为X的字符。</li>\n<li>-i参数规定在匹配时不区分大小写。</li>\n</ul>\n<h3 id=\"表示重复的元字符\"><a href=\"#表示重复的元字符\" class=\"headerlink\" title=\"表示重复的元字符\"></a>表示重复的元字符</h3><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>次数下限</th>\n<th>次数上限</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td>无</td>\n<td>1</td>\n<td>可以不出现，也可以只出现一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>无</td>\n<td>无</td>\n<td>可以出现无数次，也可以不出现</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1</td>\n<td>无</td>\n<td>可以出现无数次，但至少要出现一次</td>\n</tr>\n</tbody>\n</table>\n<p>规定重现次数的范围：区间{min,max}</p>\n<h2 id=\"括号及反向引用\"><a href=\"#括号及反向引用\" class=\"headerlink\" title=\"括号及反向引用\"></a>括号及反向引用</h2><p>使用括号的三个作用：</p>\n<ol>\n<li>限制多选结构</li>\n<li>分组</li>\n<li>捕获文本<br>一个表达式中可以使用多个括号，用\\1,\\2,\\3来表示第一，第二，第三组括号匹配的文本。<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2>如果需要匹配的某个字符本身就是元字符,使用反斜线（转义符）加上改符号来表示，作用是使元字符失去特殊含义，变成普通字符。</li>\n</ol>\n"},{"title":"使用gulp为静态资源添加版本号","date":"2017-05-19T16:00:00.000Z","_content":"##　背景\n日常使用gulp，使用的比较多的功能是为静态资源文件添加版本号，实现在强缓存下的静态资源缓存命中，增量更新。\n\n在这里记录一下实现过程。\n## gulp插件\n1. gulp-rev \n\n将静态资源的命名后面添加上文件指纹hash的值，插件是根据文件内容生成hash，所以可以实现增量更新。\n2. gulp-rev-collector \n\n比较命名变化前后的资源文件名，生成rev-manifest.json文件名对照映射。\n3. gulp-clean \n\n每次执行前，用来清除旧的文件。\n4. run-sequence\n控制gulp任务的执行顺序。\n## 过程\n### 定义路径\n````javascript\nvar path = 'src'// 源文件夹\nvar dist = 'dist'// 目标文件夹\n// 定义css、js源文件路径\nvar cssSrc = path + '/css/*.css',\n    jsSrc = path + '/js/*.js',\n    imgSrc = path + '/img/*.*'\n````\n### 添加hash值，生成文件名对照映射\n````javascript\n// 处理图片\ngulp.task('revImg', function(){\n    return gulp.src(imgSrc)// 源文件\n        .pipe(rev())// 为文件名添加hash值\n        .pipe(gulp.dest(dist+'/img'))// 存放到目标文件夹\n        .pipe(rev.manifest())// 生成rev-manifest.json文件名对照映射\n        .pipe(gulp.dest('rev/img')) // 将rev-manifest.json存放到rev文件夹\n});\n// 处理css\ngulp.task('revCss', function(){\n  return gulp.src(['rev/img/*.json', cssSrc])\n    .pipe(rev())\n    .pipe(revCollector())// 使用revImg任务生成的rev-manifest.json，替换css里面的图片文件名。\n    .pipe(gulp.dest(dist+'/css'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/css'))\n})\n// 处理js\ngulp.task('revJs', function(){\n  return gulp.src(jsSrc)\n    .pipe(rev())\n    .pipe(gulp.dest(dist+'/js'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/js'))\n})\n````\n### 更新html文件里的图片，js，css文件名。\n````javascript\ngulp.task('revHtml', function () {\n  return gulp.src(['rev/**/*.json', 'src/*.html'])\n    .pipe(revCollector())// 依照rev-manifest.json里的文件名映射进行替换\n    .pipe(gulp.dest(dist))\n})\n````\n### 定义主任务，控制执行顺序\n````javascript\ngulp.task('default', function (done) {\n  condition = false;\n  runSequence(\n    ['clean'],\n    ['revImg'],\n    ['revCss'],// revCss必须在revImg之后执行，因为依赖img/rev-manifest.json替换css里面的图片名。\n    ['revJs'],\n    ['revHtml'],\n    done);\n});\n````\n## 结果\n````javascript\n│  gulpfile.js\n│  package.json\n│\n├─dist\n│  │  index.html\n│  │\n│  ├─css\n│  │      style-12d9df9be6.css\n│  │\n│  ├─img\n│  │      imgA-67ada573aa.png\n│  │      imgB-efc888043f.png\n│  │      imgC-3ba7a2eca0.png\n│  │\n│  └─js\n│          index-fd3859f5fc.js\n│\n├─rev\n│  ├─css\n│  │      rev-manifest.json\n│  │\n│  ├─img\n│  │      rev-manifest.json\n│  │\n│  └─js\n│          rev-manifest.json\n│\n└─src\n    │  index.html\n    │\n    ├─css\n    │      style.css\n    │\n    ├─img\n    │      imgA.png\n    │      imgB.png\n    │      imgC.png\n    │\n    └─js\n            index.js\n````\ncss文件和html里面的资源文件名也对应改变。\n\nindex.html\n````html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"./css/style-12d9df9be6.css\">\n    <script src='./js/index-fd3859f5fc.js'></script>\n</head>\n<body>\n    <p>title</p>\n    <div>\n        <img src=\"./img/imgA-67ada573aa.png\" alt=\"\">\n        <img src=\"./img/imgB-efc888043f.png\" alt=\"\">\n        <img src=\"./img/imgC-3ba7a2eca0.png\" alt=\"\">\n    </div>\n</body>\n</html>\n````\nstyle.css\n````css\np,span {\n    color: grey;\n    background-image: url('../img/imgA-67ada573aa.png')\n}\n````\n## 完整代码\n````javascript\n// gulpfile.js\n//引入gulp和gulp插件\nvar gulp = require('gulp'),\n  runSequence = require('run-sequence'),\n  rev = require('gulp-rev'),\n  revCollector = require('gulp-rev-collector'),\n  clean = require('gulp-clean');\n\nvar path = 'src'// 源文件夹\nvar dist = 'dist'// 目标文件夹\n// 定义css、js源文件路径\nvar cssSrc = path + '/css/*.css',\n  jsSrc = path + '/js/*.js',\n  imgSrc = path + '/img/*.*';\n\n// CSS生成文件hash编码并生成 rev-manifest.json文件名对照映射\ngulp.task('revCss', function(){\n  return gulp.src(['rev/img/*.json', cssSrc])\n    .pipe(rev())\n    .pipe(revCollector())\n    .pipe(gulp.dest(dist+'/css'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/css'));\n});\n\n// 处理图片\ngulp.task('revImg', function(){\n    return gulp.src(imgSrc)\n        .pipe(rev())\n        .pipe(gulp.dest(dist+'/img'))\n        .pipe(rev.manifest())\n        .pipe(gulp.dest('rev/img'));\n});\n\n// js生成文件hash编码并生成 rev-manifest.json文件名对照映射\ngulp.task('revJs', function(){\n  return gulp.src(jsSrc)\n    .pipe(rev())\n    .pipe(gulp.dest(dist+'/js'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/js'));\n});\n\n\n// Html替换css、js文件版本\ngulp.task('revHtml', function () {\n  return gulp.src(['rev/**/*.json', 'src/*.html'])\n    .pipe(revCollector())\n    .pipe(gulp.dest(dist));\n});\n\ngulp.task('clean', function () {\n    return gulp.src(dist+'/*/*', {read: false})\n        .pipe(clean())\n})\n\n// 开发构建\ngulp.task('default', function (done) {\n  condition = false;\n  runSequence(\n    ['clean'],\n    ['revImg'],\n    ['revCss'],\n    ['revJs'],\n    ['revHtml'],\n    done);\n});\n````","source":"_posts/使用gulp为静态资源添加版本号.md","raw":"---\ntitle: 使用gulp为静态资源添加版本号\ndate: 2017-05-20\ntags: ['gulp','效率']\ncategories: ['工具']\n---\n##　背景\n日常使用gulp，使用的比较多的功能是为静态资源文件添加版本号，实现在强缓存下的静态资源缓存命中，增量更新。\n\n在这里记录一下实现过程。\n## gulp插件\n1. gulp-rev \n\n将静态资源的命名后面添加上文件指纹hash的值，插件是根据文件内容生成hash，所以可以实现增量更新。\n2. gulp-rev-collector \n\n比较命名变化前后的资源文件名，生成rev-manifest.json文件名对照映射。\n3. gulp-clean \n\n每次执行前，用来清除旧的文件。\n4. run-sequence\n控制gulp任务的执行顺序。\n## 过程\n### 定义路径\n````javascript\nvar path = 'src'// 源文件夹\nvar dist = 'dist'// 目标文件夹\n// 定义css、js源文件路径\nvar cssSrc = path + '/css/*.css',\n    jsSrc = path + '/js/*.js',\n    imgSrc = path + '/img/*.*'\n````\n### 添加hash值，生成文件名对照映射\n````javascript\n// 处理图片\ngulp.task('revImg', function(){\n    return gulp.src(imgSrc)// 源文件\n        .pipe(rev())// 为文件名添加hash值\n        .pipe(gulp.dest(dist+'/img'))// 存放到目标文件夹\n        .pipe(rev.manifest())// 生成rev-manifest.json文件名对照映射\n        .pipe(gulp.dest('rev/img')) // 将rev-manifest.json存放到rev文件夹\n});\n// 处理css\ngulp.task('revCss', function(){\n  return gulp.src(['rev/img/*.json', cssSrc])\n    .pipe(rev())\n    .pipe(revCollector())// 使用revImg任务生成的rev-manifest.json，替换css里面的图片文件名。\n    .pipe(gulp.dest(dist+'/css'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/css'))\n})\n// 处理js\ngulp.task('revJs', function(){\n  return gulp.src(jsSrc)\n    .pipe(rev())\n    .pipe(gulp.dest(dist+'/js'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/js'))\n})\n````\n### 更新html文件里的图片，js，css文件名。\n````javascript\ngulp.task('revHtml', function () {\n  return gulp.src(['rev/**/*.json', 'src/*.html'])\n    .pipe(revCollector())// 依照rev-manifest.json里的文件名映射进行替换\n    .pipe(gulp.dest(dist))\n})\n````\n### 定义主任务，控制执行顺序\n````javascript\ngulp.task('default', function (done) {\n  condition = false;\n  runSequence(\n    ['clean'],\n    ['revImg'],\n    ['revCss'],// revCss必须在revImg之后执行，因为依赖img/rev-manifest.json替换css里面的图片名。\n    ['revJs'],\n    ['revHtml'],\n    done);\n});\n````\n## 结果\n````javascript\n│  gulpfile.js\n│  package.json\n│\n├─dist\n│  │  index.html\n│  │\n│  ├─css\n│  │      style-12d9df9be6.css\n│  │\n│  ├─img\n│  │      imgA-67ada573aa.png\n│  │      imgB-efc888043f.png\n│  │      imgC-3ba7a2eca0.png\n│  │\n│  └─js\n│          index-fd3859f5fc.js\n│\n├─rev\n│  ├─css\n│  │      rev-manifest.json\n│  │\n│  ├─img\n│  │      rev-manifest.json\n│  │\n│  └─js\n│          rev-manifest.json\n│\n└─src\n    │  index.html\n    │\n    ├─css\n    │      style.css\n    │\n    ├─img\n    │      imgA.png\n    │      imgB.png\n    │      imgC.png\n    │\n    └─js\n            index.js\n````\ncss文件和html里面的资源文件名也对应改变。\n\nindex.html\n````html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"./css/style-12d9df9be6.css\">\n    <script src='./js/index-fd3859f5fc.js'></script>\n</head>\n<body>\n    <p>title</p>\n    <div>\n        <img src=\"./img/imgA-67ada573aa.png\" alt=\"\">\n        <img src=\"./img/imgB-efc888043f.png\" alt=\"\">\n        <img src=\"./img/imgC-3ba7a2eca0.png\" alt=\"\">\n    </div>\n</body>\n</html>\n````\nstyle.css\n````css\np,span {\n    color: grey;\n    background-image: url('../img/imgA-67ada573aa.png')\n}\n````\n## 完整代码\n````javascript\n// gulpfile.js\n//引入gulp和gulp插件\nvar gulp = require('gulp'),\n  runSequence = require('run-sequence'),\n  rev = require('gulp-rev'),\n  revCollector = require('gulp-rev-collector'),\n  clean = require('gulp-clean');\n\nvar path = 'src'// 源文件夹\nvar dist = 'dist'// 目标文件夹\n// 定义css、js源文件路径\nvar cssSrc = path + '/css/*.css',\n  jsSrc = path + '/js/*.js',\n  imgSrc = path + '/img/*.*';\n\n// CSS生成文件hash编码并生成 rev-manifest.json文件名对照映射\ngulp.task('revCss', function(){\n  return gulp.src(['rev/img/*.json', cssSrc])\n    .pipe(rev())\n    .pipe(revCollector())\n    .pipe(gulp.dest(dist+'/css'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/css'));\n});\n\n// 处理图片\ngulp.task('revImg', function(){\n    return gulp.src(imgSrc)\n        .pipe(rev())\n        .pipe(gulp.dest(dist+'/img'))\n        .pipe(rev.manifest())\n        .pipe(gulp.dest('rev/img'));\n});\n\n// js生成文件hash编码并生成 rev-manifest.json文件名对照映射\ngulp.task('revJs', function(){\n  return gulp.src(jsSrc)\n    .pipe(rev())\n    .pipe(gulp.dest(dist+'/js'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('rev/js'));\n});\n\n\n// Html替换css、js文件版本\ngulp.task('revHtml', function () {\n  return gulp.src(['rev/**/*.json', 'src/*.html'])\n    .pipe(revCollector())\n    .pipe(gulp.dest(dist));\n});\n\ngulp.task('clean', function () {\n    return gulp.src(dist+'/*/*', {read: false})\n        .pipe(clean())\n})\n\n// 开发构建\ngulp.task('default', function (done) {\n  condition = false;\n  runSequence(\n    ['clean'],\n    ['revImg'],\n    ['revCss'],\n    ['revJs'],\n    ['revHtml'],\n    done);\n});\n````","slug":"使用gulp为静态资源添加版本号","published":1,"updated":"2017-07-24T14:48:09.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cv0012f4b4h8oxaizj","content":"<p>##　背景<br>日常使用gulp，使用的比较多的功能是为静态资源文件添加版本号，实现在强缓存下的静态资源缓存命中，增量更新。</p>\n<p>在这里记录一下实现过程。</p>\n<h2 id=\"gulp插件\"><a href=\"#gulp插件\" class=\"headerlink\" title=\"gulp插件\"></a>gulp插件</h2><ol>\n<li>gulp-rev </li>\n</ol>\n<p>将静态资源的命名后面添加上文件指纹hash的值，插件是根据文件内容生成hash，所以可以实现增量更新。</p>\n<ol>\n<li>gulp-rev-collector </li>\n</ol>\n<p>比较命名变化前后的资源文件名，生成rev-manifest.json文件名对照映射。</p>\n<ol>\n<li>gulp-clean </li>\n</ol>\n<p>每次执行前，用来清除旧的文件。</p>\n<ol>\n<li>run-sequence<br>控制gulp任务的执行顺序。<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"定义路径\"><a href=\"#定义路径\" class=\"headerlink\" title=\"定义路径\"></a>定义路径</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'src'</span><span class=\"comment\">// 源文件夹</span></div><div class=\"line\"><span class=\"keyword\">var</span> dist = <span class=\"string\">'dist'</span><span class=\"comment\">// 目标文件夹</span></div><div class=\"line\"><span class=\"comment\">// 定义css、js源文件路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> cssSrc = path + <span class=\"string\">'/css/*.css'</span>,</div><div class=\"line\">    jsSrc = path + <span class=\"string\">'/js/*.js'</span>,</div><div class=\"line\">    imgSrc = path + <span class=\"string\">'/img/*.*'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"添加hash值，生成文件名对照映射\"><a href=\"#添加hash值，生成文件名对照映射\" class=\"headerlink\" title=\"添加hash值，生成文件名对照映射\"></a>添加hash值，生成文件名对照映射</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 处理图片</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revImg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(imgSrc)<span class=\"comment\">// 源文件</span></div><div class=\"line\">        .pipe(rev())<span class=\"comment\">// 为文件名添加hash值</span></div><div class=\"line\">        .pipe(gulp.dest(dist+<span class=\"string\">'/img'</span>))<span class=\"comment\">// 存放到目标文件夹</span></div><div class=\"line\">        .pipe(rev.manifest())<span class=\"comment\">// 生成rev-manifest.json文件名对照映射</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/img'</span>)) <span class=\"comment\">// 将rev-manifest.json存放到rev文件夹</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 处理css</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revCss'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/img/*.json'</span>, cssSrc])</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(revCollector())<span class=\"comment\">// 使用revImg任务生成的rev-manifest.json，替换css里面的图片文件名。</span></div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/css'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/css'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 处理js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revJs'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(jsSrc)</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/js'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/js'</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"更新html文件里的图片，js，css文件名。\"><a href=\"#更新html文件里的图片，js，css文件名。\" class=\"headerlink\" title=\"更新html文件里的图片，js，css文件名。\"></a>更新html文件里的图片，js，css文件名。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'revHtml'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/**/*.json'</span>, <span class=\"string\">'src/*.html'</span>])</div><div class=\"line\">    .pipe(revCollector())<span class=\"comment\">// 依照rev-manifest.json里的文件名映射进行替换</span></div><div class=\"line\">    .pipe(gulp.dest(dist))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"定义主任务，控制执行顺序\"><a href=\"#定义主任务，控制执行顺序\" class=\"headerlink\" title=\"定义主任务，控制执行顺序\"></a>定义主任务，控制执行顺序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">  condition = <span class=\"literal\">false</span>;</div><div class=\"line\">  runSequence(</div><div class=\"line\">    [<span class=\"string\">'clean'</span>],</div><div class=\"line\">    [<span class=\"string\">'revImg'</span>],</div><div class=\"line\">    [<span class=\"string\">'revCss'</span>],<span class=\"comment\">// revCss必须在revImg之后执行，因为依赖img/rev-manifest.json替换css里面的图片名。</span></div><div class=\"line\">    [<span class=\"string\">'revJs'</span>],</div><div class=\"line\">    [<span class=\"string\">'revHtml'</span>],</div><div class=\"line\">    done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  gulpfile.js</div><div class=\"line\">│  package.json</div><div class=\"line\">│</div><div class=\"line\">├─dist</div><div class=\"line\">│  │  index.html</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─css</div><div class=\"line\">│  │      style<span class=\"number\">-12</span>d9df9be6.css</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─img</div><div class=\"line\">│  │      imgA<span class=\"number\">-67</span>ada573aa.png</div><div class=\"line\">│  │      imgB-efc888043f.png</div><div class=\"line\">│  │      imgC<span class=\"number\">-3</span>ba7a2eca0.png</div><div class=\"line\">│  │</div><div class=\"line\">│  └─js</div><div class=\"line\">│          index-fd3859f5fc.js</div><div class=\"line\">│</div><div class=\"line\">├─rev</div><div class=\"line\">│  ├─css</div><div class=\"line\">│  │      rev-manifest.json</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─img</div><div class=\"line\">│  │      rev-manifest.json</div><div class=\"line\">│  │</div><div class=\"line\">│  └─js</div><div class=\"line\">│          rev-manifest.json</div><div class=\"line\">│</div><div class=\"line\">└─src</div><div class=\"line\">    │  index.html</div><div class=\"line\">    │</div><div class=\"line\">    ├─css</div><div class=\"line\">    │      style.css</div><div class=\"line\">    │</div><div class=\"line\">    ├─img</div><div class=\"line\">    │      imgA.png</div><div class=\"line\">    │      imgB.png</div><div class=\"line\">    │      imgC.png</div><div class=\"line\">    │</div><div class=\"line\">    └─js</div><div class=\"line\">            index.js</div></pre></td></tr></table></figure>\n<p>css文件和html里面的资源文件名也对应改变。</p>\n<p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/style-12d9df9be6.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'./js/index-fd3859f5fc.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/imgA-67ada573aa.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/imgB-efc888043f.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/imgC-3ba7a2eca0.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>style.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">p</span>,<span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: grey;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'../img/imgA-67ada573aa.png'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// gulpfile.js</span></div><div class=\"line\"><span class=\"comment\">//引入gulp和gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">  runSequence = <span class=\"built_in\">require</span>(<span class=\"string\">'run-sequence'</span>),</div><div class=\"line\">  rev = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev'</span>),</div><div class=\"line\">  revCollector = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev-collector'</span>),</div><div class=\"line\">  clean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'src'</span><span class=\"comment\">// 源文件夹</span></div><div class=\"line\"><span class=\"keyword\">var</span> dist = <span class=\"string\">'dist'</span><span class=\"comment\">// 目标文件夹</span></div><div class=\"line\"><span class=\"comment\">// 定义css、js源文件路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> cssSrc = path + <span class=\"string\">'/css/*.css'</span>,</div><div class=\"line\">  jsSrc = path + <span class=\"string\">'/js/*.js'</span>,</div><div class=\"line\">  imgSrc = path + <span class=\"string\">'/img/*.*'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// CSS生成文件hash编码并生成 rev-manifest.json文件名对照映射</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revCss'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/img/*.json'</span>, cssSrc])</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(revCollector())</div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/css'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/css'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理图片</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revImg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(imgSrc)</div><div class=\"line\">        .pipe(rev())</div><div class=\"line\">        .pipe(gulp.dest(dist+<span class=\"string\">'/img'</span>))</div><div class=\"line\">        .pipe(rev.manifest())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/img'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// js生成文件hash编码并生成 rev-manifest.json文件名对照映射</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revJs'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(jsSrc)</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/js'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/js'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Html替换css、js文件版本</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revHtml'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/**/*.json'</span>, <span class=\"string\">'src/*.html'</span>])</div><div class=\"line\">    .pipe(revCollector())</div><div class=\"line\">    .pipe(gulp.dest(dist));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(dist+<span class=\"string\">'/*/*'</span>, &#123;<span class=\"attr\">read</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">        .pipe(clean())</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 开发构建</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">  condition = <span class=\"literal\">false</span>;</div><div class=\"line\">  runSequence(</div><div class=\"line\">    [<span class=\"string\">'clean'</span>],</div><div class=\"line\">    [<span class=\"string\">'revImg'</span>],</div><div class=\"line\">    [<span class=\"string\">'revCss'</span>],</div><div class=\"line\">    [<span class=\"string\">'revJs'</span>],</div><div class=\"line\">    [<span class=\"string\">'revHtml'</span>],</div><div class=\"line\">    done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>##　背景<br>日常使用gulp，使用的比较多的功能是为静态资源文件添加版本号，实现在强缓存下的静态资源缓存命中，增量更新。</p>\n<p>在这里记录一下实现过程。</p>\n<h2 id=\"gulp插件\"><a href=\"#gulp插件\" class=\"headerlink\" title=\"gulp插件\"></a>gulp插件</h2><ol>\n<li>gulp-rev </li>\n</ol>\n<p>将静态资源的命名后面添加上文件指纹hash的值，插件是根据文件内容生成hash，所以可以实现增量更新。</p>\n<ol>\n<li>gulp-rev-collector </li>\n</ol>\n<p>比较命名变化前后的资源文件名，生成rev-manifest.json文件名对照映射。</p>\n<ol>\n<li>gulp-clean </li>\n</ol>\n<p>每次执行前，用来清除旧的文件。</p>\n<ol>\n<li>run-sequence<br>控制gulp任务的执行顺序。<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"定义路径\"><a href=\"#定义路径\" class=\"headerlink\" title=\"定义路径\"></a>定义路径</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'src'</span><span class=\"comment\">// 源文件夹</span></div><div class=\"line\"><span class=\"keyword\">var</span> dist = <span class=\"string\">'dist'</span><span class=\"comment\">// 目标文件夹</span></div><div class=\"line\"><span class=\"comment\">// 定义css、js源文件路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> cssSrc = path + <span class=\"string\">'/css/*.css'</span>,</div><div class=\"line\">    jsSrc = path + <span class=\"string\">'/js/*.js'</span>,</div><div class=\"line\">    imgSrc = path + <span class=\"string\">'/img/*.*'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"添加hash值，生成文件名对照映射\"><a href=\"#添加hash值，生成文件名对照映射\" class=\"headerlink\" title=\"添加hash值，生成文件名对照映射\"></a>添加hash值，生成文件名对照映射</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 处理图片</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revImg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(imgSrc)<span class=\"comment\">// 源文件</span></div><div class=\"line\">        .pipe(rev())<span class=\"comment\">// 为文件名添加hash值</span></div><div class=\"line\">        .pipe(gulp.dest(dist+<span class=\"string\">'/img'</span>))<span class=\"comment\">// 存放到目标文件夹</span></div><div class=\"line\">        .pipe(rev.manifest())<span class=\"comment\">// 生成rev-manifest.json文件名对照映射</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/img'</span>)) <span class=\"comment\">// 将rev-manifest.json存放到rev文件夹</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 处理css</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revCss'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/img/*.json'</span>, cssSrc])</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(revCollector())<span class=\"comment\">// 使用revImg任务生成的rev-manifest.json，替换css里面的图片文件名。</span></div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/css'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/css'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 处理js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revJs'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(jsSrc)</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/js'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/js'</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"更新html文件里的图片，js，css文件名。\"><a href=\"#更新html文件里的图片，js，css文件名。\" class=\"headerlink\" title=\"更新html文件里的图片，js，css文件名。\"></a>更新html文件里的图片，js，css文件名。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'revHtml'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/**/*.json'</span>, <span class=\"string\">'src/*.html'</span>])</div><div class=\"line\">    .pipe(revCollector())<span class=\"comment\">// 依照rev-manifest.json里的文件名映射进行替换</span></div><div class=\"line\">    .pipe(gulp.dest(dist))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"定义主任务，控制执行顺序\"><a href=\"#定义主任务，控制执行顺序\" class=\"headerlink\" title=\"定义主任务，控制执行顺序\"></a>定义主任务，控制执行顺序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">  condition = <span class=\"literal\">false</span>;</div><div class=\"line\">  runSequence(</div><div class=\"line\">    [<span class=\"string\">'clean'</span>],</div><div class=\"line\">    [<span class=\"string\">'revImg'</span>],</div><div class=\"line\">    [<span class=\"string\">'revCss'</span>],<span class=\"comment\">// revCss必须在revImg之后执行，因为依赖img/rev-manifest.json替换css里面的图片名。</span></div><div class=\"line\">    [<span class=\"string\">'revJs'</span>],</div><div class=\"line\">    [<span class=\"string\">'revHtml'</span>],</div><div class=\"line\">    done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  gulpfile.js</div><div class=\"line\">│  package.json</div><div class=\"line\">│</div><div class=\"line\">├─dist</div><div class=\"line\">│  │  index.html</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─css</div><div class=\"line\">│  │      style<span class=\"number\">-12</span>d9df9be6.css</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─img</div><div class=\"line\">│  │      imgA<span class=\"number\">-67</span>ada573aa.png</div><div class=\"line\">│  │      imgB-efc888043f.png</div><div class=\"line\">│  │      imgC<span class=\"number\">-3</span>ba7a2eca0.png</div><div class=\"line\">│  │</div><div class=\"line\">│  └─js</div><div class=\"line\">│          index-fd3859f5fc.js</div><div class=\"line\">│</div><div class=\"line\">├─rev</div><div class=\"line\">│  ├─css</div><div class=\"line\">│  │      rev-manifest.json</div><div class=\"line\">│  │</div><div class=\"line\">│  ├─img</div><div class=\"line\">│  │      rev-manifest.json</div><div class=\"line\">│  │</div><div class=\"line\">│  └─js</div><div class=\"line\">│          rev-manifest.json</div><div class=\"line\">│</div><div class=\"line\">└─src</div><div class=\"line\">    │  index.html</div><div class=\"line\">    │</div><div class=\"line\">    ├─css</div><div class=\"line\">    │      style.css</div><div class=\"line\">    │</div><div class=\"line\">    ├─img</div><div class=\"line\">    │      imgA.png</div><div class=\"line\">    │      imgB.png</div><div class=\"line\">    │      imgC.png</div><div class=\"line\">    │</div><div class=\"line\">    └─js</div><div class=\"line\">            index.js</div></pre></td></tr></table></figure>\n<p>css文件和html里面的资源文件名也对应改变。</p>\n<p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/style-12d9df9be6.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'./js/index-fd3859f5fc.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/imgA-67ada573aa.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/imgB-efc888043f.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/imgC-3ba7a2eca0.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>style.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">p</span>,<span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: grey;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'../img/imgA-67ada573aa.png'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// gulpfile.js</span></div><div class=\"line\"><span class=\"comment\">//引入gulp和gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">  runSequence = <span class=\"built_in\">require</span>(<span class=\"string\">'run-sequence'</span>),</div><div class=\"line\">  rev = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev'</span>),</div><div class=\"line\">  revCollector = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev-collector'</span>),</div><div class=\"line\">  clean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'src'</span><span class=\"comment\">// 源文件夹</span></div><div class=\"line\"><span class=\"keyword\">var</span> dist = <span class=\"string\">'dist'</span><span class=\"comment\">// 目标文件夹</span></div><div class=\"line\"><span class=\"comment\">// 定义css、js源文件路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> cssSrc = path + <span class=\"string\">'/css/*.css'</span>,</div><div class=\"line\">  jsSrc = path + <span class=\"string\">'/js/*.js'</span>,</div><div class=\"line\">  imgSrc = path + <span class=\"string\">'/img/*.*'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// CSS生成文件hash编码并生成 rev-manifest.json文件名对照映射</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revCss'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/img/*.json'</span>, cssSrc])</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(revCollector())</div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/css'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/css'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理图片</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revImg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(imgSrc)</div><div class=\"line\">        .pipe(rev())</div><div class=\"line\">        .pipe(gulp.dest(dist+<span class=\"string\">'/img'</span>))</div><div class=\"line\">        .pipe(rev.manifest())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/img'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// js生成文件hash编码并生成 rev-manifest.json文件名对照映射</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revJs'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(jsSrc)</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(gulp.dest(dist+<span class=\"string\">'/js'</span>))</div><div class=\"line\">    .pipe(rev.manifest())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'rev/js'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Html替换css、js文件版本</span></div><div class=\"line\">gulp.task(<span class=\"string\">'revHtml'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'rev/**/*.json'</span>, <span class=\"string\">'src/*.html'</span>])</div><div class=\"line\">    .pipe(revCollector())</div><div class=\"line\">    .pipe(gulp.dest(dist));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(dist+<span class=\"string\">'/*/*'</span>, &#123;<span class=\"attr\">read</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">        .pipe(clean())</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 开发构建</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">  condition = <span class=\"literal\">false</span>;</div><div class=\"line\">  runSequence(</div><div class=\"line\">    [<span class=\"string\">'clean'</span>],</div><div class=\"line\">    [<span class=\"string\">'revImg'</span>],</div><div class=\"line\">    [<span class=\"string\">'revCss'</span>],</div><div class=\"line\">    [<span class=\"string\">'revJs'</span>],</div><div class=\"line\">    [<span class=\"string\">'revHtml'</span>],</div><div class=\"line\">    done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"使用gulp移动打包的静态资源到java项目","date":"2017-03-24T16:00:00.000Z","_content":"## 背景\n在java项目里使用vue作为前端框架，使用webpack作为打包工具。打包完的静态资源需要移动到java项目的WebContent文件夹里，本来webpack可以指定输出的路径，但由于HtmlWebpackPlugin插件不支持使用jsp作为模板，因此决定引入gulp来实现这个功能。\n## 目标\n将webpack打包完的js,css，插入到jsp模板里，同时将静态资源移动java项目WebContent里对应的文件夹下面的(这个功能也可以用webpack实现)。\n## 实现\n\n### 需要用到的npm包和gulp插件\n````javascript\n\"devDependencies\": {\n    \"del\": \"^2.2.2\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-cheerio\": \"^0.6.2\",\n    \"gulp-replace\": \"^0.5.4\",\n    \"through2\": \"^2.0.3\"\n  }\n````\n### 过程\n\n(1)在java项目下的WebContent文件夹下，新建前端源码的文件夹src。\n\n(2)每次开发完成后，打包生成src/dist文件夹。清空WebContent下的资源文件夹，将src/dist中的静态资源js，css，img移动到对应的资源文件夹。\n````javascript\n//清空文件夹\ngulp.task('del',()=>{\n    del(['../css/*'],{force:true})//或者使用gulp-clean\n    del(['../images/*'],{force:true})\n    del(['../scripts/*'],{force:true})\n    del(['../WEB-INF/jsp/*'],{force:true})\n})\n//拷贝文件到指定文件夹\ngulp.task('cp', ()=>{\n    return gulp.src('src/*/*').pipe(gulp.dest('../'))\n})\n````\n(2)获取src/dist/scripts文件夹下的manifest.js,app.js,vendor.js,app.css的hash值，使用gulp-cheerio插件生成对应的script，link节点，插入模板，并存放入目标文件夹WebContent/WEB-INF/jsp。\n\nWebContentscr/src下的jsp模板\n````javascript\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<jsp:include page=\"common.jsp\"></jsp:include>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n <% \n \tString sid=request.getParameter(\"sid\");\n %>\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath}\"></c:set>\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=UTF-8>\n        <meta name=viewport content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\">\n        <title>project</title>\n    </head>\n    <body>\n        <div id=app></div>\n        <input type=\"text\" value=\"${param.notbindPhone}\" style=\"display: none\" id=\"notbindPhoneId\">\n        <input type=\"text\" value=\"${userMobile}\" style=\"display: none\" id=\"mobile\">\n    </body>\n</html>\n````\ncheerio插件操作html的,并不支持jsp的dom操作,在做dom操作的时候,首先需要把源文件html进行智能补全处理,会把未结束的标签补齐，会使页面的jsp标签乱掉了。解决的办法,在调用cheerio 之前,先把jsp标签的<% 和%>替换掉。这样cheerio 会把他们是当做普通的字符串处理.等cheerio处理结束后,再替换回来。\n\n````javascript\n//获取hash值\nlet hash = {}\ngulp.src('src/scripts/manifest.*.js').pipe(through2.obj((file, enc, cb)=>{\n   hash.manifest = file.history.toString().replace(file.base,'').split('.')[1]\n}))\n////向jsp模板插入静态资源\ngulp.src('src/index.jsp').pipe(cheerio({run:$=>{\n  $('body').append('<script src=\"../'+jsPath+'/manifest.'+hash.manifest+'.js\"></script>')\n},parserOptions:{decodeEntities: false}}))\n````\nWebContent//WEB-INF/jsp下生成的jsp\n````javascript\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<jsp:include page=\"common.jsp\"></jsp:include>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n <% \n \tString sid=request.getParameter(\"sid\");\n %>\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath}\"></c:set>\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\">\n        <title>project</title>\n    <link href=\"../css/app.e34a801012871ec0a999.css\" rel=\"stylesheet\"></head>\n    <body>\n        <div id=\"app\"></div>\n        <input type=\"text\" value=\"${param.notbindPhone}\" style=\"display: none\" id=\"notbindPhoneId\">\n        <input type=\"text\" value=\"${userMobile}\" style=\"display: none\" id=\"mobile\">\n    <script src=\"../scripts/manifest.9e7be796d2fe2d9d2c84.js\"></script>\n    <script src=\"../scripts/vendor.d806109533dbf074df4e.js\"></script>\n    <script src=\"../scripts/app.e34a801012871ec0a999.js\"></script>\n    </body>\n</html>\n````\n\n### 完整源码\n\n````javascript\nvar gulp = require('gulp')\nvar del = require('del') //清空文件夹\nvar through2 = require('through2') //读取文件名\nvar cheerio = require('gulp-cheerio') // 操作jsp模板，若使用gulp-rev会重复添加hash\nvar replace = require('gulp-replace') //替换文本\nvar jsPath = 'scripts'\n\n//清空文件夹\ngulp.task('del',()=>{\n    del(['../css/*'],{force:true})//或者使用gulp-clean\n    del(['../images/*'],{force:true})\n    del(['../scripts/*'],{force:true})\n    del(['../WEB-INF/jsp/*'],{force:true})\n})\n//拷贝文件到指定文件夹\ngulp.task('cp', ()=>{\n    return gulp.src('src/*/*').pipe(gulp.dest('../'))\n})\n\n//向jsp模板插入静态资源\ngulp.task('insert',()=>{\n    let hash = {}\n    function handleJsp(hash){\n        return gulp.src('src/index.jsp')\n        .pipe(replace(\"<%\",\"~%\")) //替换掉jsp标签的<%\n        .pipe(replace(\"%>\",\"%~\"))//替换掉jsp标签的<%\n        .pipe(cheerio({run:$=>{\n            $('body').append('<script src=\"../'+jsPath+'/manifest.'+hash.manifest+'.js\"></script>')        \n            $('body').append('<script src=\"../'+jsPath+'/vendor.'+hash.vendor+'.js\"></script>')\n            $('body').append('<script src=\"../'+jsPath+'/app.'+hash.app+'.js\"></script>')\n            $('head').append('<link href=\"../css/app.'+hash.css+'.css\" rel=\"stylesheet\">')\n        },parserOptions:{decodeEntities: false}}))//防止汉字被转码\n        .pipe(replace(\"%~\",\"%>\")) //替换回来jsp标签的<%\n        .pipe(replace(\"~%\",\"<%\"))//替换回来jsp标签的<%\n        .pipe(gulp.dest('../WEB-INF/jsp/'))\n    }\n    //获取hash值\n    gulp.src('src/scripts/manifest.*.js').pipe(through2.obj((file, enc, cb)=>{\n        hash.manifest = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    gulp.src('src/scripts/vendor.*.js').pipe(through2.obj((file, enc, cb)=>{\n        hash.vendor = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    gulp.src('src/scripts/app.*.js').pipe(through2.obj((file, enc, cb)=>{\n        hash.app = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    gulp.src('src/css/app.*.css').pipe(through2.obj((file, enc, cb)=>{\n        hash.css = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    handleJsp(hash)\n})\n\ngulp.task('default',['del','cp','insert'])\n````\n","source":"_posts/使用gulp移动打包的静态资源到java项目.md","raw":"---\ntitle: 使用gulp移动打包的静态资源到java项目\ndate: 2017-03-25\ntags: ['gulp','效率']\ncategories: ['工具']\n---\n## 背景\n在java项目里使用vue作为前端框架，使用webpack作为打包工具。打包完的静态资源需要移动到java项目的WebContent文件夹里，本来webpack可以指定输出的路径，但由于HtmlWebpackPlugin插件不支持使用jsp作为模板，因此决定引入gulp来实现这个功能。\n## 目标\n将webpack打包完的js,css，插入到jsp模板里，同时将静态资源移动java项目WebContent里对应的文件夹下面的(这个功能也可以用webpack实现)。\n## 实现\n\n### 需要用到的npm包和gulp插件\n````javascript\n\"devDependencies\": {\n    \"del\": \"^2.2.2\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-cheerio\": \"^0.6.2\",\n    \"gulp-replace\": \"^0.5.4\",\n    \"through2\": \"^2.0.3\"\n  }\n````\n### 过程\n\n(1)在java项目下的WebContent文件夹下，新建前端源码的文件夹src。\n\n(2)每次开发完成后，打包生成src/dist文件夹。清空WebContent下的资源文件夹，将src/dist中的静态资源js，css，img移动到对应的资源文件夹。\n````javascript\n//清空文件夹\ngulp.task('del',()=>{\n    del(['../css/*'],{force:true})//或者使用gulp-clean\n    del(['../images/*'],{force:true})\n    del(['../scripts/*'],{force:true})\n    del(['../WEB-INF/jsp/*'],{force:true})\n})\n//拷贝文件到指定文件夹\ngulp.task('cp', ()=>{\n    return gulp.src('src/*/*').pipe(gulp.dest('../'))\n})\n````\n(2)获取src/dist/scripts文件夹下的manifest.js,app.js,vendor.js,app.css的hash值，使用gulp-cheerio插件生成对应的script，link节点，插入模板，并存放入目标文件夹WebContent/WEB-INF/jsp。\n\nWebContentscr/src下的jsp模板\n````javascript\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<jsp:include page=\"common.jsp\"></jsp:include>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n <% \n \tString sid=request.getParameter(\"sid\");\n %>\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath}\"></c:set>\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=UTF-8>\n        <meta name=viewport content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\">\n        <title>project</title>\n    </head>\n    <body>\n        <div id=app></div>\n        <input type=\"text\" value=\"${param.notbindPhone}\" style=\"display: none\" id=\"notbindPhoneId\">\n        <input type=\"text\" value=\"${userMobile}\" style=\"display: none\" id=\"mobile\">\n    </body>\n</html>\n````\ncheerio插件操作html的,并不支持jsp的dom操作,在做dom操作的时候,首先需要把源文件html进行智能补全处理,会把未结束的标签补齐，会使页面的jsp标签乱掉了。解决的办法,在调用cheerio 之前,先把jsp标签的<% 和%>替换掉。这样cheerio 会把他们是当做普通的字符串处理.等cheerio处理结束后,再替换回来。\n\n````javascript\n//获取hash值\nlet hash = {}\ngulp.src('src/scripts/manifest.*.js').pipe(through2.obj((file, enc, cb)=>{\n   hash.manifest = file.history.toString().replace(file.base,'').split('.')[1]\n}))\n////向jsp模板插入静态资源\ngulp.src('src/index.jsp').pipe(cheerio({run:$=>{\n  $('body').append('<script src=\"../'+jsPath+'/manifest.'+hash.manifest+'.js\"></script>')\n},parserOptions:{decodeEntities: false}}))\n````\nWebContent//WEB-INF/jsp下生成的jsp\n````javascript\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<jsp:include page=\"common.jsp\"></jsp:include>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n <% \n \tString sid=request.getParameter(\"sid\");\n %>\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath}\"></c:set>\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\">\n        <title>project</title>\n    <link href=\"../css/app.e34a801012871ec0a999.css\" rel=\"stylesheet\"></head>\n    <body>\n        <div id=\"app\"></div>\n        <input type=\"text\" value=\"${param.notbindPhone}\" style=\"display: none\" id=\"notbindPhoneId\">\n        <input type=\"text\" value=\"${userMobile}\" style=\"display: none\" id=\"mobile\">\n    <script src=\"../scripts/manifest.9e7be796d2fe2d9d2c84.js\"></script>\n    <script src=\"../scripts/vendor.d806109533dbf074df4e.js\"></script>\n    <script src=\"../scripts/app.e34a801012871ec0a999.js\"></script>\n    </body>\n</html>\n````\n\n### 完整源码\n\n````javascript\nvar gulp = require('gulp')\nvar del = require('del') //清空文件夹\nvar through2 = require('through2') //读取文件名\nvar cheerio = require('gulp-cheerio') // 操作jsp模板，若使用gulp-rev会重复添加hash\nvar replace = require('gulp-replace') //替换文本\nvar jsPath = 'scripts'\n\n//清空文件夹\ngulp.task('del',()=>{\n    del(['../css/*'],{force:true})//或者使用gulp-clean\n    del(['../images/*'],{force:true})\n    del(['../scripts/*'],{force:true})\n    del(['../WEB-INF/jsp/*'],{force:true})\n})\n//拷贝文件到指定文件夹\ngulp.task('cp', ()=>{\n    return gulp.src('src/*/*').pipe(gulp.dest('../'))\n})\n\n//向jsp模板插入静态资源\ngulp.task('insert',()=>{\n    let hash = {}\n    function handleJsp(hash){\n        return gulp.src('src/index.jsp')\n        .pipe(replace(\"<%\",\"~%\")) //替换掉jsp标签的<%\n        .pipe(replace(\"%>\",\"%~\"))//替换掉jsp标签的<%\n        .pipe(cheerio({run:$=>{\n            $('body').append('<script src=\"../'+jsPath+'/manifest.'+hash.manifest+'.js\"></script>')        \n            $('body').append('<script src=\"../'+jsPath+'/vendor.'+hash.vendor+'.js\"></script>')\n            $('body').append('<script src=\"../'+jsPath+'/app.'+hash.app+'.js\"></script>')\n            $('head').append('<link href=\"../css/app.'+hash.css+'.css\" rel=\"stylesheet\">')\n        },parserOptions:{decodeEntities: false}}))//防止汉字被转码\n        .pipe(replace(\"%~\",\"%>\")) //替换回来jsp标签的<%\n        .pipe(replace(\"~%\",\"<%\"))//替换回来jsp标签的<%\n        .pipe(gulp.dest('../WEB-INF/jsp/'))\n    }\n    //获取hash值\n    gulp.src('src/scripts/manifest.*.js').pipe(through2.obj((file, enc, cb)=>{\n        hash.manifest = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    gulp.src('src/scripts/vendor.*.js').pipe(through2.obj((file, enc, cb)=>{\n        hash.vendor = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    gulp.src('src/scripts/app.*.js').pipe(through2.obj((file, enc, cb)=>{\n        hash.app = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    gulp.src('src/css/app.*.css').pipe(through2.obj((file, enc, cb)=>{\n        hash.css = file.history.toString().replace(file.base,'').split('.')[1]\n    }))\n    handleJsp(hash)\n})\n\ngulp.task('default',['del','cp','insert'])\n````\n","slug":"使用gulp移动打包的静态资源到java项目","published":1,"updated":"2017-04-18T13:23:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cw0015f4b4ru7dny46","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在java项目里使用vue作为前端框架，使用webpack作为打包工具。打包完的静态资源需要移动到java项目的WebContent文件夹里，本来webpack可以指定输出的路径，但由于HtmlWebpackPlugin插件不支持使用jsp作为模板，因此决定引入gulp来实现这个功能。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>将webpack打包完的js,css，插入到jsp模板里，同时将静态资源移动java项目WebContent里对应的文件夹下面的(这个功能也可以用webpack实现)。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"需要用到的npm包和gulp插件\"><a href=\"#需要用到的npm包和gulp插件\" class=\"headerlink\" title=\"需要用到的npm包和gulp插件\"></a>需要用到的npm包和gulp插件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"del\"</span>: <span class=\"string\">\"^2.2.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-cheerio\"</span>: <span class=\"string\">\"^0.6.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-replace\"</span>: <span class=\"string\">\"^0.5.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"through2\"</span>: <span class=\"string\">\"^2.0.3\"</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>(1)在java项目下的WebContent文件夹下，新建前端源码的文件夹src。</p>\n<p>(2)每次开发完成后，打包生成src/dist文件夹。清空WebContent下的资源文件夹，将src/dist中的静态资源js，css，img移动到对应的资源文件夹。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//清空文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'del'</span>,()=&gt;&#123;</div><div class=\"line\">    del([<span class=\"string\">'../css/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)<span class=\"comment\">//或者使用gulp-clean</span></div><div class=\"line\">    del([<span class=\"string\">'../images/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../scripts/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../WEB-INF/jsp/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//拷贝文件到指定文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cp'</span>, ()=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/*/*'</span>).pipe(gulp.dest(<span class=\"string\">'../'</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>(2)获取src/dist/scripts文件夹下的manifest.js,app.js,vendor.js,app.css的hash值，使用gulp-cheerio插件生成对应的script，link节点，插入模板，并存放入目标文件夹WebContent/WEB-INF/jsp。</p>\n<p>WebContentscr/src下的jsp模板<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></div><div class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</div><div class=\"line\">&lt;jsp:include page=\"common.jsp\"&gt;&lt;/jsp:include&gt;</div><div class=\"line\"> &lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;</div><div class=\"line\"> &lt;% </div><div class=\"line\"> \tString sid=request.getParameter(\"sid\");</div><div class=\"line\"> %&gt;</div><div class=\"line\">&lt;c:set var=\"cpath\" value=\"$&#123;pageContext.request.contextPath&#125;\"&gt;&lt;/c:set&gt;</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;meta charset=UTF-8&gt;</div><div class=\"line\">        &lt;meta name=viewport content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\"&gt;</div><div class=\"line\">        &lt;title&gt;project&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;div id=app&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;param.notbindPhone&#125;\" style=\"display: none\" id=\"notbindPhoneId\"&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;userMobile&#125;\" style=\"display: none\" id=\"mobile\"&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>cheerio插件操作html的,并不支持jsp的dom操作,在做dom操作的时候,首先需要把源文件html进行智能补全处理,会把未结束的标签补齐，会使页面的jsp标签乱掉了。解决的办法,在调用cheerio 之前,先把jsp标签的&lt;% 和%&gt;替换掉。这样cheerio 会把他们是当做普通的字符串处理.等cheerio处理结束后,再替换回来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取hash值</span></div><div class=\"line\"><span class=\"keyword\">let</span> hash = &#123;&#125;</div><div class=\"line\">gulp.src(<span class=\"string\">'src/scripts/manifest.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">   hash.manifest = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">&#125;))</div><div class=\"line\"><span class=\"comment\">////向jsp模板插入静态资源</span></div><div class=\"line\">gulp.src(<span class=\"string\">'src/index.jsp'</span>).pipe(cheerio(&#123;<span class=\"attr\">run</span>:<span class=\"function\"><span class=\"params\">$</span>=&gt;</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/manifest.'</span>+hash.manifest+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)</div><div class=\"line\">&#125;,<span class=\"attr\">parserOptions</span>:&#123;<span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span>&#125;&#125;))</div></pre></td></tr></table></figure>\n<p>WebContent//WEB-INF/jsp下生成的jsp<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></div><div class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</div><div class=\"line\">&lt;jsp:include page=\"common.jsp\"&gt;&lt;/jsp:include&gt;</div><div class=\"line\"> &lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;</div><div class=\"line\"> &lt;% </div><div class=\"line\"> \tString sid=request.getParameter(\"sid\");</div><div class=\"line\"> %&gt;</div><div class=\"line\">&lt;c:set var=\"cpath\" value=\"$&#123;pageContext.request.contextPath&#125;\"&gt;&lt;/c:set&gt;</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">        &lt;meta name=\"viewport\" content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\"&gt;</div><div class=\"line\">        &lt;title&gt;project&lt;/title&gt;</div><div class=\"line\">    &lt;link href=\"../css/app.e34a801012871ec0a999.css\" rel=\"stylesheet\"&gt;&lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;div id=\"app\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;param.notbindPhone&#125;\" style=\"display: none\" id=\"notbindPhoneId\"&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;userMobile&#125;\" style=\"display: none\" id=\"mobile\"&gt;</div><div class=\"line\">    &lt;script src=\"../scripts/manifest.9e7be796d2fe2d9d2c84.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"../scripts/vendor.d806109533dbf074df4e.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"../scripts/app.e34a801012871ec0a999.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>) <span class=\"comment\">//清空文件夹</span></div><div class=\"line\"><span class=\"keyword\">var</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>) <span class=\"comment\">//读取文件名</span></div><div class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-cheerio'</span>) <span class=\"comment\">// 操作jsp模板，若使用gulp-rev会重复添加hash</span></div><div class=\"line\"><span class=\"keyword\">var</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-replace'</span>) <span class=\"comment\">//替换文本</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsPath = <span class=\"string\">'scripts'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//清空文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'del'</span>,()=&gt;&#123;</div><div class=\"line\">    del([<span class=\"string\">'../css/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)<span class=\"comment\">//或者使用gulp-clean</span></div><div class=\"line\">    del([<span class=\"string\">'../images/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../scripts/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../WEB-INF/jsp/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//拷贝文件到指定文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cp'</span>, ()=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/*/*'</span>).pipe(gulp.dest(<span class=\"string\">'../'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//向jsp模板插入静态资源</span></div><div class=\"line\">gulp.task(<span class=\"string\">'insert'</span>,()=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> hash = &#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleJsp</span>(<span class=\"params\">hash</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/index.jsp'</span>)</div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"&lt;%\"</span>,<span class=\"string\">\"~%\"</span>)) <span class=\"comment\">//替换掉jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"%&gt;\"</span>,<span class=\"string\">\"%~\"</span>))<span class=\"comment\">//替换掉jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(cheerio(&#123;<span class=\"attr\">run</span>:<span class=\"function\"><span class=\"params\">$</span>=&gt;</span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/manifest.'</span>+hash.manifest+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)        </div><div class=\"line\">            $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/vendor.'</span>+hash.vendor+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)</div><div class=\"line\">            $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/app.'</span>+hash.app+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)</div><div class=\"line\">            $(<span class=\"string\">'head'</span>).append(<span class=\"string\">'&lt;link href=\"../css/app.'</span>+hash.css+<span class=\"string\">'.css\" rel=\"stylesheet\"&gt;'</span>)</div><div class=\"line\">        &#125;,<span class=\"attr\">parserOptions</span>:&#123;<span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span>&#125;&#125;))<span class=\"comment\">//防止汉字被转码</span></div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"%~\"</span>,<span class=\"string\">\"%&gt;\"</span>)) <span class=\"comment\">//替换回来jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"~%\"</span>,<span class=\"string\">\"&lt;%\"</span>))<span class=\"comment\">//替换回来jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'../WEB-INF/jsp/'</span>))</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获取hash值</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'src/scripts/manifest.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.manifest = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/scripts/vendor.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.vendor = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/scripts/app.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.app = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/css/app.*.css'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.css = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    handleJsp(hash)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'del'</span>,<span class=\"string\">'cp'</span>,<span class=\"string\">'insert'</span>])</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在java项目里使用vue作为前端框架，使用webpack作为打包工具。打包完的静态资源需要移动到java项目的WebContent文件夹里，本来webpack可以指定输出的路径，但由于HtmlWebpackPlugin插件不支持使用jsp作为模板，因此决定引入gulp来实现这个功能。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>将webpack打包完的js,css，插入到jsp模板里，同时将静态资源移动java项目WebContent里对应的文件夹下面的(这个功能也可以用webpack实现)。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"需要用到的npm包和gulp插件\"><a href=\"#需要用到的npm包和gulp插件\" class=\"headerlink\" title=\"需要用到的npm包和gulp插件\"></a>需要用到的npm包和gulp插件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"del\"</span>: <span class=\"string\">\"^2.2.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-cheerio\"</span>: <span class=\"string\">\"^0.6.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-replace\"</span>: <span class=\"string\">\"^0.5.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"through2\"</span>: <span class=\"string\">\"^2.0.3\"</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>(1)在java项目下的WebContent文件夹下，新建前端源码的文件夹src。</p>\n<p>(2)每次开发完成后，打包生成src/dist文件夹。清空WebContent下的资源文件夹，将src/dist中的静态资源js，css，img移动到对应的资源文件夹。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//清空文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'del'</span>,()=&gt;&#123;</div><div class=\"line\">    del([<span class=\"string\">'../css/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)<span class=\"comment\">//或者使用gulp-clean</span></div><div class=\"line\">    del([<span class=\"string\">'../images/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../scripts/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../WEB-INF/jsp/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//拷贝文件到指定文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cp'</span>, ()=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/*/*'</span>).pipe(gulp.dest(<span class=\"string\">'../'</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>(2)获取src/dist/scripts文件夹下的manifest.js,app.js,vendor.js,app.css的hash值，使用gulp-cheerio插件生成对应的script，link节点，插入模板，并存放入目标文件夹WebContent/WEB-INF/jsp。</p>\n<p>WebContentscr/src下的jsp模板<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></div><div class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</div><div class=\"line\">&lt;jsp:include page=\"common.jsp\"&gt;&lt;/jsp:include&gt;</div><div class=\"line\"> &lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;</div><div class=\"line\"> &lt;% </div><div class=\"line\"> \tString sid=request.getParameter(\"sid\");</div><div class=\"line\"> %&gt;</div><div class=\"line\">&lt;c:set var=\"cpath\" value=\"$&#123;pageContext.request.contextPath&#125;\"&gt;&lt;/c:set&gt;</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;meta charset=UTF-8&gt;</div><div class=\"line\">        &lt;meta name=viewport content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\"&gt;</div><div class=\"line\">        &lt;title&gt;project&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;div id=app&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;param.notbindPhone&#125;\" style=\"display: none\" id=\"notbindPhoneId\"&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;userMobile&#125;\" style=\"display: none\" id=\"mobile\"&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>cheerio插件操作html的,并不支持jsp的dom操作,在做dom操作的时候,首先需要把源文件html进行智能补全处理,会把未结束的标签补齐，会使页面的jsp标签乱掉了。解决的办法,在调用cheerio 之前,先把jsp标签的&lt;% 和%&gt;替换掉。这样cheerio 会把他们是当做普通的字符串处理.等cheerio处理结束后,再替换回来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取hash值</span></div><div class=\"line\"><span class=\"keyword\">let</span> hash = &#123;&#125;</div><div class=\"line\">gulp.src(<span class=\"string\">'src/scripts/manifest.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">   hash.manifest = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">&#125;))</div><div class=\"line\"><span class=\"comment\">////向jsp模板插入静态资源</span></div><div class=\"line\">gulp.src(<span class=\"string\">'src/index.jsp'</span>).pipe(cheerio(&#123;<span class=\"attr\">run</span>:<span class=\"function\"><span class=\"params\">$</span>=&gt;</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/manifest.'</span>+hash.manifest+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)</div><div class=\"line\">&#125;,<span class=\"attr\">parserOptions</span>:&#123;<span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span>&#125;&#125;))</div></pre></td></tr></table></figure>\n<p>WebContent//WEB-INF/jsp下生成的jsp<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></div><div class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</div><div class=\"line\">&lt;jsp:include page=\"common.jsp\"&gt;&lt;/jsp:include&gt;</div><div class=\"line\"> &lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;</div><div class=\"line\"> &lt;% </div><div class=\"line\"> \tString sid=request.getParameter(\"sid\");</div><div class=\"line\"> %&gt;</div><div class=\"line\">&lt;c:set var=\"cpath\" value=\"$&#123;pageContext.request.contextPath&#125;\"&gt;&lt;/c:set&gt;</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">        &lt;meta name=\"viewport\" content=\"width=640,user-scalable=no,target-densitydpi=device-dpi\"&gt;</div><div class=\"line\">        &lt;title&gt;project&lt;/title&gt;</div><div class=\"line\">    &lt;link href=\"../css/app.e34a801012871ec0a999.css\" rel=\"stylesheet\"&gt;&lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;div id=\"app\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;param.notbindPhone&#125;\" style=\"display: none\" id=\"notbindPhoneId\"&gt;</div><div class=\"line\">        &lt;input type=\"text\" value=\"$&#123;userMobile&#125;\" style=\"display: none\" id=\"mobile\"&gt;</div><div class=\"line\">    &lt;script src=\"../scripts/manifest.9e7be796d2fe2d9d2c84.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"../scripts/vendor.d806109533dbf074df4e.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"../scripts/app.e34a801012871ec0a999.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>) <span class=\"comment\">//清空文件夹</span></div><div class=\"line\"><span class=\"keyword\">var</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>) <span class=\"comment\">//读取文件名</span></div><div class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-cheerio'</span>) <span class=\"comment\">// 操作jsp模板，若使用gulp-rev会重复添加hash</span></div><div class=\"line\"><span class=\"keyword\">var</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-replace'</span>) <span class=\"comment\">//替换文本</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsPath = <span class=\"string\">'scripts'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//清空文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'del'</span>,()=&gt;&#123;</div><div class=\"line\">    del([<span class=\"string\">'../css/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)<span class=\"comment\">//或者使用gulp-clean</span></div><div class=\"line\">    del([<span class=\"string\">'../images/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../scripts/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">    del([<span class=\"string\">'../WEB-INF/jsp/*'</span>],&#123;<span class=\"attr\">force</span>:<span class=\"literal\">true</span>&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//拷贝文件到指定文件夹</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cp'</span>, ()=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/*/*'</span>).pipe(gulp.dest(<span class=\"string\">'../'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//向jsp模板插入静态资源</span></div><div class=\"line\">gulp.task(<span class=\"string\">'insert'</span>,()=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> hash = &#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleJsp</span>(<span class=\"params\">hash</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/index.jsp'</span>)</div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"&lt;%\"</span>,<span class=\"string\">\"~%\"</span>)) <span class=\"comment\">//替换掉jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"%&gt;\"</span>,<span class=\"string\">\"%~\"</span>))<span class=\"comment\">//替换掉jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(cheerio(&#123;<span class=\"attr\">run</span>:<span class=\"function\"><span class=\"params\">$</span>=&gt;</span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/manifest.'</span>+hash.manifest+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)        </div><div class=\"line\">            $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/vendor.'</span>+hash.vendor+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)</div><div class=\"line\">            $(<span class=\"string\">'body'</span>).append(<span class=\"string\">'&lt;script src=\"../'</span>+jsPath+<span class=\"string\">'/app.'</span>+hash.app+<span class=\"string\">'.js\"&gt;&lt;/script&gt;'</span>)</div><div class=\"line\">            $(<span class=\"string\">'head'</span>).append(<span class=\"string\">'&lt;link href=\"../css/app.'</span>+hash.css+<span class=\"string\">'.css\" rel=\"stylesheet\"&gt;'</span>)</div><div class=\"line\">        &#125;,<span class=\"attr\">parserOptions</span>:&#123;<span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span>&#125;&#125;))<span class=\"comment\">//防止汉字被转码</span></div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"%~\"</span>,<span class=\"string\">\"%&gt;\"</span>)) <span class=\"comment\">//替换回来jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(replace(<span class=\"string\">\"~%\"</span>,<span class=\"string\">\"&lt;%\"</span>))<span class=\"comment\">//替换回来jsp标签的&lt;%</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'../WEB-INF/jsp/'</span>))</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获取hash值</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'src/scripts/manifest.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.manifest = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/scripts/vendor.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.vendor = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/scripts/app.*.js'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.app = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/css/app.*.css'</span>).pipe(through2.obj(<span class=\"function\">(<span class=\"params\">file, enc, cb</span>)=&gt;</span>&#123;</div><div class=\"line\">        hash.css = file.history.toString().replace(file.base,<span class=\"string\">''</span>).split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    &#125;))</div><div class=\"line\">    handleJsp(hash)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'del'</span>,<span class=\"string\">'cp'</span>,<span class=\"string\">'insert'</span>])</div></pre></td></tr></table></figure>\n"},{"title":"使用react和vue实现支付宝微信风格的密码输入框","date":"2017-10-07T16:00:00.000Z","_content":"# 需求背景\n最近的一个项目需要实现一个类似支付宝密码输入的验证码框，即确定好格子的数量，让用户输入密码或者验证码。\n\n在此基础上进一步扩展，实现具有以下功能的公共组件：\n1. 仿支付宝微信密码输入的输入方式，即确定好格子的数量，用户输入。\n2. 支持自定义格子数，4位到8位。\n3. 输入格子可显示出明文或者使用密码黑点代替。\n4. 支持调起数字键盘或混合键盘。\n5. 自定义标题。\n6. 支持按钮提交或者输入完成时自动提交\n# 实现过程\n## 基本思路\n这次实现的是mvvm框架(react和vue)下的组件，通过设置一个隐藏的输入框，借助mvvm框架的数据绑定功能，将用户输入的值分别映射到每个格子上。\n\n格子本身不是给用户直接输入的，用户可直接输入的只有隐藏的输入框。\n## 样式\n1. 隐藏输入框\n首先设置position：absolute，让input元素脱离文档流，不占据空间。\n\n接着将input元素设置为透明，这个时候在电脑上查看是隐藏的，但是手机查看，输入的内容是隐藏了，但还是会有一个闪烁的光标。\n\n后面将input元素的margin-left的值设置为一个很大的值，直接将这个input元素挤出屏幕外，这样就彻底看不到了。\n2. 格子\n格子的排列采用flex局部，将父元素设置为display: flex，同时将justify-content设置为space-around，这样将格子均匀地分布。\n\n格子的数量在4个到8个之间，格子的长宽采用em作单位，同时值的大小根据格子的数量动态进行调整，实现当格子的数量增多时，格子的大小会相对进行缩小。\n\n格子得满足实现密码输入时显示黑点，因此格子采用input元素来实现，设置disable为true，不可输入。这里有个注意的点，disabled的input元素opacity默认是0.3,所以样式里要加上opacity:1。\n3. 输入时页面放大\n在手机下进行输入时，当隐藏的input元素被聚焦输入时，此时页面会被手机浏览器放大。\n\n为了禁止这种行为，需要为页面增加以下meta\n````html\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,initial-scale=1.0,user-scalable=no\">\n````\nwidth - viewport的宽度\n\ninitial-scale - 初始的缩放比例\n\nminimum-scale - 允许用户缩放到的最小比例\n\nmaximum-scale - 允许用户缩放到的最大比例\n\nuser-scalable - 用户是否可以手动缩放\n## 功能逻辑\n1. 控制隐藏框的输入\n根据规定输入的位数，监听隐藏框的输入事件，使用String的slice方法截取符合长度的值。\n2. 自定义格子数 \n通过设置组件的属性，组件内部获取到格子的数量进行渲染。\n3. 格子显示明文或黑点\n显示明文，是借助mvvm框架的数据绑定功能，将隐藏input的值按位置绑定到对应的格子上。\n\n根据传入组件的属性，当需要显示黑点时，设置input的type属性为password。\n\n在react中，根据传入的属性，是这样设置的\n````html\n<input type={this.props.isPassword ? 'password' : 'text'} />\n````\n但是在vue中使用类似的写法，会报如下错误\n> v-model does not support dynamic input types\n> \n> What this error is saying is that, if you dynamically change the input type being sent to the component, Vue will not update the input element to change its type.\n\n原因是vue不支持动态设置input的type属性，解决方法是设置两个不同type的input，借助vue指令v-if和v-else切换。\n\n4. 调起数字键盘或混合键盘\n根据传入组件的属性，需要显示数字键盘时，设置隐藏input元素的type属性为tel。\n````html\n<input type={this.props.isNumber ? 'tel' : 'text'} />\n````\nvue里面遇到的问题同上。\n# 组件属性和事件\n## Props\nName | type | default | description\n---:| --- | ---| ---\ntip | String | '请输入密码' | 输入提示语\npasswordLength | Number | 6 | 格子位数\nisPassword | Boolean | true | 显示明文或者密码黑点\nisNumber | Boolean | true | 调出数字键盘或者混合键盘\nisBtnCtr | Boolean | true | 使用确认按钮或者自动提交\n\n## Events\nName | isRequire | description\n---:| --- | --- \nonConfirm | require | 输入完成时的回调函数\nonClose | require | 关闭输入框时的回调函数\n# 演示页面\n[![手机扫描二维码查看](http://oq8q06ybp.bkt.clouddn.com/image/qrCode.png)](http://60kmlh.ink/vue-GridPassword/)\n# 源码\n[react版本](http://github.com/60kmlh/react-GridPassword/)\n\n[vue版本](https://github.com/60kmlh/vue-GridPassword/)\n","source":"_posts/使用react和vue实现支付宝微信风格的密码输入框.md","raw":"---\ntitle: 使用react和vue实现支付宝微信风格的密码输入框\ndate: 2017-10-08\ntags: ['react','vue']\ncategories: ['公共组件']\n---\n# 需求背景\n最近的一个项目需要实现一个类似支付宝密码输入的验证码框，即确定好格子的数量，让用户输入密码或者验证码。\n\n在此基础上进一步扩展，实现具有以下功能的公共组件：\n1. 仿支付宝微信密码输入的输入方式，即确定好格子的数量，用户输入。\n2. 支持自定义格子数，4位到8位。\n3. 输入格子可显示出明文或者使用密码黑点代替。\n4. 支持调起数字键盘或混合键盘。\n5. 自定义标题。\n6. 支持按钮提交或者输入完成时自动提交\n# 实现过程\n## 基本思路\n这次实现的是mvvm框架(react和vue)下的组件，通过设置一个隐藏的输入框，借助mvvm框架的数据绑定功能，将用户输入的值分别映射到每个格子上。\n\n格子本身不是给用户直接输入的，用户可直接输入的只有隐藏的输入框。\n## 样式\n1. 隐藏输入框\n首先设置position：absolute，让input元素脱离文档流，不占据空间。\n\n接着将input元素设置为透明，这个时候在电脑上查看是隐藏的，但是手机查看，输入的内容是隐藏了，但还是会有一个闪烁的光标。\n\n后面将input元素的margin-left的值设置为一个很大的值，直接将这个input元素挤出屏幕外，这样就彻底看不到了。\n2. 格子\n格子的排列采用flex局部，将父元素设置为display: flex，同时将justify-content设置为space-around，这样将格子均匀地分布。\n\n格子的数量在4个到8个之间，格子的长宽采用em作单位，同时值的大小根据格子的数量动态进行调整，实现当格子的数量增多时，格子的大小会相对进行缩小。\n\n格子得满足实现密码输入时显示黑点，因此格子采用input元素来实现，设置disable为true，不可输入。这里有个注意的点，disabled的input元素opacity默认是0.3,所以样式里要加上opacity:1。\n3. 输入时页面放大\n在手机下进行输入时，当隐藏的input元素被聚焦输入时，此时页面会被手机浏览器放大。\n\n为了禁止这种行为，需要为页面增加以下meta\n````html\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,initial-scale=1.0,user-scalable=no\">\n````\nwidth - viewport的宽度\n\ninitial-scale - 初始的缩放比例\n\nminimum-scale - 允许用户缩放到的最小比例\n\nmaximum-scale - 允许用户缩放到的最大比例\n\nuser-scalable - 用户是否可以手动缩放\n## 功能逻辑\n1. 控制隐藏框的输入\n根据规定输入的位数，监听隐藏框的输入事件，使用String的slice方法截取符合长度的值。\n2. 自定义格子数 \n通过设置组件的属性，组件内部获取到格子的数量进行渲染。\n3. 格子显示明文或黑点\n显示明文，是借助mvvm框架的数据绑定功能，将隐藏input的值按位置绑定到对应的格子上。\n\n根据传入组件的属性，当需要显示黑点时，设置input的type属性为password。\n\n在react中，根据传入的属性，是这样设置的\n````html\n<input type={this.props.isPassword ? 'password' : 'text'} />\n````\n但是在vue中使用类似的写法，会报如下错误\n> v-model does not support dynamic input types\n> \n> What this error is saying is that, if you dynamically change the input type being sent to the component, Vue will not update the input element to change its type.\n\n原因是vue不支持动态设置input的type属性，解决方法是设置两个不同type的input，借助vue指令v-if和v-else切换。\n\n4. 调起数字键盘或混合键盘\n根据传入组件的属性，需要显示数字键盘时，设置隐藏input元素的type属性为tel。\n````html\n<input type={this.props.isNumber ? 'tel' : 'text'} />\n````\nvue里面遇到的问题同上。\n# 组件属性和事件\n## Props\nName | type | default | description\n---:| --- | ---| ---\ntip | String | '请输入密码' | 输入提示语\npasswordLength | Number | 6 | 格子位数\nisPassword | Boolean | true | 显示明文或者密码黑点\nisNumber | Boolean | true | 调出数字键盘或者混合键盘\nisBtnCtr | Boolean | true | 使用确认按钮或者自动提交\n\n## Events\nName | isRequire | description\n---:| --- | --- \nonConfirm | require | 输入完成时的回调函数\nonClose | require | 关闭输入框时的回调函数\n# 演示页面\n[![手机扫描二维码查看](http://oq8q06ybp.bkt.clouddn.com/image/qrCode.png)](http://60kmlh.ink/vue-GridPassword/)\n# 源码\n[react版本](http://github.com/60kmlh/react-GridPassword/)\n\n[vue版本](https://github.com/60kmlh/vue-GridPassword/)\n","slug":"使用react和vue实现支付宝微信风格的密码输入框","published":1,"updated":"2017-10-11T14:36:24.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cx0019f4b427f9brzp","content":"<h1 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h1><p>最近的一个项目需要实现一个类似支付宝密码输入的验证码框，即确定好格子的数量，让用户输入密码或者验证码。</p>\n<p>在此基础上进一步扩展，实现具有以下功能的公共组件：</p>\n<ol>\n<li>仿支付宝微信密码输入的输入方式，即确定好格子的数量，用户输入。</li>\n<li>支持自定义格子数，4位到8位。</li>\n<li>输入格子可显示出明文或者使用密码黑点代替。</li>\n<li>支持调起数字键盘或混合键盘。</li>\n<li>自定义标题。</li>\n<li>支持按钮提交或者输入完成时自动提交<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2>这次实现的是mvvm框架(react和vue)下的组件，通过设置一个隐藏的输入框，借助mvvm框架的数据绑定功能，将用户输入的值分别映射到每个格子上。</li>\n</ol>\n<p>格子本身不是给用户直接输入的，用户可直接输入的只有隐藏的输入框。</p>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><ol>\n<li>隐藏输入框<br>首先设置position：absolute，让input元素脱离文档流，不占据空间。</li>\n</ol>\n<p>接着将input元素设置为透明，这个时候在电脑上查看是隐藏的，但是手机查看，输入的内容是隐藏了，但还是会有一个闪烁的光标。</p>\n<p>后面将input元素的margin-left的值设置为一个很大的值，直接将这个input元素挤出屏幕外，这样就彻底看不到了。</p>\n<ol>\n<li>格子<br>格子的排列采用flex局部，将父元素设置为display: flex，同时将justify-content设置为space-around，这样将格子均匀地分布。</li>\n</ol>\n<p>格子的数量在4个到8个之间，格子的长宽采用em作单位，同时值的大小根据格子的数量动态进行调整，实现当格子的数量增多时，格子的大小会相对进行缩小。</p>\n<p>格子得满足实现密码输入时显示黑点，因此格子采用input元素来实现，设置disable为true，不可输入。这里有个注意的点，disabled的input元素opacity默认是0.3,所以样式里要加上opacity:1。</p>\n<ol>\n<li>输入时页面放大<br>在手机下进行输入时，当隐藏的input元素被聚焦输入时，此时页面会被手机浏览器放大。</li>\n</ol>\n<p>为了禁止这种行为，需要为页面增加以下meta<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,initial-scale=1.0,user-scalable=no\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>width - viewport的宽度</p>\n<p>initial-scale - 初始的缩放比例</p>\n<p>minimum-scale - 允许用户缩放到的最小比例</p>\n<p>maximum-scale - 允许用户缩放到的最大比例</p>\n<p>user-scalable - 用户是否可以手动缩放</p>\n<h2 id=\"功能逻辑\"><a href=\"#功能逻辑\" class=\"headerlink\" title=\"功能逻辑\"></a>功能逻辑</h2><ol>\n<li>控制隐藏框的输入<br>根据规定输入的位数，监听隐藏框的输入事件，使用String的slice方法截取符合长度的值。</li>\n<li>自定义格子数<br>通过设置组件的属性，组件内部获取到格子的数量进行渲染。</li>\n<li>格子显示明文或黑点<br>显示明文，是借助mvvm框架的数据绑定功能，将隐藏input的值按位置绑定到对应的格子上。</li>\n</ol>\n<p>根据传入组件的属性，当需要显示黑点时，设置input的type属性为password。</p>\n<p>在react中，根据传入的属性，是这样设置的<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#123;this.props.isPassword</span> ? '<span class=\"attr\">password</span>' <span class=\"attr\">:</span> '<span class=\"attr\">text</span>'&#125; /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但是在vue中使用类似的写法，会报如下错误</p>\n<blockquote>\n<p>v-model does not support dynamic input types</p>\n<p>What this error is saying is that, if you dynamically change the input type being sent to the component, Vue will not update the input element to change its type.</p>\n</blockquote>\n<p>原因是vue不支持动态设置input的type属性，解决方法是设置两个不同type的input，借助vue指令v-if和v-else切换。</p>\n<ol>\n<li>调起数字键盘或混合键盘<br>根据传入组件的属性，需要显示数字键盘时，设置隐藏input元素的type属性为tel。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#123;this.props.isNumber</span> ? '<span class=\"attr\">tel</span>' <span class=\"attr\">:</span> '<span class=\"attr\">text</span>'&#125; /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>vue里面遇到的问题同上。</p>\n<h1 id=\"组件属性和事件\"><a href=\"#组件属性和事件\" class=\"headerlink\" title=\"组件属性和事件\"></a>组件属性和事件</h1><h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Name</th>\n<th>type</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">tip</td>\n<td>String</td>\n<td>‘请输入密码’</td>\n<td>输入提示语</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">passwordLength</td>\n<td>Number</td>\n<td>6</td>\n<td>格子位数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">isPassword</td>\n<td>Boolean</td>\n<td>true</td>\n<td>显示明文或者密码黑点</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">isNumber</td>\n<td>Boolean</td>\n<td>true</td>\n<td>调出数字键盘或者混合键盘</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">isBtnCtr</td>\n<td>Boolean</td>\n<td>true</td>\n<td>使用确认按钮或者自动提交</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Name</th>\n<th>isRequire</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">onConfirm</td>\n<td>require</td>\n<td>输入完成时的回调函数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">onClose</td>\n<td>require</td>\n<td>关闭输入框时的回调函数</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"演示页面\"><a href=\"#演示页面\" class=\"headerlink\" title=\"演示页面\"></a>演示页面</h1><p><a href=\"http://60kmlh.ink/vue-GridPassword/\" target=\"_blank\" rel=\"external\"><img src=\"http://oq8q06ybp.bkt.clouddn.com/image/qrCode.png\" alt=\"手机扫描二维码查看\"></a></p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p><a href=\"http://github.com/60kmlh/react-GridPassword/\" target=\"_blank\" rel=\"external\">react版本</a></p>\n<p><a href=\"https://github.com/60kmlh/vue-GridPassword/\" target=\"_blank\" rel=\"external\">vue版本</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h1><p>最近的一个项目需要实现一个类似支付宝密码输入的验证码框，即确定好格子的数量，让用户输入密码或者验证码。</p>\n<p>在此基础上进一步扩展，实现具有以下功能的公共组件：</p>\n<ol>\n<li>仿支付宝微信密码输入的输入方式，即确定好格子的数量，用户输入。</li>\n<li>支持自定义格子数，4位到8位。</li>\n<li>输入格子可显示出明文或者使用密码黑点代替。</li>\n<li>支持调起数字键盘或混合键盘。</li>\n<li>自定义标题。</li>\n<li>支持按钮提交或者输入完成时自动提交<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2>这次实现的是mvvm框架(react和vue)下的组件，通过设置一个隐藏的输入框，借助mvvm框架的数据绑定功能，将用户输入的值分别映射到每个格子上。</li>\n</ol>\n<p>格子本身不是给用户直接输入的，用户可直接输入的只有隐藏的输入框。</p>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><ol>\n<li>隐藏输入框<br>首先设置position：absolute，让input元素脱离文档流，不占据空间。</li>\n</ol>\n<p>接着将input元素设置为透明，这个时候在电脑上查看是隐藏的，但是手机查看，输入的内容是隐藏了，但还是会有一个闪烁的光标。</p>\n<p>后面将input元素的margin-left的值设置为一个很大的值，直接将这个input元素挤出屏幕外，这样就彻底看不到了。</p>\n<ol>\n<li>格子<br>格子的排列采用flex局部，将父元素设置为display: flex，同时将justify-content设置为space-around，这样将格子均匀地分布。</li>\n</ol>\n<p>格子的数量在4个到8个之间，格子的长宽采用em作单位，同时值的大小根据格子的数量动态进行调整，实现当格子的数量增多时，格子的大小会相对进行缩小。</p>\n<p>格子得满足实现密码输入时显示黑点，因此格子采用input元素来实现，设置disable为true，不可输入。这里有个注意的点，disabled的input元素opacity默认是0.3,所以样式里要加上opacity:1。</p>\n<ol>\n<li>输入时页面放大<br>在手机下进行输入时，当隐藏的input元素被聚焦输入时，此时页面会被手机浏览器放大。</li>\n</ol>\n<p>为了禁止这种行为，需要为页面增加以下meta<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,initial-scale=1.0,user-scalable=no\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>width - viewport的宽度</p>\n<p>initial-scale - 初始的缩放比例</p>\n<p>minimum-scale - 允许用户缩放到的最小比例</p>\n<p>maximum-scale - 允许用户缩放到的最大比例</p>\n<p>user-scalable - 用户是否可以手动缩放</p>\n<h2 id=\"功能逻辑\"><a href=\"#功能逻辑\" class=\"headerlink\" title=\"功能逻辑\"></a>功能逻辑</h2><ol>\n<li>控制隐藏框的输入<br>根据规定输入的位数，监听隐藏框的输入事件，使用String的slice方法截取符合长度的值。</li>\n<li>自定义格子数<br>通过设置组件的属性，组件内部获取到格子的数量进行渲染。</li>\n<li>格子显示明文或黑点<br>显示明文，是借助mvvm框架的数据绑定功能，将隐藏input的值按位置绑定到对应的格子上。</li>\n</ol>\n<p>根据传入组件的属性，当需要显示黑点时，设置input的type属性为password。</p>\n<p>在react中，根据传入的属性，是这样设置的<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#123;this.props.isPassword</span> ? '<span class=\"attr\">password</span>' <span class=\"attr\">:</span> '<span class=\"attr\">text</span>'&#125; /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但是在vue中使用类似的写法，会报如下错误</p>\n<blockquote>\n<p>v-model does not support dynamic input types</p>\n<p>What this error is saying is that, if you dynamically change the input type being sent to the component, Vue will not update the input element to change its type.</p>\n</blockquote>\n<p>原因是vue不支持动态设置input的type属性，解决方法是设置两个不同type的input，借助vue指令v-if和v-else切换。</p>\n<ol>\n<li>调起数字键盘或混合键盘<br>根据传入组件的属性，需要显示数字键盘时，设置隐藏input元素的type属性为tel。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#123;this.props.isNumber</span> ? '<span class=\"attr\">tel</span>' <span class=\"attr\">:</span> '<span class=\"attr\">text</span>'&#125; /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>vue里面遇到的问题同上。</p>\n<h1 id=\"组件属性和事件\"><a href=\"#组件属性和事件\" class=\"headerlink\" title=\"组件属性和事件\"></a>组件属性和事件</h1><h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Name</th>\n<th>type</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">tip</td>\n<td>String</td>\n<td>‘请输入密码’</td>\n<td>输入提示语</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">passwordLength</td>\n<td>Number</td>\n<td>6</td>\n<td>格子位数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">isPassword</td>\n<td>Boolean</td>\n<td>true</td>\n<td>显示明文或者密码黑点</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">isNumber</td>\n<td>Boolean</td>\n<td>true</td>\n<td>调出数字键盘或者混合键盘</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">isBtnCtr</td>\n<td>Boolean</td>\n<td>true</td>\n<td>使用确认按钮或者自动提交</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Name</th>\n<th>isRequire</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">onConfirm</td>\n<td>require</td>\n<td>输入完成时的回调函数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">onClose</td>\n<td>require</td>\n<td>关闭输入框时的回调函数</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"演示页面\"><a href=\"#演示页面\" class=\"headerlink\" title=\"演示页面\"></a>演示页面</h1><p><a href=\"http://60kmlh.ink/vue-GridPassword/\"><img src=\"http://oq8q06ybp.bkt.clouddn.com/image/qrCode.png\" alt=\"手机扫描二维码查看\"></a></p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p><a href=\"http://github.com/60kmlh/react-GridPassword/\">react版本</a></p>\n<p><a href=\"https://github.com/60kmlh/vue-GridPassword/\">vue版本</a></p>\n"},{"title":"借助webpack实现前端代码的懒加载","date":"2017-08-25T16:00:00.000Z","_content":"## 背景\n随着前端项目的复杂度越来越大，要加载的js文件体积也越来越大。为了提高项目的首屏加载速度，实现在首屏时只加载首屏需要用到的js文件，用户使用其他功能时再加载对应的js文件，我们需要对js进行代码分割和懒加载。\n## webppack的懒加载方案\n### require.ensure()\nwebpack1(webpack2以上也可使用，但不推荐)使用require.ensure()定义一个代码切割点。\n> Note: require.ensure only loads the modules, it doesn’t evaluate them.\n````javascript\nrequire.ensure(dependencies: String[], callback: function(require), errorCallback: function(error), chunkName: String)\n````\ndependencies定义异步加载模块的依赖的一些模块，会和加载的模块打包到一起。\n\ncallback定义回调函数，使用require参数可以在回调函数内动态引入其他模块。\n\nerrorCallback定义加载错误时的回调函数。\n\nchunkName定义打包的chunk名称。\n#### 加载js函数\n````javascript\nfunction fn2() {\n  require.ensure([],function(){\n    var utils = require('./utils')\n    utils(function(){console.log('module2')})\n  },'utils')\n}\n\nmodule.exports = fn2\n````\n#### 加载react组件\n````javascript\nloadTimeComponent() {\n  if(this.state.timeComponent) {\n    return true\n  }\n  var that = this\n  require.ensure([],function(){\n    var Time = require('./Time.js').default\n    that.setState({\n      timeComponent: <Time alertTime={(time) => that.alertTime(time)} />\n    })\n  },'Time')\n}\n````\n#### 配合react-router3加载路由组件\n````javascript\nconst Home = (location, cb) => {\n  require.ensure([], require => {\n    cb(null, require('./components/Home').default)\n  }, 'Home')\n}\n\nfunction errorLoading(err) {\n  console.error('Dynamic page loading failed', err);\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router history={hashHistory}>\n          <Route path='/' getComponent={(Home)} />\n        </Router>\n      </div>\n    )\n  }\n}\n````\n#### 配合react-router4加载路由组件\n由于react-router4没有getComponent方法，需要借助bundle-loader\n````javascript\nimport Bundle from './components/Bundle.js'\nimport HomeContainer from 'bundle-loader?lazy&name=[name]!./components/Home'\n\nconst Home = () => (\n  <Bundle load={HomeContainer}>\n    {(Home) => <Home />}\n  </Bundle>\n)\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Route exact path='/' component={Home} />\n      </div>\n    )\n  }\n}\n\nexport default App\n\n````\n当Bundle组件的load方法被调用时，才会去加载对应的js文件。\n\n\n### import()\nwebpack2 的ES2015 loader中提供了import()方法在运行时动态按需加载ES2015 Module。\n\nwebpack将import()看做一个分割点并将其请求的module打包为一个独立的chunk。import()以模块名称作为参数名并且返回一个Promise对象。\n\n在Babel中使用import()方法，需要安装 dynamic-import插件并选择使用babel-preset-stage-3处理解析错误。\n\n#### 加载js函数\n```` javascript\nfunction fn2() {\n  import(/* webpackChunkName: \"utils\" */'./utils').then(module => {\n    var utils = module //es6模块 module.default\n    utils(function(){console.log('module2')})\n  })\n}\n\nmodule.exports = fn2\n// webpackChunkNam定义chunk名称\n````\n#### 加载react组件\n配合异步组件asyncComponent实现，内部借助async和await实现异步加载。\nreact-router4中使用也是可以配合asyncComponent。\n````javascript\nimport asyncComponent from './AsyncComponent'\nconst Head = asyncComponent(() => import(/* webpackChunkName: \"Head\" */'./Head'))\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Head />\n      </div>\n    )\n  }\n} \n\nexport default App\n````\n#### 配合react-router3加载路由\n同样是借助getComponenet方法。\n````javascript\n<Route\n  path='time' \n  getComponent={\n    (location, cb) => import(/* webpackChunkName: \"Time\" */'./components/Time').\n                      then(module => cb(null, module.default)).\n                      catch(errorLoading)} \n/>\n````\n### bundle-loader和Bundle组件的实现原理\n#### bundle-loader核心源码\n````javascript\nif(query.lazy) {\n\t\tresult = [\n\t\t\t\"module.exports = function(cb) {\\n\",\n\t\t\t\"\trequire.ensure([], function(require) {\\n\",\n\t\t\t\"\t\tcb(require(\", loaderUtils.stringifyRequest(this, \"!!\" + remainingRequest), \"));\\n\",\n\t\t\t\"\t}\" + chunkNameParam + \");\\n\",\n\t\t\t\"}\"];\n\t} else {\n\t\tresult = [\n\t\t\t\"var cbs = [], \\n\",\n\t\t\t\"\tdata;\\n\",\n\t\t\t\"module.exports = function(cb) {\\n\",\n\t\t\t\"\tif(cbs) cbs.push(cb);\\n\",\n\t\t\t\"\telse cb(data);\\n\",\n\t\t\t\"}\\n\",\n\t\t\t\"require.ensure([], function(require) {\\n\",\n\t\t\t\"\tdata = require(\", loaderUtils.stringifyRequest(this, \"!!\" + remainingRequest), \");\\n\",\n\t\t\t\"\tvar callbacks = cbs;\\n\",\n\t\t\t\"\tcbs = null;\\n\",\n\t\t\t\"\tfor(var i = 0, l = callbacks.length; i < l; i++) {\\n\",\n\t\t\t\"\t\tcallbacks[i](data);\\n\",\n\t\t\t\"\t}\\n\",\n\t\t\t\"}\" + chunkNameParam + \");\"];\n\t}\n````\n可以看到bundle-loader也是借助require.ensure()实现异步加载，而且对方法进行了封装，可以传参name和lazy，分别定义chunk的名称和是否懒加载。\n\n#### Bundle组件的核心源码\n````javascript\nconstructor(props) {\n  super(props);\n\n  this.state = {\n      mod: null\n  };\n}\n\ncomponentWillMount() {\n    this.load(this.props)\n}\n\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.load !== this.props.load) {\n        this.load(nextProps)\n    }\n}\n\nload(props) {\n    this.setState({\n        mod: null\n    })\n    props.load((mod) => {\n        this.setState({\n            // handle both es imports and cjs\n            mod: mod.default ? mod.default : mod\n        })\n    })\n}\n\nrender() {\n    if(!this.state.mod)\n        return false\n    return this.props.children(this.state.mod)\n}\n````\n\n当bundle-loader加载文件加载完成时，Bundle组件的componentWillReceiveProps钩子被触发，调用load方法设置加载到的组件，最后将组件返回。\n\n### 完整代码\n\n[源码](https://github.com/60kmlh/codeSplitting)\n\n### 参考资料\n[webpack1 code-splitting](http://webpack.github.io/docs/code-splitting.html)\n\n[webpack1 lazy-loading](https://webpack.js.org/guides/lazy-loading/)\n\n[基于webpack Code Splitting实现react组件的按需加载](https://yq.aliyun.com/articles/71200)\n","source":"_posts/借助webpack实现前端代码的懒加载.md","raw":"---\ntitle: 借助webpack实现前端代码的懒加载\ndate: 2017-08-26\ntags: ['webpack','性能优化']\ncategories: ['工具']\n---\n## 背景\n随着前端项目的复杂度越来越大，要加载的js文件体积也越来越大。为了提高项目的首屏加载速度，实现在首屏时只加载首屏需要用到的js文件，用户使用其他功能时再加载对应的js文件，我们需要对js进行代码分割和懒加载。\n## webppack的懒加载方案\n### require.ensure()\nwebpack1(webpack2以上也可使用，但不推荐)使用require.ensure()定义一个代码切割点。\n> Note: require.ensure only loads the modules, it doesn’t evaluate them.\n````javascript\nrequire.ensure(dependencies: String[], callback: function(require), errorCallback: function(error), chunkName: String)\n````\ndependencies定义异步加载模块的依赖的一些模块，会和加载的模块打包到一起。\n\ncallback定义回调函数，使用require参数可以在回调函数内动态引入其他模块。\n\nerrorCallback定义加载错误时的回调函数。\n\nchunkName定义打包的chunk名称。\n#### 加载js函数\n````javascript\nfunction fn2() {\n  require.ensure([],function(){\n    var utils = require('./utils')\n    utils(function(){console.log('module2')})\n  },'utils')\n}\n\nmodule.exports = fn2\n````\n#### 加载react组件\n````javascript\nloadTimeComponent() {\n  if(this.state.timeComponent) {\n    return true\n  }\n  var that = this\n  require.ensure([],function(){\n    var Time = require('./Time.js').default\n    that.setState({\n      timeComponent: <Time alertTime={(time) => that.alertTime(time)} />\n    })\n  },'Time')\n}\n````\n#### 配合react-router3加载路由组件\n````javascript\nconst Home = (location, cb) => {\n  require.ensure([], require => {\n    cb(null, require('./components/Home').default)\n  }, 'Home')\n}\n\nfunction errorLoading(err) {\n  console.error('Dynamic page loading failed', err);\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router history={hashHistory}>\n          <Route path='/' getComponent={(Home)} />\n        </Router>\n      </div>\n    )\n  }\n}\n````\n#### 配合react-router4加载路由组件\n由于react-router4没有getComponent方法，需要借助bundle-loader\n````javascript\nimport Bundle from './components/Bundle.js'\nimport HomeContainer from 'bundle-loader?lazy&name=[name]!./components/Home'\n\nconst Home = () => (\n  <Bundle load={HomeContainer}>\n    {(Home) => <Home />}\n  </Bundle>\n)\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Route exact path='/' component={Home} />\n      </div>\n    )\n  }\n}\n\nexport default App\n\n````\n当Bundle组件的load方法被调用时，才会去加载对应的js文件。\n\n\n### import()\nwebpack2 的ES2015 loader中提供了import()方法在运行时动态按需加载ES2015 Module。\n\nwebpack将import()看做一个分割点并将其请求的module打包为一个独立的chunk。import()以模块名称作为参数名并且返回一个Promise对象。\n\n在Babel中使用import()方法，需要安装 dynamic-import插件并选择使用babel-preset-stage-3处理解析错误。\n\n#### 加载js函数\n```` javascript\nfunction fn2() {\n  import(/* webpackChunkName: \"utils\" */'./utils').then(module => {\n    var utils = module //es6模块 module.default\n    utils(function(){console.log('module2')})\n  })\n}\n\nmodule.exports = fn2\n// webpackChunkNam定义chunk名称\n````\n#### 加载react组件\n配合异步组件asyncComponent实现，内部借助async和await实现异步加载。\nreact-router4中使用也是可以配合asyncComponent。\n````javascript\nimport asyncComponent from './AsyncComponent'\nconst Head = asyncComponent(() => import(/* webpackChunkName: \"Head\" */'./Head'))\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Head />\n      </div>\n    )\n  }\n} \n\nexport default App\n````\n#### 配合react-router3加载路由\n同样是借助getComponenet方法。\n````javascript\n<Route\n  path='time' \n  getComponent={\n    (location, cb) => import(/* webpackChunkName: \"Time\" */'./components/Time').\n                      then(module => cb(null, module.default)).\n                      catch(errorLoading)} \n/>\n````\n### bundle-loader和Bundle组件的实现原理\n#### bundle-loader核心源码\n````javascript\nif(query.lazy) {\n\t\tresult = [\n\t\t\t\"module.exports = function(cb) {\\n\",\n\t\t\t\"\trequire.ensure([], function(require) {\\n\",\n\t\t\t\"\t\tcb(require(\", loaderUtils.stringifyRequest(this, \"!!\" + remainingRequest), \"));\\n\",\n\t\t\t\"\t}\" + chunkNameParam + \");\\n\",\n\t\t\t\"}\"];\n\t} else {\n\t\tresult = [\n\t\t\t\"var cbs = [], \\n\",\n\t\t\t\"\tdata;\\n\",\n\t\t\t\"module.exports = function(cb) {\\n\",\n\t\t\t\"\tif(cbs) cbs.push(cb);\\n\",\n\t\t\t\"\telse cb(data);\\n\",\n\t\t\t\"}\\n\",\n\t\t\t\"require.ensure([], function(require) {\\n\",\n\t\t\t\"\tdata = require(\", loaderUtils.stringifyRequest(this, \"!!\" + remainingRequest), \");\\n\",\n\t\t\t\"\tvar callbacks = cbs;\\n\",\n\t\t\t\"\tcbs = null;\\n\",\n\t\t\t\"\tfor(var i = 0, l = callbacks.length; i < l; i++) {\\n\",\n\t\t\t\"\t\tcallbacks[i](data);\\n\",\n\t\t\t\"\t}\\n\",\n\t\t\t\"}\" + chunkNameParam + \");\"];\n\t}\n````\n可以看到bundle-loader也是借助require.ensure()实现异步加载，而且对方法进行了封装，可以传参name和lazy，分别定义chunk的名称和是否懒加载。\n\n#### Bundle组件的核心源码\n````javascript\nconstructor(props) {\n  super(props);\n\n  this.state = {\n      mod: null\n  };\n}\n\ncomponentWillMount() {\n    this.load(this.props)\n}\n\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.load !== this.props.load) {\n        this.load(nextProps)\n    }\n}\n\nload(props) {\n    this.setState({\n        mod: null\n    })\n    props.load((mod) => {\n        this.setState({\n            // handle both es imports and cjs\n            mod: mod.default ? mod.default : mod\n        })\n    })\n}\n\nrender() {\n    if(!this.state.mod)\n        return false\n    return this.props.children(this.state.mod)\n}\n````\n\n当bundle-loader加载文件加载完成时，Bundle组件的componentWillReceiveProps钩子被触发，调用load方法设置加载到的组件，最后将组件返回。\n\n### 完整代码\n\n[源码](https://github.com/60kmlh/codeSplitting)\n\n### 参考资料\n[webpack1 code-splitting](http://webpack.github.io/docs/code-splitting.html)\n\n[webpack1 lazy-loading](https://webpack.js.org/guides/lazy-loading/)\n\n[基于webpack Code Splitting实现react组件的按需加载](https://yq.aliyun.com/articles/71200)\n","slug":"借助webpack实现前端代码的懒加载","published":1,"updated":"2017-08-26T08:27:01.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1cz001df4b46pg3j7b2","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>随着前端项目的复杂度越来越大，要加载的js文件体积也越来越大。为了提高项目的首屏加载速度，实现在首屏时只加载首屏需要用到的js文件，用户使用其他功能时再加载对应的js文件，我们需要对js进行代码分割和懒加载。</p>\n<h2 id=\"webppack的懒加载方案\"><a href=\"#webppack的懒加载方案\" class=\"headerlink\" title=\"webppack的懒加载方案\"></a>webppack的懒加载方案</h2><h3 id=\"require-ensure\"><a href=\"#require-ensure\" class=\"headerlink\" title=\"require.ensure()\"></a>require.ensure()</h3><p>webpack1(webpack2以上也可使用，但不推荐)使用require.ensure()定义一个代码切割点。</p>\n<blockquote>\n<p>Note: require.ensure only loads the modules, it doesn’t evaluate them.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.ensure(dependencies: <span class=\"built_in\">String</span>[], <span class=\"attr\">callback</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>), <span class=\"title\">errorCallback</span>: <span class=\"title\">function</span>(<span class=\"params\">error</span>), <span class=\"title\">chunkName</span>: <span class=\"title\">String</span>)</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>dependencies定义异步加载模块的依赖的一些模块，会和加载的模块打包到一起。</p>\n<p>callback定义回调函数，使用require参数可以在回调函数内动态引入其他模块。</p>\n<p>errorCallback定义加载错误时的回调函数。</p>\n<p>chunkName定义打包的chunk名称。</p>\n<h4 id=\"加载js函数\"><a href=\"#加载js函数\" class=\"headerlink\" title=\"加载js函数\"></a>加载js函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</div><div class=\"line\">    utils(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'module2'</span>)&#125;)</div><div class=\"line\">  &#125;,<span class=\"string\">'utils'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = fn2</div></pre></td></tr></table></figure>\n<h4 id=\"加载react组件\"><a href=\"#加载react组件\" class=\"headerlink\" title=\"加载react组件\"></a>加载react组件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadTimeComponent() &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.timeComponent) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> Time = <span class=\"built_in\">require</span>(<span class=\"string\">'./Time.js'</span>).default</div><div class=\"line\">    that.setState(&#123;</div><div class=\"line\">      <span class=\"attr\">timeComponent</span>: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Time</span> <span class=\"attr\">alertTime</span>=<span class=\"string\">&#123;(time)</span> =&gt;</span> that.alertTime(time)&#125; /&gt;</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,'Time')</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"配合react-router3加载路由组件\"><a href=\"#配合react-router3加载路由组件\" class=\"headerlink\" title=\"配合react-router3加载路由组件\"></a>配合react-router3加载路由组件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">    cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'./components/Home'</span>).default)</div><div class=\"line\">  &#125;, <span class=\"string\">'Home'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorLoading</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(<span class=\"string\">'Dynamic page loading failed'</span>, err);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;hashHistory&#125;</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">'/'</span> <span class=\"attr\">getComponent</span>=<span class=\"string\">&#123;(Home)&#125;</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"配合react-router4加载路由组件\"><a href=\"#配合react-router4加载路由组件\" class=\"headerlink\" title=\"配合react-router4加载路由组件\"></a>配合react-router4加载路由组件</h4><p>由于react-router4没有getComponent方法，需要借助bundle-loader<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Bundle <span class=\"keyword\">from</span> <span class=\"string\">'./components/Bundle.js'</span></div><div class=\"line\"><span class=\"keyword\">import</span> HomeContainer <span class=\"keyword\">from</span> <span class=\"string\">'bundle-loader?lazy&amp;name=[name]!./components/Home'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Bundle</span> <span class=\"attr\">load</span>=<span class=\"string\">&#123;HomeContainer&#125;</span>&gt;</span></span></div><div class=\"line\">    &#123;(Home) =&gt; <span class=\"tag\">&lt;<span class=\"name\">Home</span> /&gt;</span>&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Bundle</span>&gt;</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">exact</span> <span class=\"attr\">path</span>=<span class=\"string\">'/'</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Home&#125;</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default App</div></pre></td></tr></table></figure></p>\n<p>当Bundle组件的load方法被调用时，才会去加载对应的js文件。</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import()\"></a>import()</h3><p>webpack2 的ES2015 loader中提供了import()方法在运行时动态按需加载ES2015 Module。</p>\n<p>webpack将import()看做一个分割点并将其请求的module打包为一个独立的chunk。import()以模块名称作为参数名并且返回一个Promise对象。</p>\n<p>在Babel中使用import()方法，需要安装 dynamic-import插件并选择使用babel-preset-stage-3处理解析错误。</p>\n<h4 id=\"加载js函数-1\"><a href=\"#加载js函数-1\" class=\"headerlink\" title=\"加载js函数\"></a>加载js函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"utils\" */</span><span class=\"string\">'./utils'</span>).then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> utils = <span class=\"built_in\">module</span> <span class=\"comment\">//es6模块 module.default</span></div><div class=\"line\">    utils(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'module2'</span>)&#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = fn2</div><div class=\"line\"><span class=\"comment\">// webpackChunkNam定义chunk名称</span></div></pre></td></tr></table></figure>\n<h4 id=\"加载react组件-1\"><a href=\"#加载react组件-1\" class=\"headerlink\" title=\"加载react组件\"></a>加载react组件</h4><p>配合异步组件asyncComponent实现，内部借助async和await实现异步加载。<br>react-router4中使用也是可以配合asyncComponent。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncComponent <span class=\"keyword\">from</span> <span class=\"string\">'./AsyncComponent'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Head = asyncComponent(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"Head\" */</span><span class=\"string\">'./Head'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Head</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</div></pre></td></tr></table></figure></p>\n<h4 id=\"配合react-router3加载路由\"><a href=\"#配合react-router3加载路由\" class=\"headerlink\" title=\"配合react-router3加载路由\"></a>配合react-router3加载路由</h4><p>同样是借助getComponenet方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Route</div><div class=\"line\">  path=<span class=\"string\">'time'</span> </div><div class=\"line\">  getComponent=&#123;</div><div class=\"line\">    (location, cb) =&gt; <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"Time\" */</span><span class=\"string\">'./components/Time'</span>).</div><div class=\"line\">                      then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"built_in\">module</span>.default)).</div><div class=\"line\">                      catch(errorLoading)&#125; </div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"bundle-loader和Bundle组件的实现原理\"><a href=\"#bundle-loader和Bundle组件的实现原理\" class=\"headerlink\" title=\"bundle-loader和Bundle组件的实现原理\"></a>bundle-loader和Bundle组件的实现原理</h3><h4 id=\"bundle-loader核心源码\"><a href=\"#bundle-loader核心源码\" class=\"headerlink\" title=\"bundle-loader核心源码\"></a>bundle-loader核心源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(query.lazy) &#123;</div><div class=\"line\">\t\tresult = [</div><div class=\"line\">\t\t\t<span class=\"string\">\"module.exports = function(cb) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\trequire.ensure([], function(require) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t\tcb(require(\"</span>, loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!!\"</span> + remainingRequest), <span class=\"string\">\"));\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t&#125;\"</span> + chunkNameParam + <span class=\"string\">\");\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&#125;\"</span>];</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tresult = [</div><div class=\"line\">\t\t\t<span class=\"string\">\"var cbs = [], \\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tdata;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"module.exports = function(cb) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tif(cbs) cbs.push(cb);\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\telse cb(data);\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&#125;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"require.ensure([], function(require) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tdata = require(\"</span>, loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!!\"</span> + remainingRequest), <span class=\"string\">\");\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tvar callbacks = cbs;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tcbs = null;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tfor(var i = 0, l = callbacks.length; i &lt; l; i++) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t\tcallbacks[i](data);\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t&#125;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&#125;\"</span> + chunkNameParam + <span class=\"string\">\");\"</span>];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>可以看到bundle-loader也是借助require.ensure()实现异步加载，而且对方法进行了封装，可以传参name和lazy，分别定义chunk的名称和是否懒加载。</p>\n<h4 id=\"Bundle组件的核心源码\"><a href=\"#Bundle组件的核心源码\" class=\"headerlink\" title=\"Bundle组件的核心源码\"></a>Bundle组件的核心源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(props);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">mod</span>: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.load(<span class=\"keyword\">this</span>.props)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">componentWillReceiveProps(nextProps) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.load !== <span class=\"keyword\">this</span>.props.load) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.load(nextProps)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">load(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">        <span class=\"attr\">mod</span>: <span class=\"literal\">null</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    props.load(<span class=\"function\">(<span class=\"params\">mod</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            <span class=\"comment\">// handle both es imports and cjs</span></div><div class=\"line\">            mod: mod.default ? mod.default : mod</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.state.mod)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children(<span class=\"keyword\">this</span>.state.mod)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当bundle-loader加载文件加载完成时，Bundle组件的componentWillReceiveProps钩子被触发，调用load方法设置加载到的组件，最后将组件返回。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p><a href=\"https://github.com/60kmlh/codeSplitting\" target=\"_blank\" rel=\"external\">源码</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"external\">webpack1 code-splitting</a></p>\n<p><a href=\"https://webpack.js.org/guides/lazy-loading/\" target=\"_blank\" rel=\"external\">webpack1 lazy-loading</a></p>\n<p><a href=\"https://yq.aliyun.com/articles/71200\" target=\"_blank\" rel=\"external\">基于webpack Code Splitting实现react组件的按需加载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>随着前端项目的复杂度越来越大，要加载的js文件体积也越来越大。为了提高项目的首屏加载速度，实现在首屏时只加载首屏需要用到的js文件，用户使用其他功能时再加载对应的js文件，我们需要对js进行代码分割和懒加载。</p>\n<h2 id=\"webppack的懒加载方案\"><a href=\"#webppack的懒加载方案\" class=\"headerlink\" title=\"webppack的懒加载方案\"></a>webppack的懒加载方案</h2><h3 id=\"require-ensure\"><a href=\"#require-ensure\" class=\"headerlink\" title=\"require.ensure()\"></a>require.ensure()</h3><p>webpack1(webpack2以上也可使用，但不推荐)使用require.ensure()定义一个代码切割点。</p>\n<blockquote>\n<p>Note: require.ensure only loads the modules, it doesn’t evaluate them.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.ensure(dependencies: <span class=\"built_in\">String</span>[], <span class=\"attr\">callback</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>), <span class=\"title\">errorCallback</span>: <span class=\"title\">function</span>(<span class=\"params\">error</span>), <span class=\"title\">chunkName</span>: <span class=\"title\">String</span>)</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>dependencies定义异步加载模块的依赖的一些模块，会和加载的模块打包到一起。</p>\n<p>callback定义回调函数，使用require参数可以在回调函数内动态引入其他模块。</p>\n<p>errorCallback定义加载错误时的回调函数。</p>\n<p>chunkName定义打包的chunk名称。</p>\n<h4 id=\"加载js函数\"><a href=\"#加载js函数\" class=\"headerlink\" title=\"加载js函数\"></a>加载js函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</div><div class=\"line\">    utils(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'module2'</span>)&#125;)</div><div class=\"line\">  &#125;,<span class=\"string\">'utils'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = fn2</div></pre></td></tr></table></figure>\n<h4 id=\"加载react组件\"><a href=\"#加载react组件\" class=\"headerlink\" title=\"加载react组件\"></a>加载react组件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadTimeComponent() &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.timeComponent) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> Time = <span class=\"built_in\">require</span>(<span class=\"string\">'./Time.js'</span>).default</div><div class=\"line\">    that.setState(&#123;</div><div class=\"line\">      <span class=\"attr\">timeComponent</span>: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Time</span> <span class=\"attr\">alertTime</span>=<span class=\"string\">&#123;(time)</span> =&gt;</span> that.alertTime(time)&#125; /&gt;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,'Time')</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"配合react-router3加载路由组件\"><a href=\"#配合react-router3加载路由组件\" class=\"headerlink\" title=\"配合react-router3加载路由组件\"></a>配合react-router3加载路由组件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">    cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'./components/Home'</span>).default)</div><div class=\"line\">  &#125;, <span class=\"string\">'Home'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorLoading</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(<span class=\"string\">'Dynamic page loading failed'</span>, err);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;hashHistory&#125;</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">'/'</span> <span class=\"attr\">getComponent</span>=<span class=\"string\">&#123;(Home)&#125;</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"配合react-router4加载路由组件\"><a href=\"#配合react-router4加载路由组件\" class=\"headerlink\" title=\"配合react-router4加载路由组件\"></a>配合react-router4加载路由组件</h4><p>由于react-router4没有getComponent方法，需要借助bundle-loader<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Bundle <span class=\"keyword\">from</span> <span class=\"string\">'./components/Bundle.js'</span></div><div class=\"line\"><span class=\"keyword\">import</span> HomeContainer <span class=\"keyword\">from</span> <span class=\"string\">'bundle-loader?lazy&amp;name=[name]!./components/Home'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Bundle</span> <span class=\"attr\">load</span>=<span class=\"string\">&#123;HomeContainer&#125;</span>&gt;</span></div><div class=\"line\">    &#123;(Home) =&gt; <span class=\"tag\">&lt;<span class=\"name\">Home</span> /&gt;</span>&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Bundle</span>&gt;</span></span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">exact</span> <span class=\"attr\">path</span>=<span class=\"string\">'/'</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Home&#125;</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default App</span></div></pre></td></tr></table></figure></p>\n<p>当Bundle组件的load方法被调用时，才会去加载对应的js文件。</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import()\"></a>import()</h3><p>webpack2 的ES2015 loader中提供了import()方法在运行时动态按需加载ES2015 Module。</p>\n<p>webpack将import()看做一个分割点并将其请求的module打包为一个独立的chunk。import()以模块名称作为参数名并且返回一个Promise对象。</p>\n<p>在Babel中使用import()方法，需要安装 dynamic-import插件并选择使用babel-preset-stage-3处理解析错误。</p>\n<h4 id=\"加载js函数-1\"><a href=\"#加载js函数-1\" class=\"headerlink\" title=\"加载js函数\"></a>加载js函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"utils\" */</span><span class=\"string\">'./utils'</span>).then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> utils = <span class=\"built_in\">module</span> <span class=\"comment\">//es6模块 module.default</span></div><div class=\"line\">    utils(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'module2'</span>)&#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = fn2</div><div class=\"line\"><span class=\"comment\">// webpackChunkNam定义chunk名称</span></div></pre></td></tr></table></figure>\n<h4 id=\"加载react组件-1\"><a href=\"#加载react组件-1\" class=\"headerlink\" title=\"加载react组件\"></a>加载react组件</h4><p>配合异步组件asyncComponent实现，内部借助async和await实现异步加载。<br>react-router4中使用也是可以配合asyncComponent。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncComponent <span class=\"keyword\">from</span> <span class=\"string\">'./AsyncComponent'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Head = asyncComponent(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"Head\" */</span><span class=\"string\">'./Head'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Head</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</div></pre></td></tr></table></figure></p>\n<h4 id=\"配合react-router3加载路由\"><a href=\"#配合react-router3加载路由\" class=\"headerlink\" title=\"配合react-router3加载路由\"></a>配合react-router3加载路由</h4><p>同样是借助getComponenet方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Route</div><div class=\"line\">  path=<span class=\"string\">'time'</span> </div><div class=\"line\">  getComponent=&#123;</div><div class=\"line\">    (location, cb) =&gt; <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"Time\" */</span><span class=\"string\">'./components/Time'</span>).</div><div class=\"line\">                      then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"built_in\">module</span>.default)).</div><div class=\"line\">                      catch(errorLoading)&#125; </div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"bundle-loader和Bundle组件的实现原理\"><a href=\"#bundle-loader和Bundle组件的实现原理\" class=\"headerlink\" title=\"bundle-loader和Bundle组件的实现原理\"></a>bundle-loader和Bundle组件的实现原理</h3><h4 id=\"bundle-loader核心源码\"><a href=\"#bundle-loader核心源码\" class=\"headerlink\" title=\"bundle-loader核心源码\"></a>bundle-loader核心源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(query.lazy) &#123;</div><div class=\"line\">\t\tresult = [</div><div class=\"line\">\t\t\t<span class=\"string\">\"module.exports = function(cb) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\trequire.ensure([], function(require) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t\tcb(require(\"</span>, loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!!\"</span> + remainingRequest), <span class=\"string\">\"));\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t&#125;\"</span> + chunkNameParam + <span class=\"string\">\");\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&#125;\"</span>];</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tresult = [</div><div class=\"line\">\t\t\t<span class=\"string\">\"var cbs = [], \\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tdata;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"module.exports = function(cb) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tif(cbs) cbs.push(cb);\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\telse cb(data);\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&#125;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"require.ensure([], function(require) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tdata = require(\"</span>, loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!!\"</span> + remainingRequest), <span class=\"string\">\");\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tvar callbacks = cbs;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tcbs = null;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\tfor(var i = 0, l = callbacks.length; i &lt; l; i++) &#123;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t\tcallbacks[i](data);\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"\t&#125;\\n\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&#125;\"</span> + chunkNameParam + <span class=\"string\">\");\"</span>];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>可以看到bundle-loader也是借助require.ensure()实现异步加载，而且对方法进行了封装，可以传参name和lazy，分别定义chunk的名称和是否懒加载。</p>\n<h4 id=\"Bundle组件的核心源码\"><a href=\"#Bundle组件的核心源码\" class=\"headerlink\" title=\"Bundle组件的核心源码\"></a>Bundle组件的核心源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(props);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">mod</span>: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.load(<span class=\"keyword\">this</span>.props)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">componentWillReceiveProps(nextProps) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.load !== <span class=\"keyword\">this</span>.props.load) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.load(nextProps)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">load(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">        <span class=\"attr\">mod</span>: <span class=\"literal\">null</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    props.load(<span class=\"function\">(<span class=\"params\">mod</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            <span class=\"comment\">// handle both es imports and cjs</span></div><div class=\"line\">            mod: mod.default ? mod.default : mod</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.state.mod)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children(<span class=\"keyword\">this</span>.state.mod)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当bundle-loader加载文件加载完成时，Bundle组件的componentWillReceiveProps钩子被触发，调用load方法设置加载到的组件，最后将组件返回。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p><a href=\"https://github.com/60kmlh/codeSplitting\">源码</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://webpack.github.io/docs/code-splitting.html\">webpack1 code-splitting</a></p>\n<p><a href=\"https://webpack.js.org/guides/lazy-loading/\">webpack1 lazy-loading</a></p>\n<p><a href=\"https://yq.aliyun.com/articles/71200\">基于webpack Code Splitting实现react组件的按需加载</a></p>\n"},{"title":"关于npm依赖包版本号的规则","date":"2017-08-04T16:00:00.000Z","_content":"之前有新同事接手项目，npm包安装完后，发现有功能失效了，经过排查后发现，有个依赖包安装完后的版本和package.json写的不一样。同时包的api有大的变动，导致了问题的发生。package.json为什么没有“生效”，带着疑惑，在官网上面找到了答案。\n\n# semantic versioning\n根据官网的描述，npm包的版本采用semantic versioning，即语义化版本。\n\n研究了semantic versioning的[规范](https://docs.npmjs.com/misc/semver)后，找到了问题产生的原因。\n\n1. semantic versioning的命名规则：\n> 版本格式：主版本号.次版本号.修订号，\n> \n> 版本号递增规则如下：\n> \n> 主版本号：当你做了不兼容的 API 修改， \n> \n> 次版本号：当你做了向下兼容的功能性新增，\n> \n> 修订号：当你做了向下兼容的问题修正。\n> \n> 先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。\n2. 高级范围语法\n\n以^开头的版本号规则叫做Caret Ranges，官网是这样描述Caret Ranges的：\n> Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X.\n\n也就是说^开头的版本号， 不允许对[主版本号, 次版本号, 修订号]元组中最左边非零数字的更改，其他两位是可以更改的。\n\n以~开头的版本号规则叫做Tilde Ranges，Tilde Ranges的规则如下：\n> Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.\n\n和Caret Ranges相比，Tile Ranges只允许更改[主版本号, 次版本号, 修订号]的最后一位，即修订号。\n\n例子如下：\n\n^1.2.1 := >=1.2.1 <2.0.0\n\n~1.2.1 :=  >=1.2.1 <1.3.0\n\n而当运行npm i --save xx的时候，npm会优先考虑Caret Ranges，package.json里面的依赖包版本号就是^开头的。\n\n当包的次版本号或修订号有更新的时候，执行npm i安装下来的就是符合规则的最新的包了，而不一定是正确安装的版本。\n\n关于之前的问题，更新小版本的同时，包的api又发生了变动，才导致了问题的发生。\n\nsemantic versioning的规范里有一条是这样的：\n> Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. \n\n主版本号 X（X.y.z | X > 0）必须在有任何不兼容的修改被加入公共 API 时递增。\n\n也就是说之前出问题的包，如果严格遵循了semantic versioning,在api有break change是主版本号进行递增，是不会升级到api不兼容的版本，导致功能失效的。\n# 解决办法\n一般默认npm安装使用^开头的版本号是比较好的选择，可以接受小版本和补丁版本的变化，保证包中的小bug可以得到修复，使用~版本更改会更小。\n\n也可以指定特定的版本号，直接写1.1.2，前面不加~^或其它符号，这样就是写死了版本，但是如果依赖包发布新版本修复了一些小bug，则需要手动取更改package.json文件里对应的版本号。\n# 参考资料\n1. [https://docs.npmjs.com/misc/semver](https://docs.npmjs.com/misc/semver)\n2. [http://semver.org](http://semver.org)\n","source":"_posts/关于npm依赖包版本号的规则.md","raw":"---\ntitle: 关于npm依赖包版本号的规则\ndate: 2017-08-05\ntags: ['npm','版本']\ncategories: ['工具']\n---\n之前有新同事接手项目，npm包安装完后，发现有功能失效了，经过排查后发现，有个依赖包安装完后的版本和package.json写的不一样。同时包的api有大的变动，导致了问题的发生。package.json为什么没有“生效”，带着疑惑，在官网上面找到了答案。\n\n# semantic versioning\n根据官网的描述，npm包的版本采用semantic versioning，即语义化版本。\n\n研究了semantic versioning的[规范](https://docs.npmjs.com/misc/semver)后，找到了问题产生的原因。\n\n1. semantic versioning的命名规则：\n> 版本格式：主版本号.次版本号.修订号，\n> \n> 版本号递增规则如下：\n> \n> 主版本号：当你做了不兼容的 API 修改， \n> \n> 次版本号：当你做了向下兼容的功能性新增，\n> \n> 修订号：当你做了向下兼容的问题修正。\n> \n> 先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。\n2. 高级范围语法\n\n以^开头的版本号规则叫做Caret Ranges，官网是这样描述Caret Ranges的：\n> Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X.\n\n也就是说^开头的版本号， 不允许对[主版本号, 次版本号, 修订号]元组中最左边非零数字的更改，其他两位是可以更改的。\n\n以~开头的版本号规则叫做Tilde Ranges，Tilde Ranges的规则如下：\n> Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.\n\n和Caret Ranges相比，Tile Ranges只允许更改[主版本号, 次版本号, 修订号]的最后一位，即修订号。\n\n例子如下：\n\n^1.2.1 := >=1.2.1 <2.0.0\n\n~1.2.1 :=  >=1.2.1 <1.3.0\n\n而当运行npm i --save xx的时候，npm会优先考虑Caret Ranges，package.json里面的依赖包版本号就是^开头的。\n\n当包的次版本号或修订号有更新的时候，执行npm i安装下来的就是符合规则的最新的包了，而不一定是正确安装的版本。\n\n关于之前的问题，更新小版本的同时，包的api又发生了变动，才导致了问题的发生。\n\nsemantic versioning的规范里有一条是这样的：\n> Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. \n\n主版本号 X（X.y.z | X > 0）必须在有任何不兼容的修改被加入公共 API 时递增。\n\n也就是说之前出问题的包，如果严格遵循了semantic versioning,在api有break change是主版本号进行递增，是不会升级到api不兼容的版本，导致功能失效的。\n# 解决办法\n一般默认npm安装使用^开头的版本号是比较好的选择，可以接受小版本和补丁版本的变化，保证包中的小bug可以得到修复，使用~版本更改会更小。\n\n也可以指定特定的版本号，直接写1.1.2，前面不加~^或其它符号，这样就是写死了版本，但是如果依赖包发布新版本修复了一些小bug，则需要手动取更改package.json文件里对应的版本号。\n# 参考资料\n1. [https://docs.npmjs.com/misc/semver](https://docs.npmjs.com/misc/semver)\n2. [http://semver.org](http://semver.org)\n","slug":"关于npm依赖包版本号的规则","published":1,"updated":"2017-08-20T14:59:33.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1d2001gf4b4w3z8i1mq","content":"<p>之前有新同事接手项目，npm包安装完后，发现有功能失效了，经过排查后发现，有个依赖包安装完后的版本和package.json写的不一样。同时包的api有大的变动，导致了问题的发生。package.json为什么没有“生效”，带着疑惑，在官网上面找到了答案。</p>\n<h1 id=\"semantic-versioning\"><a href=\"#semantic-versioning\" class=\"headerlink\" title=\"semantic versioning\"></a>semantic versioning</h1><p>根据官网的描述，npm包的版本采用semantic versioning，即语义化版本。</p>\n<p>研究了semantic versioning的<a href=\"https://docs.npmjs.com/misc/semver\" target=\"_blank\" rel=\"external\">规范</a>后，找到了问题产生的原因。</p>\n<ol>\n<li>semantic versioning的命名规则：<blockquote>\n<p>版本格式：主版本号.次版本号.修订号，</p>\n<p>版本号递增规则如下：</p>\n<p>主版本号：当你做了不兼容的 API 修改， </p>\n<p>次版本号：当你做了向下兼容的功能性新增，</p>\n<p>修订号：当你做了向下兼容的问题修正。</p>\n<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>\n</blockquote>\n</li>\n<li>高级范围语法</li>\n</ol>\n<p>以^开头的版本号规则叫做Caret Ranges，官网是这样描述Caret Ranges的：</p>\n<blockquote>\n<p>Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X &gt;=0.1.0, and no updates for versions 0.0.X.</p>\n</blockquote>\n<p>也就是说^开头的版本号， 不允许对[主版本号, 次版本号, 修订号]元组中最左边非零数字的更改，其他两位是可以更改的。</p>\n<p>以~开头的版本号规则叫做Tilde Ranges，Tilde Ranges的规则如下：</p>\n<blockquote>\n<p>Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.</p>\n</blockquote>\n<p>和Caret Ranges相比，Tile Ranges只允许更改[主版本号, 次版本号, 修订号]的最后一位，即修订号。</p>\n<p>例子如下：</p>\n<p>^1.2.1 := &gt;=1.2.1 &lt;2.0.0</p>\n<p>~1.2.1 :=  &gt;=1.2.1 &lt;1.3.0</p>\n<p>而当运行npm i –save xx的时候，npm会优先考虑Caret Ranges，package.json里面的依赖包版本号就是^开头的。</p>\n<p>当包的次版本号或修订号有更新的时候，执行npm i安装下来的就是符合规则的最新的包了，而不一定是正确安装的版本。</p>\n<p>关于之前的问题，更新小版本的同时，包的api又发生了变动，才导致了问题的发生。</p>\n<p>semantic versioning的规范里有一条是这样的：</p>\n<blockquote>\n<p>Major version X (X.y.z | X &gt; 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. </p>\n</blockquote>\n<p>主版本号 X（X.y.z | X &gt; 0）必须在有任何不兼容的修改被加入公共 API 时递增。</p>\n<p>也就是说之前出问题的包，如果严格遵循了semantic versioning,在api有break change是主版本号进行递增，是不会升级到api不兼容的版本，导致功能失效的。</p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>一般默认npm安装使用^开头的版本号是比较好的选择，可以接受小版本和补丁版本的变化，保证包中的小bug可以得到修复，使用~版本更改会更小。</p>\n<p>也可以指定特定的版本号，直接写1.1.2，前面不加~^或其它符号，这样就是写死了版本，但是如果依赖包发布新版本修复了一些小bug，则需要手动取更改package.json文件里对应的版本号。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a href=\"https://docs.npmjs.com/misc/semver\" target=\"_blank\" rel=\"external\">https://docs.npmjs.com/misc/semver</a></li>\n<li><a href=\"http://semver.org\" target=\"_blank\" rel=\"external\">http://semver.org</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>之前有新同事接手项目，npm包安装完后，发现有功能失效了，经过排查后发现，有个依赖包安装完后的版本和package.json写的不一样。同时包的api有大的变动，导致了问题的发生。package.json为什么没有“生效”，带着疑惑，在官网上面找到了答案。</p>\n<h1 id=\"semantic-versioning\"><a href=\"#semantic-versioning\" class=\"headerlink\" title=\"semantic versioning\"></a>semantic versioning</h1><p>根据官网的描述，npm包的版本采用semantic versioning，即语义化版本。</p>\n<p>研究了semantic versioning的<a href=\"https://docs.npmjs.com/misc/semver\">规范</a>后，找到了问题产生的原因。</p>\n<ol>\n<li>semantic versioning的命名规则：<blockquote>\n<p>版本格式：主版本号.次版本号.修订号，</p>\n<p>版本号递增规则如下：</p>\n<p>主版本号：当你做了不兼容的 API 修改， </p>\n<p>次版本号：当你做了向下兼容的功能性新增，</p>\n<p>修订号：当你做了向下兼容的问题修正。</p>\n<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>\n</blockquote>\n</li>\n<li>高级范围语法</li>\n</ol>\n<p>以^开头的版本号规则叫做Caret Ranges，官网是这样描述Caret Ranges的：</p>\n<blockquote>\n<p>Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X &gt;=0.1.0, and no updates for versions 0.0.X.</p>\n</blockquote>\n<p>也就是说^开头的版本号， 不允许对[主版本号, 次版本号, 修订号]元组中最左边非零数字的更改，其他两位是可以更改的。</p>\n<p>以~开头的版本号规则叫做Tilde Ranges，Tilde Ranges的规则如下：</p>\n<blockquote>\n<p>Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.</p>\n</blockquote>\n<p>和Caret Ranges相比，Tile Ranges只允许更改[主版本号, 次版本号, 修订号]的最后一位，即修订号。</p>\n<p>例子如下：</p>\n<p>^1.2.1 := &gt;=1.2.1 &lt;2.0.0</p>\n<p>~1.2.1 :=  &gt;=1.2.1 &lt;1.3.0</p>\n<p>而当运行npm i –save xx的时候，npm会优先考虑Caret Ranges，package.json里面的依赖包版本号就是^开头的。</p>\n<p>当包的次版本号或修订号有更新的时候，执行npm i安装下来的就是符合规则的最新的包了，而不一定是正确安装的版本。</p>\n<p>关于之前的问题，更新小版本的同时，包的api又发生了变动，才导致了问题的发生。</p>\n<p>semantic versioning的规范里有一条是这样的：</p>\n<blockquote>\n<p>Major version X (X.y.z | X &gt; 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. </p>\n</blockquote>\n<p>主版本号 X（X.y.z | X &gt; 0）必须在有任何不兼容的修改被加入公共 API 时递增。</p>\n<p>也就是说之前出问题的包，如果严格遵循了semantic versioning,在api有break change是主版本号进行递增，是不会升级到api不兼容的版本，导致功能失效的。</p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>一般默认npm安装使用^开头的版本号是比较好的选择，可以接受小版本和补丁版本的变化，保证包中的小bug可以得到修复，使用~版本更改会更小。</p>\n<p>也可以指定特定的版本号，直接写1.1.2，前面不加~^或其它符号，这样就是写死了版本，但是如果依赖包发布新版本修复了一些小bug，则需要手动取更改package.json文件里对应的版本号。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a href=\"https://docs.npmjs.com/misc/semver\">https://docs.npmjs.com/misc/semver</a></li>\n<li><a href=\"http://semver.org\">http://semver.org</a></li>\n</ol>\n"},{"title":"使用karma+mocha+chai为vue组件进行单元测试","date":"2017-06-23T16:00:00.000Z","_content":"最近学习前端的单元测试，并对vue组件进行了单元测试。\n## 主要工具\n### karma\nKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。\n\n负责提供测试的浏览器环境，执行测试框架，已经生成覆盖率报告。\n\n关于karma的配置\n````javascript\nvar webpackConfig = require('../../build/webpack.test.conf')\n\nmodule.exports = function (config) {\n  config.set({\n    // to run in additional browsers:\n    // 1. install corresponding karma launcher\n    //    http://karma-runner.github.io/0.13/config/browsers.html\n    // 2. add it to the `browsers` array below.\n    browsers: ['PhantomJS'],// 测试采用的浏览器环境\n    frameworks: ['mocha', 'sinon-chai', 'phantomjs-shim'],// 使用的测试框架\n    reporters: ['spec', 'coverage'],// 设定报告输出插件\n    files: ['./index.js'],// 执行文件入口，（如果是使用vue-cli生成的index.js，会去读specs文件夹下的测试代码）\n    preprocessors: {\n      './index.js': ['webpack', 'sourcemap']\n    },// 预处理器，测试之前对文件进行处理less编译，coffeeScript编译之类的，这里是加入webpack与sourcemap插件\n    webpack: webpackConfig, // webpack配置\n    webpackMiddleware: {\n      noInfo: true\n    }, // webpack中间件配置，可配置不输出信息，或者只输出错误信息等\n    coverageReporter: {\n      dir: './coverage',\n      reporters: [\n        { type: 'lcov', subdir: '.' },\n        { type: 'text-summary' }\n      ]\n    }// 生成覆盖率报告的配置\n  })\n}\n````\n### mocha\nmocha是一个Javascript测试框架，用来运行测试。\nmocha使用多个describe块来展示不同的组件，然后在其中添加it块来制定一个单一的测试。\n### chai\nchai支持BDD风格和TDD风格的断言库，可以和任何的javascript测试框架配合使用。\n\n'断言'就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。\n\n下面的例子采用expect的断言风格。\n\nTDD指的是Test Driven Development，测试驱动开发，先编写单元测试代码，再编写代码实现功能，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n\nBDD指的是Behavior Driven Development，行为驱动开发，是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作，是从用户的需求出发，强调系统行为。\n## 对vue分页组件进行单元测试\n项目采用vue-cli生成的，初始化的时候把测试相关的选项都选是。\n\nvue-cli生成的目录结构里，和测试相关的是test文件夹。\n````javascript\n├─test\n   ├─e2e // 端到端测试\n   │\n   │\n   └─unit // 单元测试\n      ├─specs\n      │    └─Pagination.spec.js // 组件对应的测试代码\n      │──.eslintrc // eslint配置\n      │──idnex.js // karma执行的入口文件\n      │──utils.js // 工具方法\n      └──karma.conf.js // karma配置\n````\n\n### 创建vue的组件实例\n根据[vue官方文档对单元测试的介绍](https://cn.vuejs.org/v2/guide/unit-testing.html)，可以使用Vue.extend()创建一个实例并检查渲染输出,同时使用$mount()进行挂载。\n\n将该方法进行封装：\n````javascript\nimport Vue from 'vue'\n\nexport const createCompInstance = (Component, propsData) => {\n  const Constructor = Vue.extend(Component)\n  return new Constructor({\n    propsData\n  }).$mount()\n}\n\n````\n### 针对分页组件编写的单元测试\n测试组件被创建成功。\n\n通过exist断言判断组件实例是否创建，挂载。\n````javascript\nlet vm\nit('create', () => {\n  vm = createCompInstance(Pagination, {\n    totalNum: 100\n  })\n  const elm = vm.$el\n  // prev\n  expect(elm.querySelector('.prev')).to.exist\n  // pager\n  expect(elm.querySelector('.pager')).to.exist\n  // next\n  expect(elm.querySelector('.next')).to.exist\n  // jumper\n  expect(elm.querySelector('input')).to.exist\n  expect(elm.querySelector('.btn')).to.exist\n})\n````\n测试页码的点击。\n\n获取组件挂载的DOM进行点击，再进行equal断言，判断当页码是否已经改变。\n````javascript\nit('event: click page', () => {\n  vm = createCompInstance(Pagination, {\n    pageSizes: [5, 10, 20],\n    buttonCount: 10,\n    totalNum: 100\n  })\n  const elm = vm.$el\n\n  // click 3\n  elm.querySelectorAll('.pager')[2].click()\n\n  setTimeout(() => {\n    expect(elm.querySelectorAll('.pager')[2].className).to.equal('current')\n    expect(vm.currentPage).to.equal(3)\n    done()\n  }, 100)\n})\n````\n实现按钮点击：通过获取相关元素el，执行 el.click() 方法实现。\n\n> 由于 Vue 进行 异步更新DOM 的情况，一些依赖DOM更新结果的断言必须在 Vue.nextTick 回调中进行。\n\n涉及到 Vue.nextTick 和 setTimeout 等异步操作的测试，要使用 done() 来标记完成时间点。\n\n在describe的回调函数传入done，之后才能进行调用。\n\n一开始的测试覆盖率很低，经过不断的调整和补充测试用例，最后的测试结果如下：\n![test result](http://oq8q06ybp.bkt.clouddn.com/image/unittest.PNG)\n以及测试覆盖率报告\n![test coverage](http://oq8q06ybp.bkt.clouddn.com/image/testCoverage.PNG)\n结果测试的覆盖率还是没有达到百分之百，好像还有一些分支条件没有覆盖到，得继续完善。\n## 参考资料\n1. [karma](http://karma-runner.github.io)\n2. [mocha](https://mochajs.org/)\n3. [chai](http://chaijs.com/)\n4. [vue单元测试](https://cn.vuejs.org/v2/guide/unit-testing.html)","source":"_posts/使用karma+mocha+chai为vue组件进行单元测试.md","raw":"---\ntitle: 使用karma+mocha+chai为vue组件进行单元测试\ndate: 2017-06-24\ntags: ['vue','karma','mocha','chai']\ncategories: ['测试']\n---\n最近学习前端的单元测试，并对vue组件进行了单元测试。\n## 主要工具\n### karma\nKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。\n\n负责提供测试的浏览器环境，执行测试框架，已经生成覆盖率报告。\n\n关于karma的配置\n````javascript\nvar webpackConfig = require('../../build/webpack.test.conf')\n\nmodule.exports = function (config) {\n  config.set({\n    // to run in additional browsers:\n    // 1. install corresponding karma launcher\n    //    http://karma-runner.github.io/0.13/config/browsers.html\n    // 2. add it to the `browsers` array below.\n    browsers: ['PhantomJS'],// 测试采用的浏览器环境\n    frameworks: ['mocha', 'sinon-chai', 'phantomjs-shim'],// 使用的测试框架\n    reporters: ['spec', 'coverage'],// 设定报告输出插件\n    files: ['./index.js'],// 执行文件入口，（如果是使用vue-cli生成的index.js，会去读specs文件夹下的测试代码）\n    preprocessors: {\n      './index.js': ['webpack', 'sourcemap']\n    },// 预处理器，测试之前对文件进行处理less编译，coffeeScript编译之类的，这里是加入webpack与sourcemap插件\n    webpack: webpackConfig, // webpack配置\n    webpackMiddleware: {\n      noInfo: true\n    }, // webpack中间件配置，可配置不输出信息，或者只输出错误信息等\n    coverageReporter: {\n      dir: './coverage',\n      reporters: [\n        { type: 'lcov', subdir: '.' },\n        { type: 'text-summary' }\n      ]\n    }// 生成覆盖率报告的配置\n  })\n}\n````\n### mocha\nmocha是一个Javascript测试框架，用来运行测试。\nmocha使用多个describe块来展示不同的组件，然后在其中添加it块来制定一个单一的测试。\n### chai\nchai支持BDD风格和TDD风格的断言库，可以和任何的javascript测试框架配合使用。\n\n'断言'就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。\n\n下面的例子采用expect的断言风格。\n\nTDD指的是Test Driven Development，测试驱动开发，先编写单元测试代码，再编写代码实现功能，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n\nBDD指的是Behavior Driven Development，行为驱动开发，是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作，是从用户的需求出发，强调系统行为。\n## 对vue分页组件进行单元测试\n项目采用vue-cli生成的，初始化的时候把测试相关的选项都选是。\n\nvue-cli生成的目录结构里，和测试相关的是test文件夹。\n````javascript\n├─test\n   ├─e2e // 端到端测试\n   │\n   │\n   └─unit // 单元测试\n      ├─specs\n      │    └─Pagination.spec.js // 组件对应的测试代码\n      │──.eslintrc // eslint配置\n      │──idnex.js // karma执行的入口文件\n      │──utils.js // 工具方法\n      └──karma.conf.js // karma配置\n````\n\n### 创建vue的组件实例\n根据[vue官方文档对单元测试的介绍](https://cn.vuejs.org/v2/guide/unit-testing.html)，可以使用Vue.extend()创建一个实例并检查渲染输出,同时使用$mount()进行挂载。\n\n将该方法进行封装：\n````javascript\nimport Vue from 'vue'\n\nexport const createCompInstance = (Component, propsData) => {\n  const Constructor = Vue.extend(Component)\n  return new Constructor({\n    propsData\n  }).$mount()\n}\n\n````\n### 针对分页组件编写的单元测试\n测试组件被创建成功。\n\n通过exist断言判断组件实例是否创建，挂载。\n````javascript\nlet vm\nit('create', () => {\n  vm = createCompInstance(Pagination, {\n    totalNum: 100\n  })\n  const elm = vm.$el\n  // prev\n  expect(elm.querySelector('.prev')).to.exist\n  // pager\n  expect(elm.querySelector('.pager')).to.exist\n  // next\n  expect(elm.querySelector('.next')).to.exist\n  // jumper\n  expect(elm.querySelector('input')).to.exist\n  expect(elm.querySelector('.btn')).to.exist\n})\n````\n测试页码的点击。\n\n获取组件挂载的DOM进行点击，再进行equal断言，判断当页码是否已经改变。\n````javascript\nit('event: click page', () => {\n  vm = createCompInstance(Pagination, {\n    pageSizes: [5, 10, 20],\n    buttonCount: 10,\n    totalNum: 100\n  })\n  const elm = vm.$el\n\n  // click 3\n  elm.querySelectorAll('.pager')[2].click()\n\n  setTimeout(() => {\n    expect(elm.querySelectorAll('.pager')[2].className).to.equal('current')\n    expect(vm.currentPage).to.equal(3)\n    done()\n  }, 100)\n})\n````\n实现按钮点击：通过获取相关元素el，执行 el.click() 方法实现。\n\n> 由于 Vue 进行 异步更新DOM 的情况，一些依赖DOM更新结果的断言必须在 Vue.nextTick 回调中进行。\n\n涉及到 Vue.nextTick 和 setTimeout 等异步操作的测试，要使用 done() 来标记完成时间点。\n\n在describe的回调函数传入done，之后才能进行调用。\n\n一开始的测试覆盖率很低，经过不断的调整和补充测试用例，最后的测试结果如下：\n![test result](http://oq8q06ybp.bkt.clouddn.com/image/unittest.PNG)\n以及测试覆盖率报告\n![test coverage](http://oq8q06ybp.bkt.clouddn.com/image/testCoverage.PNG)\n结果测试的覆盖率还是没有达到百分之百，好像还有一些分支条件没有覆盖到，得继续完善。\n## 参考资料\n1. [karma](http://karma-runner.github.io)\n2. [mocha](https://mochajs.org/)\n3. [chai](http://chaijs.com/)\n4. [vue单元测试](https://cn.vuejs.org/v2/guide/unit-testing.html)","slug":"使用karma+mocha+chai为vue组件进行单元测试","published":1,"updated":"2017-07-24T14:49:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1d5001lf4b49ht7r23b","content":"<p>最近学习前端的单元测试，并对vue组件进行了单元测试。</p>\n<h2 id=\"主要工具\"><a href=\"#主要工具\" class=\"headerlink\" title=\"主要工具\"></a>主要工具</h2><h3 id=\"karma\"><a href=\"#karma\" class=\"headerlink\" title=\"karma\"></a>karma</h3><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。</p>\n<p>负责提供测试的浏览器环境，执行测试框架，已经生成覆盖率报告。</p>\n<p>关于karma的配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../../build/webpack.test.conf'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// to run in additional browsers:</span></div><div class=\"line\">    <span class=\"comment\">// 1. install corresponding karma launcher</span></div><div class=\"line\">    <span class=\"comment\">//    http://karma-runner.github.io/0.13/config/browsers.html</span></div><div class=\"line\">    <span class=\"comment\">// 2. add it to the `browsers` array below.</span></div><div class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],<span class=\"comment\">// 测试采用的浏览器环境</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'sinon-chai'</span>, <span class=\"string\">'phantomjs-shim'</span>],<span class=\"comment\">// 使用的测试框架</span></div><div class=\"line\">    reporters: [<span class=\"string\">'spec'</span>, <span class=\"string\">'coverage'</span>],<span class=\"comment\">// 设定报告输出插件</span></div><div class=\"line\">    files: [<span class=\"string\">'./index.js'</span>],<span class=\"comment\">// 执行文件入口，（如果是使用vue-cli生成的index.js，会去读specs文件夹下的测试代码）</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">      <span class=\"string\">'./index.js'</span>: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'sourcemap'</span>]</div><div class=\"line\">    &#125;,<span class=\"comment\">// 预处理器，测试之前对文件进行处理less编译，coffeeScript编译之类的，这里是加入webpack与sourcemap插件</span></div><div class=\"line\">    webpack: webpackConfig, <span class=\"comment\">// webpack配置</span></div><div class=\"line\">    webpackMiddleware: &#123;</div><div class=\"line\">      <span class=\"attr\">noInfo</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;, <span class=\"comment\">// webpack中间件配置，可配置不输出信息，或者只输出错误信息等</span></div><div class=\"line\">    coverageReporter: &#123;</div><div class=\"line\">      <span class=\"attr\">dir</span>: <span class=\"string\">'./coverage'</span>,</div><div class=\"line\">      <span class=\"attr\">reporters</span>: [</div><div class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'lcov'</span>, <span class=\"attr\">subdir</span>: <span class=\"string\">'.'</span> &#125;,</div><div class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text-summary'</span> &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;<span class=\"comment\">// 生成覆盖率报告的配置</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h3><p>mocha是一个Javascript测试框架，用来运行测试。<br>mocha使用多个describe块来展示不同的组件，然后在其中添加it块来制定一个单一的测试。</p>\n<h3 id=\"chai\"><a href=\"#chai\" class=\"headerlink\" title=\"chai\"></a>chai</h3><p>chai支持BDD风格和TDD风格的断言库，可以和任何的javascript测试框架配合使用。</p>\n<p>‘断言’就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。</p>\n<p>下面的例子采用expect的断言风格。</p>\n<p>TDD指的是Test Driven Development，测试驱动开发，先编写单元测试代码，再编写代码实现功能，运行单元测试代码，循环此过程，直到整个单元测试都通过。</p>\n<p>BDD指的是Behavior Driven Development，行为驱动开发，是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作，是从用户的需求出发，强调系统行为。</p>\n<h2 id=\"对vue分页组件进行单元测试\"><a href=\"#对vue分页组件进行单元测试\" class=\"headerlink\" title=\"对vue分页组件进行单元测试\"></a>对vue分页组件进行单元测试</h2><p>项目采用vue-cli生成的，初始化的时候把测试相关的选项都选是。</p>\n<p>vue-cli生成的目录结构里，和测试相关的是test文件夹。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─test</div><div class=\"line\">   ├─e2e <span class=\"comment\">// 端到端测试</span></div><div class=\"line\">   │</div><div class=\"line\">   │</div><div class=\"line\">   └─unit <span class=\"comment\">// 单元测试</span></div><div class=\"line\">      ├─specs</div><div class=\"line\">      │    └─Pagination.spec.js <span class=\"comment\">// 组件对应的测试代码</span></div><div class=\"line\">      │──.eslintrc <span class=\"comment\">// eslint配置</span></div><div class=\"line\">      │──idnex.js <span class=\"comment\">// karma执行的入口文件</span></div><div class=\"line\">      │──utils.js <span class=\"comment\">// 工具方法</span></div><div class=\"line\">      └──karma.conf.js <span class=\"comment\">// karma配置</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"创建vue的组件实例\"><a href=\"#创建vue的组件实例\" class=\"headerlink\" title=\"创建vue的组件实例\"></a>创建vue的组件实例</h3><p>根据<a href=\"https://cn.vuejs.org/v2/guide/unit-testing.html\" target=\"_blank\" rel=\"external\">vue官方文档对单元测试的介绍</a>，可以使用Vue.extend()创建一个实例并检查渲染输出,同时使用$mount()进行挂载。</p>\n<p>将该方法进行封装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createCompInstance = <span class=\"function\">(<span class=\"params\">Component, propsData</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> Constructor = Vue.extend(Component)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Constructor(&#123;</div><div class=\"line\">    propsData</div><div class=\"line\">  &#125;).$mount()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"针对分页组件编写的单元测试\"><a href=\"#针对分页组件编写的单元测试\" class=\"headerlink\" title=\"针对分页组件编写的单元测试\"></a>针对分页组件编写的单元测试</h3><p>测试组件被创建成功。</p>\n<p>通过exist断言判断组件实例是否创建，挂载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> vm</div><div class=\"line\">it(<span class=\"string\">'create'</span>, () =&gt; &#123;</div><div class=\"line\">  vm = createCompInstance(Pagination, &#123;</div><div class=\"line\">    <span class=\"attr\">totalNum</span>: <span class=\"number\">100</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">const</span> elm = vm.$el</div><div class=\"line\">  <span class=\"comment\">// prev</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.prev'</span>)).to.exist</div><div class=\"line\">  <span class=\"comment\">// pager</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.pager'</span>)).to.exist</div><div class=\"line\">  <span class=\"comment\">// next</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.next'</span>)).to.exist</div><div class=\"line\">  <span class=\"comment\">// jumper</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'input'</span>)).to.exist</div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.btn'</span>)).to.exist</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>测试页码的点击。</p>\n<p>获取组件挂载的DOM进行点击，再进行equal断言，判断当页码是否已经改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'event: click page'</span>, () =&gt; &#123;</div><div class=\"line\">  vm = createCompInstance(Pagination, &#123;</div><div class=\"line\">    <span class=\"attr\">pageSizes</span>: [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>],</div><div class=\"line\">    <span class=\"attr\">buttonCount</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    <span class=\"attr\">totalNum</span>: <span class=\"number\">100</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">const</span> elm = vm.$el</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// click 3</span></div><div class=\"line\">  elm.querySelectorAll(<span class=\"string\">'.pager'</span>)[<span class=\"number\">2</span>].click()</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    expect(elm.querySelectorAll(<span class=\"string\">'.pager'</span>)[<span class=\"number\">2</span>].className).to.equal(<span class=\"string\">'current'</span>)</div><div class=\"line\">    expect(vm.currentPage).to.equal(<span class=\"number\">3</span>)</div><div class=\"line\">    done()</div><div class=\"line\">  &#125;, <span class=\"number\">100</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>实现按钮点击：通过获取相关元素el，执行 el.click() 方法实现。</p>\n<blockquote>\n<p>由于 Vue 进行 异步更新DOM 的情况，一些依赖DOM更新结果的断言必须在 Vue.nextTick 回调中进行。</p>\n</blockquote>\n<p>涉及到 Vue.nextTick 和 setTimeout 等异步操作的测试，要使用 done() 来标记完成时间点。</p>\n<p>在describe的回调函数传入done，之后才能进行调用。</p>\n<p>一开始的测试覆盖率很低，经过不断的调整和补充测试用例，最后的测试结果如下：<br><img src=\"http://oq8q06ybp.bkt.clouddn.com/image/unittest.PNG\" alt=\"test result\"><br>以及测试覆盖率报告<br><img src=\"http://oq8q06ybp.bkt.clouddn.com/image/testCoverage.PNG\" alt=\"test coverage\"><br>结果测试的覆盖率还是没有达到百分之百，好像还有一些分支条件没有覆盖到，得继续完善。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://karma-runner.github.io\" target=\"_blank\" rel=\"external\">karma</a></li>\n<li><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"external\">mocha</a></li>\n<li><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">chai</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/unit-testing.html\" target=\"_blank\" rel=\"external\">vue单元测试</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近学习前端的单元测试，并对vue组件进行了单元测试。</p>\n<h2 id=\"主要工具\"><a href=\"#主要工具\" class=\"headerlink\" title=\"主要工具\"></a>主要工具</h2><h3 id=\"karma\"><a href=\"#karma\" class=\"headerlink\" title=\"karma\"></a>karma</h3><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。</p>\n<p>负责提供测试的浏览器环境，执行测试框架，已经生成覆盖率报告。</p>\n<p>关于karma的配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../../build/webpack.test.conf'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// to run in additional browsers:</span></div><div class=\"line\">    <span class=\"comment\">// 1. install corresponding karma launcher</span></div><div class=\"line\">    <span class=\"comment\">//    http://karma-runner.github.io/0.13/config/browsers.html</span></div><div class=\"line\">    <span class=\"comment\">// 2. add it to the `browsers` array below.</span></div><div class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],<span class=\"comment\">// 测试采用的浏览器环境</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'sinon-chai'</span>, <span class=\"string\">'phantomjs-shim'</span>],<span class=\"comment\">// 使用的测试框架</span></div><div class=\"line\">    reporters: [<span class=\"string\">'spec'</span>, <span class=\"string\">'coverage'</span>],<span class=\"comment\">// 设定报告输出插件</span></div><div class=\"line\">    files: [<span class=\"string\">'./index.js'</span>],<span class=\"comment\">// 执行文件入口，（如果是使用vue-cli生成的index.js，会去读specs文件夹下的测试代码）</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">      <span class=\"string\">'./index.js'</span>: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'sourcemap'</span>]</div><div class=\"line\">    &#125;,<span class=\"comment\">// 预处理器，测试之前对文件进行处理less编译，coffeeScript编译之类的，这里是加入webpack与sourcemap插件</span></div><div class=\"line\">    webpack: webpackConfig, <span class=\"comment\">// webpack配置</span></div><div class=\"line\">    webpackMiddleware: &#123;</div><div class=\"line\">      <span class=\"attr\">noInfo</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;, <span class=\"comment\">// webpack中间件配置，可配置不输出信息，或者只输出错误信息等</span></div><div class=\"line\">    coverageReporter: &#123;</div><div class=\"line\">      <span class=\"attr\">dir</span>: <span class=\"string\">'./coverage'</span>,</div><div class=\"line\">      <span class=\"attr\">reporters</span>: [</div><div class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'lcov'</span>, <span class=\"attr\">subdir</span>: <span class=\"string\">'.'</span> &#125;,</div><div class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text-summary'</span> &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;<span class=\"comment\">// 生成覆盖率报告的配置</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h3><p>mocha是一个Javascript测试框架，用来运行测试。<br>mocha使用多个describe块来展示不同的组件，然后在其中添加it块来制定一个单一的测试。</p>\n<h3 id=\"chai\"><a href=\"#chai\" class=\"headerlink\" title=\"chai\"></a>chai</h3><p>chai支持BDD风格和TDD风格的断言库，可以和任何的javascript测试框架配合使用。</p>\n<p>‘断言’就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。</p>\n<p>下面的例子采用expect的断言风格。</p>\n<p>TDD指的是Test Driven Development，测试驱动开发，先编写单元测试代码，再编写代码实现功能，运行单元测试代码，循环此过程，直到整个单元测试都通过。</p>\n<p>BDD指的是Behavior Driven Development，行为驱动开发，是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作，是从用户的需求出发，强调系统行为。</p>\n<h2 id=\"对vue分页组件进行单元测试\"><a href=\"#对vue分页组件进行单元测试\" class=\"headerlink\" title=\"对vue分页组件进行单元测试\"></a>对vue分页组件进行单元测试</h2><p>项目采用vue-cli生成的，初始化的时候把测试相关的选项都选是。</p>\n<p>vue-cli生成的目录结构里，和测试相关的是test文件夹。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─test</div><div class=\"line\">   ├─e2e <span class=\"comment\">// 端到端测试</span></div><div class=\"line\">   │</div><div class=\"line\">   │</div><div class=\"line\">   └─unit <span class=\"comment\">// 单元测试</span></div><div class=\"line\">      ├─specs</div><div class=\"line\">      │    └─Pagination.spec.js <span class=\"comment\">// 组件对应的测试代码</span></div><div class=\"line\">      │──.eslintrc <span class=\"comment\">// eslint配置</span></div><div class=\"line\">      │──idnex.js <span class=\"comment\">// karma执行的入口文件</span></div><div class=\"line\">      │──utils.js <span class=\"comment\">// 工具方法</span></div><div class=\"line\">      └──karma.conf.js <span class=\"comment\">// karma配置</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"创建vue的组件实例\"><a href=\"#创建vue的组件实例\" class=\"headerlink\" title=\"创建vue的组件实例\"></a>创建vue的组件实例</h3><p>根据<a href=\"https://cn.vuejs.org/v2/guide/unit-testing.html\">vue官方文档对单元测试的介绍</a>，可以使用Vue.extend()创建一个实例并检查渲染输出,同时使用$mount()进行挂载。</p>\n<p>将该方法进行封装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createCompInstance = <span class=\"function\">(<span class=\"params\">Component, propsData</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> Constructor = Vue.extend(Component)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Constructor(&#123;</div><div class=\"line\">    propsData</div><div class=\"line\">  &#125;).$mount()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"针对分页组件编写的单元测试\"><a href=\"#针对分页组件编写的单元测试\" class=\"headerlink\" title=\"针对分页组件编写的单元测试\"></a>针对分页组件编写的单元测试</h3><p>测试组件被创建成功。</p>\n<p>通过exist断言判断组件实例是否创建，挂载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> vm</div><div class=\"line\">it(<span class=\"string\">'create'</span>, () =&gt; &#123;</div><div class=\"line\">  vm = createCompInstance(Pagination, &#123;</div><div class=\"line\">    <span class=\"attr\">totalNum</span>: <span class=\"number\">100</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">const</span> elm = vm.$el</div><div class=\"line\">  <span class=\"comment\">// prev</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.prev'</span>)).to.exist</div><div class=\"line\">  <span class=\"comment\">// pager</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.pager'</span>)).to.exist</div><div class=\"line\">  <span class=\"comment\">// next</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.next'</span>)).to.exist</div><div class=\"line\">  <span class=\"comment\">// jumper</span></div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'input'</span>)).to.exist</div><div class=\"line\">  expect(elm.querySelector(<span class=\"string\">'.btn'</span>)).to.exist</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>测试页码的点击。</p>\n<p>获取组件挂载的DOM进行点击，再进行equal断言，判断当页码是否已经改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'event: click page'</span>, () =&gt; &#123;</div><div class=\"line\">  vm = createCompInstance(Pagination, &#123;</div><div class=\"line\">    <span class=\"attr\">pageSizes</span>: [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>],</div><div class=\"line\">    <span class=\"attr\">buttonCount</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    <span class=\"attr\">totalNum</span>: <span class=\"number\">100</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">const</span> elm = vm.$el</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// click 3</span></div><div class=\"line\">  elm.querySelectorAll(<span class=\"string\">'.pager'</span>)[<span class=\"number\">2</span>].click()</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    expect(elm.querySelectorAll(<span class=\"string\">'.pager'</span>)[<span class=\"number\">2</span>].className).to.equal(<span class=\"string\">'current'</span>)</div><div class=\"line\">    expect(vm.currentPage).to.equal(<span class=\"number\">3</span>)</div><div class=\"line\">    done()</div><div class=\"line\">  &#125;, <span class=\"number\">100</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>实现按钮点击：通过获取相关元素el，执行 el.click() 方法实现。</p>\n<blockquote>\n<p>由于 Vue 进行 异步更新DOM 的情况，一些依赖DOM更新结果的断言必须在 Vue.nextTick 回调中进行。</p>\n</blockquote>\n<p>涉及到 Vue.nextTick 和 setTimeout 等异步操作的测试，要使用 done() 来标记完成时间点。</p>\n<p>在describe的回调函数传入done，之后才能进行调用。</p>\n<p>一开始的测试覆盖率很低，经过不断的调整和补充测试用例，最后的测试结果如下：<br><img src=\"http://oq8q06ybp.bkt.clouddn.com/image/unittest.PNG\" alt=\"test result\"><br>以及测试覆盖率报告<br><img src=\"http://oq8q06ybp.bkt.clouddn.com/image/testCoverage.PNG\" alt=\"test coverage\"><br>结果测试的覆盖率还是没有达到百分之百，好像还有一些分支条件没有覆盖到，得继续完善。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://karma-runner.github.io\">karma</a></li>\n<li><a href=\"https://mochajs.org/\">mocha</a></li>\n<li><a href=\"http://chaijs.com/\">chai</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/unit-testing.html\">vue单元测试</a></li>\n</ol>\n"},{"title":"关于页面自动播放音频文件","date":"2017-04-17T16:00:00.000Z","_content":"之前在做一个项目的时候，产品经理提出一个页面自动播放音频的需求。\n\n一开始直接用上audio标签加上autoplay属性，但是一经测试，兼容性却很一般。\n\n经过网上查找资料和一番探索，实践，总结得出的结论如下:\n\n#PC端\n1. 对于支持<audio>标签的浏览器，设置autoplay属性可实现音频自动播放，同时设置style='display:none'可以隐藏节点。\n````html\n<audio src=\"./audio.mp3\" autoplay=\"autoplay\" style='display:none'></audio>\n````\n<audio>标签的相关属性：\n1、自动播放：\n语法：autoplay\n说明：如果出现该属性，则音频在就绪后马上播放。\n2、控制按钮：\n语法：controls\n说明：\t如果出现该属性，则向用户显示控件，比如播放按钮。\n3、循环播放：\n语法：loop\n说明：\t如果出现该属性，则每当音频结束时重新开始播放。\n\n2. 对于不支持audio标签的浏览器，主要是ie8及以下。使用<embed>标签配合ie条件注释来实现。\n````html\n<!--[if lte IE 10]>\n    <embed type=\"audio/midi\" src=\"../audio/secretary.mp3\" style='display:none' autostart=true loop=false></embed>\n<![endif]-->\n````\n<embed>标签的相关属性：\n1、自动播放：\n语法：autostart=true、false\n说明：该属性规定音频或视频文件是否在下载完之后就自动播放。\ntrue：音乐文件在下载完之后自动播放；\nfalse：音乐文件在下载完之后不自动播放。\n\n2、循环播放：\n语法：loop=正整数、true、false\n说明：该属性规定音频或视频文件是否循环及循环次数。\n属性值为正整数值时，音频或视频文件的循环次数与正整数值相同；\n属性值为true时，音频或视频文件循环；\n属性值为false时，音频或视频文件不循环。\n\n3、面板显示：\n语法：hidden=ture、no\n说明：该属性规定控制面板是否显示，默认值为no。\nture：隐藏面板；\nno：显示面板。\n\n4、开始时间：\n语法：starttime=mm:ss（分：秒）\n说明：该属性规定音频或视频文件开始播放的时间。未定义则从文件开头播放。\n#移动端\n<audio>标签在移动端的兼容性比较好，但是ios和android为了用户体验，避免用户浪费过多流量，屏蔽了autoplay属性，因此无法自动播放。\n实测发现ios不能自动播放，android部分机型可以自动播放，部分机型不能自动播放。\n\n因此只能借助用户的操作来触发播放，在移动端上，用户会习惯的来进行触摸屏幕来看页面，那就借助监听touchstart事件来触发播放，模拟自动播放的效果。经过与产品沟通，最终采用这种解决方案。\n````javascript\nvar audio = window.document.getElementById('audio');\nvar that=this;\nwindow.document.addEventListener('touchstart', function(){\n    if(that.once==true&&(that.$route.path=='/')){\n        that.once=false;\n        audio.play();\n    }\n}, false);\n/*once变量用于阻止多次播放，由于是单页应用，需求是只能是首页自动播放，因此加上路由判断*/\n````\n微信浏览器中，可借助js sdk实现自动播放\n````javascript\n document.addEventListener(\"WeixinJSBridgeReady\", function () {  \n        play();  \n    }, false);\n````\n","source":"_posts/关于页面自动播放音频文件.md","raw":"---\ntitle: 关于页面自动播放音频文件\ndate: 2017-04-18\ntags: ['audio','用户体验']\ncategories: ['工作总结']\n---\n之前在做一个项目的时候，产品经理提出一个页面自动播放音频的需求。\n\n一开始直接用上audio标签加上autoplay属性，但是一经测试，兼容性却很一般。\n\n经过网上查找资料和一番探索，实践，总结得出的结论如下:\n\n#PC端\n1. 对于支持<audio>标签的浏览器，设置autoplay属性可实现音频自动播放，同时设置style='display:none'可以隐藏节点。\n````html\n<audio src=\"./audio.mp3\" autoplay=\"autoplay\" style='display:none'></audio>\n````\n<audio>标签的相关属性：\n1、自动播放：\n语法：autoplay\n说明：如果出现该属性，则音频在就绪后马上播放。\n2、控制按钮：\n语法：controls\n说明：\t如果出现该属性，则向用户显示控件，比如播放按钮。\n3、循环播放：\n语法：loop\n说明：\t如果出现该属性，则每当音频结束时重新开始播放。\n\n2. 对于不支持audio标签的浏览器，主要是ie8及以下。使用<embed>标签配合ie条件注释来实现。\n````html\n<!--[if lte IE 10]>\n    <embed type=\"audio/midi\" src=\"../audio/secretary.mp3\" style='display:none' autostart=true loop=false></embed>\n<![endif]-->\n````\n<embed>标签的相关属性：\n1、自动播放：\n语法：autostart=true、false\n说明：该属性规定音频或视频文件是否在下载完之后就自动播放。\ntrue：音乐文件在下载完之后自动播放；\nfalse：音乐文件在下载完之后不自动播放。\n\n2、循环播放：\n语法：loop=正整数、true、false\n说明：该属性规定音频或视频文件是否循环及循环次数。\n属性值为正整数值时，音频或视频文件的循环次数与正整数值相同；\n属性值为true时，音频或视频文件循环；\n属性值为false时，音频或视频文件不循环。\n\n3、面板显示：\n语法：hidden=ture、no\n说明：该属性规定控制面板是否显示，默认值为no。\nture：隐藏面板；\nno：显示面板。\n\n4、开始时间：\n语法：starttime=mm:ss（分：秒）\n说明：该属性规定音频或视频文件开始播放的时间。未定义则从文件开头播放。\n#移动端\n<audio>标签在移动端的兼容性比较好，但是ios和android为了用户体验，避免用户浪费过多流量，屏蔽了autoplay属性，因此无法自动播放。\n实测发现ios不能自动播放，android部分机型可以自动播放，部分机型不能自动播放。\n\n因此只能借助用户的操作来触发播放，在移动端上，用户会习惯的来进行触摸屏幕来看页面，那就借助监听touchstart事件来触发播放，模拟自动播放的效果。经过与产品沟通，最终采用这种解决方案。\n````javascript\nvar audio = window.document.getElementById('audio');\nvar that=this;\nwindow.document.addEventListener('touchstart', function(){\n    if(that.once==true&&(that.$route.path=='/')){\n        that.once=false;\n        audio.play();\n    }\n}, false);\n/*once变量用于阻止多次播放，由于是单页应用，需求是只能是首页自动播放，因此加上路由判断*/\n````\n微信浏览器中，可借助js sdk实现自动播放\n````javascript\n document.addEventListener(\"WeixinJSBridgeReady\", function () {  \n        play();  \n    }, false);\n````\n","slug":"关于页面自动播放音频文件","published":1,"updated":"2017-07-09T08:26:50.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1d8001of4b4jlthvpjf","content":"<p>之前在做一个项目的时候，产品经理提出一个页面自动播放音频的需求。</p>\n<p>一开始直接用上audio标签加上autoplay属性，但是一经测试，兼容性却很一般。</p>\n<p>经过网上查找资料和一番探索，实践，总结得出的结论如下:</p>\n<p>#PC端</p>\n<ol>\n<li>对于支持<audio>标签的浏览器，设置autoplay属性可实现音频自动播放，同时设置style=’display:none’可以隐藏节点。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./audio.mp3\"</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">\"autoplay\"</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:none'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></div></pre></td></tr></table></figure>\n</audio></li>\n</ol>\n<p><audio>标签的相关属性：<br>1、自动播放：<br>语法：autoplay<br>说明：如果出现该属性，则音频在就绪后马上播放。<br>2、控制按钮：<br>语法：controls<br>说明：    如果出现该属性，则向用户显示控件，比如播放按钮。<br>3、循环播放：<br>语法：loop<br>说明：    如果出现该属性，则每当音频结束时重新开始播放。</audio></p>\n<ol>\n<li>对于不支持audio标签的浏览器，主要是ie8及以下。使用<embed>标签配合ie条件注释来实现。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 10]&gt;</span></div><div class=\"line\">    &lt;embed type=\"audio/midi\" src=\"../audio/secretary.mp3\" style='display:none' autostart=true loop=false&gt;&lt;/embed&gt;</div><div class=\"line\">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><embed>标签的相关属性：<br>1、自动播放：<br>语法：autostart=true、false<br>说明：该属性规定音频或视频文件是否在下载完之后就自动播放。<br>true：音乐文件在下载完之后自动播放；<br>false：音乐文件在下载完之后不自动播放。</p>\n<p>2、循环播放：<br>语法：loop=正整数、true、false<br>说明：该属性规定音频或视频文件是否循环及循环次数。<br>属性值为正整数值时，音频或视频文件的循环次数与正整数值相同；<br>属性值为true时，音频或视频文件循环；<br>属性值为false时，音频或视频文件不循环。</p>\n<p>3、面板显示：<br>语法：hidden=ture、no<br>说明：该属性规定控制面板是否显示，默认值为no。<br>ture：隐藏面板；<br>no：显示面板。</p>\n<p>4、开始时间：<br>语法：starttime=mm:ss（分：秒）<br>说明：该属性规定音频或视频文件开始播放的时间。未定义则从文件开头播放。</p>\n<p>#移动端</p>\n<p><audio>标签在移动端的兼容性比较好，但是ios和android为了用户体验，避免用户浪费过多流量，屏蔽了autoplay属性，因此无法自动播放。<br>实测发现ios不能自动播放，android部分机型可以自动播放，部分机型不能自动播放。</audio></p>\n<p>因此只能借助用户的操作来触发播放，在移动端上，用户会习惯的来进行触摸屏幕来看页面，那就借助监听touchstart事件来触发播放，模拟自动播放的效果。经过与产品沟通，最终采用这种解决方案。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> audio = <span class=\"built_in\">window</span>.document.getElementById(<span class=\"string\">'audio'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> that=<span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.document.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(that.once==<span class=\"literal\">true</span>&amp;&amp;(that.$route.path==<span class=\"string\">'/'</span>))&#123;</div><div class=\"line\">        that.once=<span class=\"literal\">false</span>;</div><div class=\"line\">        audio.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">/*once变量用于阻止多次播放，由于是单页应用，需求是只能是首页自动播放，因此加上路由判断*/</span></div></pre></td></tr></table></figure></p>\n<p>微信浏览器中，可借助js sdk实现自动播放<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"WeixinJSBridgeReady\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">       play();  </div><div class=\"line\">   &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在做一个项目的时候，产品经理提出一个页面自动播放音频的需求。</p>\n<p>一开始直接用上audio标签加上autoplay属性，但是一经测试，兼容性却很一般。</p>\n<p>经过网上查找资料和一番探索，实践，总结得出的结论如下:</p>\n<p>#PC端</p>\n<ol>\n<li>对于支持<audio>标签的浏览器，设置autoplay属性可实现音频自动播放，同时设置style=’display:none’可以隐藏节点。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./audio.mp3\"</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">\"autoplay\"</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:none'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><audio>标签的相关属性：<br>1、自动播放：<br>语法：autoplay<br>说明：如果出现该属性，则音频在就绪后马上播放。<br>2、控制按钮：<br>语法：controls<br>说明：    如果出现该属性，则向用户显示控件，比如播放按钮。<br>3、循环播放：<br>语法：loop<br>说明：    如果出现该属性，则每当音频结束时重新开始播放。</p>\n<ol>\n<li>对于不支持audio标签的浏览器，主要是ie8及以下。使用<embed>标签配合ie条件注释来实现。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 10]&gt;</div><div class=\"line\">    &lt;embed type=\"audio/midi\" src=\"../audio/secretary.mp3\" style='display:none' autostart=true loop=false&gt;&lt;/embed&gt;</div><div class=\"line\">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><embed>标签的相关属性：<br>1、自动播放：<br>语法：autostart=true、false<br>说明：该属性规定音频或视频文件是否在下载完之后就自动播放。<br>true：音乐文件在下载完之后自动播放；<br>false：音乐文件在下载完之后不自动播放。</p>\n<p>2、循环播放：<br>语法：loop=正整数、true、false<br>说明：该属性规定音频或视频文件是否循环及循环次数。<br>属性值为正整数值时，音频或视频文件的循环次数与正整数值相同；<br>属性值为true时，音频或视频文件循环；<br>属性值为false时，音频或视频文件不循环。</p>\n<p>3、面板显示：<br>语法：hidden=ture、no<br>说明：该属性规定控制面板是否显示，默认值为no。<br>ture：隐藏面板；<br>no：显示面板。</p>\n<p>4、开始时间：<br>语法：starttime=mm:ss（分：秒）<br>说明：该属性规定音频或视频文件开始播放的时间。未定义则从文件开头播放。</p>\n<p>#移动端</p>\n<p><audio>标签在移动端的兼容性比较好，但是ios和android为了用户体验，避免用户浪费过多流量，屏蔽了autoplay属性，因此无法自动播放。<br>实测发现ios不能自动播放，android部分机型可以自动播放，部分机型不能自动播放。</p>\n<p>因此只能借助用户的操作来触发播放，在移动端上，用户会习惯的来进行触摸屏幕来看页面，那就借助监听touchstart事件来触发播放，模拟自动播放的效果。经过与产品沟通，最终采用这种解决方案。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> audio = <span class=\"built_in\">window</span>.document.getElementById(<span class=\"string\">'audio'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> that=<span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.document.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(that.once==<span class=\"literal\">true</span>&amp;&amp;(that.$route.path==<span class=\"string\">'/'</span>))&#123;</div><div class=\"line\">        that.once=<span class=\"literal\">false</span>;</div><div class=\"line\">        audio.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">/*once变量用于阻止多次播放，由于是单页应用，需求是只能是首页自动播放，因此加上路由判断*/</span></div></pre></td></tr></table></figure></p>\n<p>微信浏览器中，可借助js sdk实现自动播放<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"WeixinJSBridgeReady\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">       play();  </div><div class=\"line\">   &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n"},{"title":"基于vue-router的管理系统权限控制的实现","date":"2017-07-07T16:00:00.000Z","_content":"# 背景\n之前使用vue做的后台管理系统，具有账号体系和权限管理的功能，前端需要实现根据权限异步生成菜单，根据用户权限来控制页面和相关按钮的显示，以及路由控制，这里主要讨论解决路由的问题。\n# 解决思路\n## 思路一: 写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\n\n登陆完之后，获取用户权限的相关信息存入vuex，相关按钮根据权限信息控制显示或隐藏。\n\n写死所有的路由配置，包括404页的跳转，输入不匹配的地址都跳到404页面。\n\n在路由的meta信息里存储权限信息，可以是一个权限码，具体看和后台的约定。\n````javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/hello',\n      name: 'Hello',\n      component: resolve => require(['@/components/FirstPage'], resolve),\n      meta: {\n      permission:'firstpage'\n      },\n      children: [\n        {\n          path:'child',\n          name: 'firstPageChild',\n          component: resolve => require(['@/components/Child'], resolve),\n          meta: {\n      permission:'firstpagechild'\n      } \n        }\n      ]\n    },\n    {\n\n      path:'*',\n      name:'notFound',\n      component: resolve => require(['@/components/NotFound'], resolve)\n    }//404路由\n  ]\n})\n\n````\n此时对于无权限的页面，隐藏按钮，用户无对应的入口按钮，是无法通过点击对应按钮进入的，但是直接在地址栏输入地址还可以进入。\n\n这里借助vue-router的beforeEach钩子，在进入页面之前，通过路由的meta信息进行权限判断，若无权限则跳到404页面，有权限则正常进行跳转。\n````javascript\nimport router from './router'\n\nrouter.beforeEach((to, from, next) => {\n  console.log(to.meta.permission);\n  if(to.matched.forEach(record => {return permissionCode.indexOf(record.meta.permission) == -1})){\n  next('/notFound')\n  }else{\n    next()\n  }\n})//permissionCode为后台传过来的拥有的权限列表，按具体项目判断方法不一样\n````\n这里如果是直接打印出to的meta信息，只能获取到当前路由嵌套最深的那一层路由meta信息。\n\nvue-router官方推荐使用matched属性，to.matched数组包含了匹配到的父路由记录以及子路由记录，遍历即可。\n\n如果没有权限则调用next('/notFound')跳转到404页面。有权限则继续调用next()，这里确保要调用next方法。\n\n这个方法的缺点是要将所有的路由和对应权限都写出来。\n\n<br>\n\n## 思路二: 借助addRoutes动态添加路由\n\nvue-router在2.2.0版本新增了router.addRoutes实例方法，用来动态添加路由。\n\n因此可借助这个方法，在用户登陆完之后，获取权限信息，动态生成对应的有权限的路由，之前先写好404路由。\n````javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path:'*',\n      name:'notFound',\n      component: resolve => require(['@/components/NotFound'], resolve)\n    }//404路由\n  ]\n})\n````\n\n假设以下为和后台约定好的用来构造路由的权限信息，实际情况可能不一样。\n````javascript\n route:[{\n    route:'/a',//路由地址\n    name: 'A',//路由名称\n    component: 'pageA/Main',//组件名称\n    meta: {permission: 'A'},//meta信息\n    children: [{\n        route:'child1',\n        name: 'A_A',\n        component: 'pageA/ModuleA'\n    },{\n        route:'child2',\n        name: 'A_B',\n        component: 'pageA/ModuleB'\n    }]\n},\n{\n    route:'/b',\n    name: 'B',\n    component: 'pageB/Main',\n    meta: {permission: 'B'},\n    children: [{\n        route:'child1',\n        name: 'B_A',\n        component: 'pageB/ModuleA'\n    },{\n        route:'child2',\n        name: 'B_B',\n        component: 'pageB/ModuleB'\n    }]\n},\n{\n    route:'/c',\n    name: 'C',\n    component: 'pageC/Main',\n    meta: {permission: 'C'},\n    children: [{\n        route:'child1',\n        name: 'C_A',\n        component: 'pageC/ModuleA'\n    },{\n        route:'child2',\n        name: 'C_B',\n        component: 'pageC/ModuleB'\n    }]\n}]\n````\n将后台传过来的权限信息，配置成符合 routes 选项要求的数组。\n````javascript\ncreateRouter(){\n      var rootRoute = []\n      this.route.forEach((value1, index1) => {\n        let parentRoute = {\n          path: value1.route,\n          name: value1.name,\n          component: resolve => require(['./views/'+value1.component], resolve),\n          children: [],\n          meta: value1.meta\n        }\n\n        value1.children.forEach((value2, index2) => {\n          let childRoute = {\n            path: value2.route,\n            name: value2.name,\n            component: resolve => require(['./views/'+value2.component], resolve)\n          }\n          parentRoute.children.push(childRoute)\n        })\n\n        rootRoute.push(parentRoute)\n      })\n      this.$router.addRoutes(rootRoute)\n    }//页面级别的组件都放在views文件夹下，Main为主入口，子页面也在同一文件夹\n````\n\n这样输入的无权限地址都会不匹配，跳到404路由。\n\n这种方法存在缺点，使用webpack实现按需加载，打包只能打包到主页面级别，例如上面打包出来就是A.js，B.js，C.js，子级页面的代码也被打包进去了，不能再打包一层，这个问题待解决。\n","source":"_posts/基于vue-router的管理系统权限控制的实现.md","raw":"---\ntitle: 基于vue-router的管理系统权限控制的实现\ndate: 2017-07-08\ntags: ['vue','vue-router','管理系统','权限控制']\ncategories: ['工作总结']\n---\n# 背景\n之前使用vue做的后台管理系统，具有账号体系和权限管理的功能，前端需要实现根据权限异步生成菜单，根据用户权限来控制页面和相关按钮的显示，以及路由控制，这里主要讨论解决路由的问题。\n# 解决思路\n## 思路一: 写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\n\n登陆完之后，获取用户权限的相关信息存入vuex，相关按钮根据权限信息控制显示或隐藏。\n\n写死所有的路由配置，包括404页的跳转，输入不匹配的地址都跳到404页面。\n\n在路由的meta信息里存储权限信息，可以是一个权限码，具体看和后台的约定。\n````javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/hello',\n      name: 'Hello',\n      component: resolve => require(['@/components/FirstPage'], resolve),\n      meta: {\n      permission:'firstpage'\n      },\n      children: [\n        {\n          path:'child',\n          name: 'firstPageChild',\n          component: resolve => require(['@/components/Child'], resolve),\n          meta: {\n      permission:'firstpagechild'\n      } \n        }\n      ]\n    },\n    {\n\n      path:'*',\n      name:'notFound',\n      component: resolve => require(['@/components/NotFound'], resolve)\n    }//404路由\n  ]\n})\n\n````\n此时对于无权限的页面，隐藏按钮，用户无对应的入口按钮，是无法通过点击对应按钮进入的，但是直接在地址栏输入地址还可以进入。\n\n这里借助vue-router的beforeEach钩子，在进入页面之前，通过路由的meta信息进行权限判断，若无权限则跳到404页面，有权限则正常进行跳转。\n````javascript\nimport router from './router'\n\nrouter.beforeEach((to, from, next) => {\n  console.log(to.meta.permission);\n  if(to.matched.forEach(record => {return permissionCode.indexOf(record.meta.permission) == -1})){\n  next('/notFound')\n  }else{\n    next()\n  }\n})//permissionCode为后台传过来的拥有的权限列表，按具体项目判断方法不一样\n````\n这里如果是直接打印出to的meta信息，只能获取到当前路由嵌套最深的那一层路由meta信息。\n\nvue-router官方推荐使用matched属性，to.matched数组包含了匹配到的父路由记录以及子路由记录，遍历即可。\n\n如果没有权限则调用next('/notFound')跳转到404页面。有权限则继续调用next()，这里确保要调用next方法。\n\n这个方法的缺点是要将所有的路由和对应权限都写出来。\n\n<br>\n\n## 思路二: 借助addRoutes动态添加路由\n\nvue-router在2.2.0版本新增了router.addRoutes实例方法，用来动态添加路由。\n\n因此可借助这个方法，在用户登陆完之后，获取权限信息，动态生成对应的有权限的路由，之前先写好404路由。\n````javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path:'*',\n      name:'notFound',\n      component: resolve => require(['@/components/NotFound'], resolve)\n    }//404路由\n  ]\n})\n````\n\n假设以下为和后台约定好的用来构造路由的权限信息，实际情况可能不一样。\n````javascript\n route:[{\n    route:'/a',//路由地址\n    name: 'A',//路由名称\n    component: 'pageA/Main',//组件名称\n    meta: {permission: 'A'},//meta信息\n    children: [{\n        route:'child1',\n        name: 'A_A',\n        component: 'pageA/ModuleA'\n    },{\n        route:'child2',\n        name: 'A_B',\n        component: 'pageA/ModuleB'\n    }]\n},\n{\n    route:'/b',\n    name: 'B',\n    component: 'pageB/Main',\n    meta: {permission: 'B'},\n    children: [{\n        route:'child1',\n        name: 'B_A',\n        component: 'pageB/ModuleA'\n    },{\n        route:'child2',\n        name: 'B_B',\n        component: 'pageB/ModuleB'\n    }]\n},\n{\n    route:'/c',\n    name: 'C',\n    component: 'pageC/Main',\n    meta: {permission: 'C'},\n    children: [{\n        route:'child1',\n        name: 'C_A',\n        component: 'pageC/ModuleA'\n    },{\n        route:'child2',\n        name: 'C_B',\n        component: 'pageC/ModuleB'\n    }]\n}]\n````\n将后台传过来的权限信息，配置成符合 routes 选项要求的数组。\n````javascript\ncreateRouter(){\n      var rootRoute = []\n      this.route.forEach((value1, index1) => {\n        let parentRoute = {\n          path: value1.route,\n          name: value1.name,\n          component: resolve => require(['./views/'+value1.component], resolve),\n          children: [],\n          meta: value1.meta\n        }\n\n        value1.children.forEach((value2, index2) => {\n          let childRoute = {\n            path: value2.route,\n            name: value2.name,\n            component: resolve => require(['./views/'+value2.component], resolve)\n          }\n          parentRoute.children.push(childRoute)\n        })\n\n        rootRoute.push(parentRoute)\n      })\n      this.$router.addRoutes(rootRoute)\n    }//页面级别的组件都放在views文件夹下，Main为主入口，子页面也在同一文件夹\n````\n\n这样输入的无权限地址都会不匹配，跳到404路由。\n\n这种方法存在缺点，使用webpack实现按需加载，打包只能打包到主页面级别，例如上面打包出来就是A.js，B.js，C.js，子级页面的代码也被打包进去了，不能再打包一层，这个问题待解决。\n","slug":"基于vue-router的管理系统权限控制的实现","published":1,"updated":"2017-07-09T09:03:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1d9001rf4b4vk9iif46","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前使用vue做的后台管理系统，具有账号体系和权限管理的功能，前端需要实现根据权限异步生成菜单，根据用户权限来控制页面和相关按钮的显示，以及路由控制，这里主要讨论解决路由的问题。</p>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><h2 id=\"思路一-写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\"><a href=\"#思路一-写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\" class=\"headerlink\" title=\"思路一: 写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\"></a>思路一: 写出全部的路由配置，利用导航钩子控制无权限页面的跳转。</h2><p>登陆完之后，获取用户权限的相关信息存入vuex，相关按钮根据权限信息控制显示或隐藏。</p>\n<p>写死所有的路由配置，包括404页的跳转，输入不匹配的地址都跳到404页面。</p>\n<p>在路由的meta信息里存储权限信息，可以是一个权限码，具体看和后台的约定。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(Router)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">'/hello'</span>,</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'Hello'</span>,</div><div class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/FirstPage'</span>], resolve),</div><div class=\"line\">      <span class=\"attr\">meta</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">permission</span>:<span class=\"string\">'firstpage'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">children</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"attr\">path</span>:<span class=\"string\">'child'</span>,</div><div class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">'firstPageChild'</span>,</div><div class=\"line\">          <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/Child'</span>], resolve),</div><div class=\"line\">          <span class=\"attr\">meta</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">permission</span>:<span class=\"string\">'firstpagechild'</span></div><div class=\"line\">      &#125; </div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"attr\">path</span>:<span class=\"string\">'*'</span>,</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">'notFound'</span>,</div><div class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/NotFound'</span>], resolve)</div><div class=\"line\">    &#125;<span class=\"comment\">//404路由</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时对于无权限的页面，隐藏按钮，用户无对应的入口按钮，是无法通过点击对应按钮进入的，但是直接在地址栏输入地址还可以进入。</p>\n<p>这里借助vue-router的beforeEach钩子，在进入页面之前，通过路由的meta信息进行权限判断，若无权限则跳到404页面，有权限则正常进行跳转。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></div><div class=\"line\"></div><div class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(to.meta.permission);</div><div class=\"line\">  <span class=\"keyword\">if</span>(to.matched.forEach(<span class=\"function\"><span class=\"params\">record</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> permissionCode.indexOf(record.meta.permission) == <span class=\"number\">-1</span>&#125;))&#123;</div><div class=\"line\">  next(<span class=\"string\">'/notFound'</span>)</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    next()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)<span class=\"comment\">//permissionCode为后台传过来的拥有的权限列表，按具体项目判断方法不一样</span></div></pre></td></tr></table></figure></p>\n<p>这里如果是直接打印出to的meta信息，只能获取到当前路由嵌套最深的那一层路由meta信息。</p>\n<p>vue-router官方推荐使用matched属性，to.matched数组包含了匹配到的父路由记录以及子路由记录，遍历即可。</p>\n<p>如果没有权限则调用next(‘/notFound’)跳转到404页面。有权限则继续调用next()，这里确保要调用next方法。</p>\n<p>这个方法的缺点是要将所有的路由和对应权限都写出来。</p>\n<p><br></p>\n<h2 id=\"思路二-借助addRoutes动态添加路由\"><a href=\"#思路二-借助addRoutes动态添加路由\" class=\"headerlink\" title=\"思路二: 借助addRoutes动态添加路由\"></a>思路二: 借助addRoutes动态添加路由</h2><p>vue-router在2.2.0版本新增了router.addRoutes实例方法，用来动态添加路由。</p>\n<p>因此可借助这个方法，在用户登陆完之后，获取权限信息，动态生成对应的有权限的路由，之前先写好404路由。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(Router)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">path</span>:<span class=\"string\">'*'</span>,</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">'notFound'</span>,</div><div class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/NotFound'</span>], resolve)</div><div class=\"line\">    &#125;<span class=\"comment\">//404路由</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>假设以下为和后台约定好的用来构造路由的权限信息，实际情况可能不一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"> route:[&#123;</div><div class=\"line\">    <span class=\"attr\">route</span>:<span class=\"string\">'/a'</span>,<span class=\"comment\">//路由地址</span></div><div class=\"line\">    name: <span class=\"string\">'A'</span>,<span class=\"comment\">//路由名称</span></div><div class=\"line\">    component: <span class=\"string\">'pageA/Main'</span>,<span class=\"comment\">//组件名称</span></div><div class=\"line\">    meta: &#123;<span class=\"attr\">permission</span>: <span class=\"string\">'A'</span>&#125;,<span class=\"comment\">//meta信息</span></div><div class=\"line\">    children: [&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'A_A'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageA/ModuleA'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'A_B'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageA/ModuleB'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">route</span>:<span class=\"string\">'/b'</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'B'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: <span class=\"string\">'pageB/Main'</span>,</div><div class=\"line\">    <span class=\"attr\">meta</span>: &#123;<span class=\"attr\">permission</span>: <span class=\"string\">'B'</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">children</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'B_A'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageB/ModuleA'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'B_B'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageB/ModuleB'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">route</span>:<span class=\"string\">'/c'</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'C'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: <span class=\"string\">'pageC/Main'</span>,</div><div class=\"line\">    <span class=\"attr\">meta</span>: &#123;<span class=\"attr\">permission</span>: <span class=\"string\">'C'</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">children</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'C_A'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageC/ModuleA'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'C_B'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageC/ModuleB'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>将后台传过来的权限信息，配置成符合 routes 选项要求的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">createRouter()&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> rootRoute = []</div><div class=\"line\">      <span class=\"keyword\">this</span>.route.forEach(<span class=\"function\">(<span class=\"params\">value1, index1</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> parentRoute = &#123;</div><div class=\"line\">          <span class=\"attr\">path</span>: value1.route,</div><div class=\"line\">          <span class=\"attr\">name</span>: value1.name,</div><div class=\"line\">          <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'./views/'</span>+value1.component], resolve),</div><div class=\"line\">          <span class=\"attr\">children</span>: [],</div><div class=\"line\">          <span class=\"attr\">meta</span>: value1.meta</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        value1.children.forEach(<span class=\"function\">(<span class=\"params\">value2, index2</span>) =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">let</span> childRoute = &#123;</div><div class=\"line\">            <span class=\"attr\">path</span>: value2.route,</div><div class=\"line\">            <span class=\"attr\">name</span>: value2.name,</div><div class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'./views/'</span>+value2.component], resolve)</div><div class=\"line\">          &#125;</div><div class=\"line\">          parentRoute.children.push(childRoute)</div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">        rootRoute.push(parentRoute)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"keyword\">this</span>.$router.addRoutes(rootRoute)</div><div class=\"line\">    &#125;<span class=\"comment\">//页面级别的组件都放在views文件夹下，Main为主入口，子页面也在同一文件夹</span></div></pre></td></tr></table></figure></p>\n<p>这样输入的无权限地址都会不匹配，跳到404路由。</p>\n<p>这种方法存在缺点，使用webpack实现按需加载，打包只能打包到主页面级别，例如上面打包出来就是A.js，B.js，C.js，子级页面的代码也被打包进去了，不能再打包一层，这个问题待解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前使用vue做的后台管理系统，具有账号体系和权限管理的功能，前端需要实现根据权限异步生成菜单，根据用户权限来控制页面和相关按钮的显示，以及路由控制，这里主要讨论解决路由的问题。</p>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><h2 id=\"思路一-写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\"><a href=\"#思路一-写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\" class=\"headerlink\" title=\"思路一: 写出全部的路由配置，利用导航钩子控制无权限页面的跳转。\"></a>思路一: 写出全部的路由配置，利用导航钩子控制无权限页面的跳转。</h2><p>登陆完之后，获取用户权限的相关信息存入vuex，相关按钮根据权限信息控制显示或隐藏。</p>\n<p>写死所有的路由配置，包括404页的跳转，输入不匹配的地址都跳到404页面。</p>\n<p>在路由的meta信息里存储权限信息，可以是一个权限码，具体看和后台的约定。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(Router)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">'/hello'</span>,</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'Hello'</span>,</div><div class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/FirstPage'</span>], resolve),</div><div class=\"line\">      <span class=\"attr\">meta</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">permission</span>:<span class=\"string\">'firstpage'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">children</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"attr\">path</span>:<span class=\"string\">'child'</span>,</div><div class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">'firstPageChild'</span>,</div><div class=\"line\">          <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/Child'</span>], resolve),</div><div class=\"line\">          <span class=\"attr\">meta</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">permission</span>:<span class=\"string\">'firstpagechild'</span></div><div class=\"line\">      &#125; </div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"attr\">path</span>:<span class=\"string\">'*'</span>,</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">'notFound'</span>,</div><div class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/NotFound'</span>], resolve)</div><div class=\"line\">    &#125;<span class=\"comment\">//404路由</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时对于无权限的页面，隐藏按钮，用户无对应的入口按钮，是无法通过点击对应按钮进入的，但是直接在地址栏输入地址还可以进入。</p>\n<p>这里借助vue-router的beforeEach钩子，在进入页面之前，通过路由的meta信息进行权限判断，若无权限则跳到404页面，有权限则正常进行跳转。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></div><div class=\"line\"></div><div class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(to.meta.permission);</div><div class=\"line\">  <span class=\"keyword\">if</span>(to.matched.forEach(<span class=\"function\"><span class=\"params\">record</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> permissionCode.indexOf(record.meta.permission) == <span class=\"number\">-1</span>&#125;))&#123;</div><div class=\"line\">  next(<span class=\"string\">'/notFound'</span>)</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    next()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)<span class=\"comment\">//permissionCode为后台传过来的拥有的权限列表，按具体项目判断方法不一样</span></div></pre></td></tr></table></figure></p>\n<p>这里如果是直接打印出to的meta信息，只能获取到当前路由嵌套最深的那一层路由meta信息。</p>\n<p>vue-router官方推荐使用matched属性，to.matched数组包含了匹配到的父路由记录以及子路由记录，遍历即可。</p>\n<p>如果没有权限则调用next(‘/notFound’)跳转到404页面。有权限则继续调用next()，这里确保要调用next方法。</p>\n<p>这个方法的缺点是要将所有的路由和对应权限都写出来。</p>\n<p><br></p>\n<h2 id=\"思路二-借助addRoutes动态添加路由\"><a href=\"#思路二-借助addRoutes动态添加路由\" class=\"headerlink\" title=\"思路二: 借助addRoutes动态添加路由\"></a>思路二: 借助addRoutes动态添加路由</h2><p>vue-router在2.2.0版本新增了router.addRoutes实例方法，用来动态添加路由。</p>\n<p>因此可借助这个方法，在用户登陆完之后，获取权限信息，动态生成对应的有权限的路由，之前先写好404路由。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(Router)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">path</span>:<span class=\"string\">'*'</span>,</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">'notFound'</span>,</div><div class=\"line\">      <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'@/components/NotFound'</span>], resolve)</div><div class=\"line\">    &#125;<span class=\"comment\">//404路由</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>假设以下为和后台约定好的用来构造路由的权限信息，实际情况可能不一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"> route:[&#123;</div><div class=\"line\">    <span class=\"attr\">route</span>:<span class=\"string\">'/a'</span>,<span class=\"comment\">//路由地址</span></div><div class=\"line\">    name: <span class=\"string\">'A'</span>,<span class=\"comment\">//路由名称</span></div><div class=\"line\">    component: <span class=\"string\">'pageA/Main'</span>,<span class=\"comment\">//组件名称</span></div><div class=\"line\">    meta: &#123;<span class=\"attr\">permission</span>: <span class=\"string\">'A'</span>&#125;,<span class=\"comment\">//meta信息</span></div><div class=\"line\">    children: [&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'A_A'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageA/ModuleA'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'A_B'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageA/ModuleB'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">route</span>:<span class=\"string\">'/b'</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'B'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: <span class=\"string\">'pageB/Main'</span>,</div><div class=\"line\">    <span class=\"attr\">meta</span>: &#123;<span class=\"attr\">permission</span>: <span class=\"string\">'B'</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">children</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'B_A'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageB/ModuleA'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'B_B'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageB/ModuleB'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">route</span>:<span class=\"string\">'/c'</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'C'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: <span class=\"string\">'pageC/Main'</span>,</div><div class=\"line\">    <span class=\"attr\">meta</span>: &#123;<span class=\"attr\">permission</span>: <span class=\"string\">'C'</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">children</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'C_A'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageC/ModuleA'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        <span class=\"attr\">route</span>:<span class=\"string\">'child2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'C_B'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">'pageC/ModuleB'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>将后台传过来的权限信息，配置成符合 routes 选项要求的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">createRouter()&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> rootRoute = []</div><div class=\"line\">      <span class=\"keyword\">this</span>.route.forEach(<span class=\"function\">(<span class=\"params\">value1, index1</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> parentRoute = &#123;</div><div class=\"line\">          <span class=\"attr\">path</span>: value1.route,</div><div class=\"line\">          <span class=\"attr\">name</span>: value1.name,</div><div class=\"line\">          <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'./views/'</span>+value1.component], resolve),</div><div class=\"line\">          <span class=\"attr\">children</span>: [],</div><div class=\"line\">          <span class=\"attr\">meta</span>: value1.meta</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        value1.children.forEach(<span class=\"function\">(<span class=\"params\">value2, index2</span>) =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">let</span> childRoute = &#123;</div><div class=\"line\">            <span class=\"attr\">path</span>: value2.route,</div><div class=\"line\">            <span class=\"attr\">name</span>: value2.name,</div><div class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">'./views/'</span>+value2.component], resolve)</div><div class=\"line\">          &#125;</div><div class=\"line\">          parentRoute.children.push(childRoute)</div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">        rootRoute.push(parentRoute)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"keyword\">this</span>.$router.addRoutes(rootRoute)</div><div class=\"line\">    &#125;<span class=\"comment\">//页面级别的组件都放在views文件夹下，Main为主入口，子页面也在同一文件夹</span></div></pre></td></tr></table></figure></p>\n<p>这样输入的无权限地址都会不匹配，跳到404路由。</p>\n<p>这种方法存在缺点，使用webpack实现按需加载，打包只能打包到主页面级别，例如上面打包出来就是A.js，B.js，C.js，子级页面的代码也被打包进去了，不能再打包一层，这个问题待解决。</p>\n"},{"title":"实现开发静态页面的热更新","date":"2017-04-07T16:00:00.000Z","_content":"## 背景\n开发静态页面的时候，修改html结构或者样式，利用热更新可以实时保存刷新，这样就不用手动刷新，节省时间。\n## gulp\n使用gulp实现热更新，主要是借助gulp-livereload插件和(LiveReload)[https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei]chrome扩展。\n````javascript\nvar gulp = require('gulp')\nvar livereload = require('gulp-livereload')\n\ngulp.task('watch',function(){\n    gulp.task('watch',function () {\n        livereload.listen();    \n        gulp.watch('src/*.*',function(file){\n            livereload.changed(file.path);\n        });\n    });\n})\n\ngulp.task('default',['watch'])\n````\n运行gulp脚本之后，开启\nchrome扩展，将正在开发的静态资源放到服务器环境里，访问之。\n\n现在只要文件一保存，浏览器就会马上局部刷新了。","source":"_posts/实现开发静态页面的热更新.md","raw":"---\ntitle: 实现开发静态页面的热更新\ndate: 2017-04-08\ntags: ['gulp',‘效率’]\ncategories: ['工具']\n---\n## 背景\n开发静态页面的时候，修改html结构或者样式，利用热更新可以实时保存刷新，这样就不用手动刷新，节省时间。\n## gulp\n使用gulp实现热更新，主要是借助gulp-livereload插件和(LiveReload)[https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei]chrome扩展。\n````javascript\nvar gulp = require('gulp')\nvar livereload = require('gulp-livereload')\n\ngulp.task('watch',function(){\n    gulp.task('watch',function () {\n        livereload.listen();    \n        gulp.watch('src/*.*',function(file){\n            livereload.changed(file.path);\n        });\n    });\n})\n\ngulp.task('default',['watch'])\n````\n运行gulp脚本之后，开启\nchrome扩展，将正在开发的静态资源放到服务器环境里，访问之。\n\n现在只要文件一保存，浏览器就会马上局部刷新了。","slug":"实现开发静态页面的热更新","published":1,"updated":"2017-07-24T14:47:44.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1dc001vf4b40asrucjx","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>开发静态页面的时候，修改html结构或者样式，利用热更新可以实时保存刷新，这样就不用手动刷新，节省时间。</p>\n<h2 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h2><p>使用gulp实现热更新，主要是借助gulp-livereload插件和(LiveReload)[<a href=\"https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei]chrome扩展。\" target=\"_blank\" rel=\"external\">https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei]chrome扩展。</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        livereload.listen();    </div><div class=\"line\">        gulp.watch(<span class=\"string\">'src/*.*'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file</span>)</span>&#123;</div><div class=\"line\">            livereload.changed(file.path);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watch'</span>])</div></pre></td></tr></table></figure></p>\n<p>运行gulp脚本之后，开启<br>chrome扩展，将正在开发的静态资源放到服务器环境里，访问之。</p>\n<p>现在只要文件一保存，浏览器就会马上局部刷新了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>开发静态页面的时候，修改html结构或者样式，利用热更新可以实时保存刷新，这样就不用手动刷新，节省时间。</p>\n<h2 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h2><p>使用gulp实现热更新，主要是借助gulp-livereload插件和(LiveReload)[<a href=\"https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei]chrome扩展。\">https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei]chrome扩展。</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        livereload.listen();    </div><div class=\"line\">        gulp.watch(<span class=\"string\">'src/*.*'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file</span>)</span>&#123;</div><div class=\"line\">            livereload.changed(file.path);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watch'</span>])</div></pre></td></tr></table></figure></p>\n<p>运行gulp脚本之后，开启<br>chrome扩展，将正在开发的静态资源放到服务器环境里，访问之。</p>\n<p>现在只要文件一保存，浏览器就会马上局部刷新了。</p>\n"},{"title":"视网膜屏下的canvas清晰度处理","date":"2017-08-31T16:00:00.000Z","_content":"## 背景\n最近使用图表插件在移动端绘制canvas图表的时候，发现画出来的图很模糊。经过排查和查询相关资料，发现和视网膜屏设备的设备像素比有关。\n## 相关知识\n### canvas的width 和 canvas的style.width\nstyle.width是用来设定canvas元素在浏览器中被渲染的宽度（高度同理）\n````html\n<canvas style=\"border:1px solid;width:100px;height:100px;\"></canvas>\n````\n<canvas style=\"border:1px solid;width:100px;height:100px;\"></canvas>\n\nwidth属性是用来设置canvas元素里面画布的宽度\n````html\n<canvas style=\"border:1px solid;\" width=\"100px\" height=\"100px\"></canvas>\n````\n<canvas style=\"border:1px solid;\" width=\"100px\" height=\"100px\"></canvas>\n\n最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 * 画框宽\n\n可以看到在不同元素宽，画布宽下绘制出来的（0，0）到（100，100）效果是不一样的。\n<canvas id=\"diagonal1\" style=\"border:1px solid;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal2\" style=\"border:1px solid;width:200px;height:200px;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal3\" style=\"border:1px solid;width:200px;height:200px;display:inline-block\"></canvas>\n\n### 视网膜屏幕\n* 物理像素(physical pixel)\n\n物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。\n\n* 设备独立像素(density-independent pixel)\n\n设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说CSS像素)，然后由相关系统转换为物理像素。\n\n* CSS像素\n\nCSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs\n\n* 设备像素比(device pixel ratio)\n\n设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：\n\n    设备像素比 ＝ 物理像素 / 设备独立像素\n\n视网膜屏幕的dpr是大于1的，比如iphone6为2。\n\n以iphone6为例，在上面绘制canvas，绘制1px x 1px时，实际上是使用了2物理像素 x 2物理像素，所以看起来会有模糊的效果。\n## 解决思路\n将画布先放大dpr倍，画框维持不变，根据公式：最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 * 画框宽，可知，此时绘制出来的图像会缩小dpr * dpr倍，因为图像缩小了来显示，这样看就是清晰的，但是图像被缩小了。\n\n再调用canvas.scale(dpr, dpr),将canvas的绘图的值放大dpr * dpr倍，重新绘制,这样呈现出来的图像大小就是和原来一样，而且清晰的。此处理和视网膜屏幕下的1px处理是类似的。\n## 代码\n````javascript\nvar scaleFn = function(canvas, context, customWidth, customHeight) {\n  if(!canvas || !context) { throw new Error('Must pass in `canvas` and `context`.'); }\n\n  var width = customWidth ||\n              canvas.width ||\n              canvas.clientWidth;\n  var height = customHeight ||\n               canvas.height ||\n               canvas.clientHeight;\n  var deviceRatio = window.devicePixelRatio || 1;\n  var ratio = deviceRatio;\n\n  if (ratio !== 1) {\n    canvas.width = Math.round(width * ratio);\n    canvas.height = Math.round(height * ratio);\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n    context.scale(ratio, ratio);\n  }\n  return ratio;\n};\n````\n## 参考资料\n\n[https://www.html5rocks.com/en/tutorials/canvas/hidpi/](https://www.html5rocks.com/en/tutorials/canvas/hidpi/)\n[https://www.npmjs.com/package/canvas-dpi-scaler](https://www.npmjs.com/package/canvas-dpi-scaler)\n[https://bugs.chromium.org/p/chromium/issues/detail?id=277205](https://bugs.chromium.org/p/chromium/issues/detail?id=277205)\n\n<script type=\"text/javascript\">function drawDiagonal(id){var canvas=document.getElementById(id);\n    var context=canvas.getContext(\"2d\");\n    context.beginPath();\n    context.moveTo(0,0);\n    context.lineTo(100,100);\n    context.stroke();\n}\n\n    drawDiagonal(\"diagonal1\");\n    drawDiagonal(\"diagonal2\");\n    drawDiagonal(\"diagonal3\");\n</script>\n","source":"_posts/视网膜屏下的canvas清晰度处理.md","raw":"---\ntitle: 视网膜屏下的canvas清晰度处理\ndate: 2017-09-01\ntags: ['canvas','dpr']\ncategories: ['工作总结']\n---\n## 背景\n最近使用图表插件在移动端绘制canvas图表的时候，发现画出来的图很模糊。经过排查和查询相关资料，发现和视网膜屏设备的设备像素比有关。\n## 相关知识\n### canvas的width 和 canvas的style.width\nstyle.width是用来设定canvas元素在浏览器中被渲染的宽度（高度同理）\n````html\n<canvas style=\"border:1px solid;width:100px;height:100px;\"></canvas>\n````\n<canvas style=\"border:1px solid;width:100px;height:100px;\"></canvas>\n\nwidth属性是用来设置canvas元素里面画布的宽度\n````html\n<canvas style=\"border:1px solid;\" width=\"100px\" height=\"100px\"></canvas>\n````\n<canvas style=\"border:1px solid;\" width=\"100px\" height=\"100px\"></canvas>\n\n最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 * 画框宽\n\n可以看到在不同元素宽，画布宽下绘制出来的（0，0）到（100，100）效果是不一样的。\n<canvas id=\"diagonal1\" style=\"border:1px solid;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal2\" style=\"border:1px solid;width:200px;height:200px;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal3\" style=\"border:1px solid;width:200px;height:200px;display:inline-block\"></canvas>\n\n### 视网膜屏幕\n* 物理像素(physical pixel)\n\n物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。\n\n* 设备独立像素(density-independent pixel)\n\n设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说CSS像素)，然后由相关系统转换为物理像素。\n\n* CSS像素\n\nCSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs\n\n* 设备像素比(device pixel ratio)\n\n设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：\n\n    设备像素比 ＝ 物理像素 / 设备独立像素\n\n视网膜屏幕的dpr是大于1的，比如iphone6为2。\n\n以iphone6为例，在上面绘制canvas，绘制1px x 1px时，实际上是使用了2物理像素 x 2物理像素，所以看起来会有模糊的效果。\n## 解决思路\n将画布先放大dpr倍，画框维持不变，根据公式：最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 * 画框宽，可知，此时绘制出来的图像会缩小dpr * dpr倍，因为图像缩小了来显示，这样看就是清晰的，但是图像被缩小了。\n\n再调用canvas.scale(dpr, dpr),将canvas的绘图的值放大dpr * dpr倍，重新绘制,这样呈现出来的图像大小就是和原来一样，而且清晰的。此处理和视网膜屏幕下的1px处理是类似的。\n## 代码\n````javascript\nvar scaleFn = function(canvas, context, customWidth, customHeight) {\n  if(!canvas || !context) { throw new Error('Must pass in `canvas` and `context`.'); }\n\n  var width = customWidth ||\n              canvas.width ||\n              canvas.clientWidth;\n  var height = customHeight ||\n               canvas.height ||\n               canvas.clientHeight;\n  var deviceRatio = window.devicePixelRatio || 1;\n  var ratio = deviceRatio;\n\n  if (ratio !== 1) {\n    canvas.width = Math.round(width * ratio);\n    canvas.height = Math.round(height * ratio);\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n    context.scale(ratio, ratio);\n  }\n  return ratio;\n};\n````\n## 参考资料\n\n[https://www.html5rocks.com/en/tutorials/canvas/hidpi/](https://www.html5rocks.com/en/tutorials/canvas/hidpi/)\n[https://www.npmjs.com/package/canvas-dpi-scaler](https://www.npmjs.com/package/canvas-dpi-scaler)\n[https://bugs.chromium.org/p/chromium/issues/detail?id=277205](https://bugs.chromium.org/p/chromium/issues/detail?id=277205)\n\n<script type=\"text/javascript\">function drawDiagonal(id){var canvas=document.getElementById(id);\n    var context=canvas.getContext(\"2d\");\n    context.beginPath();\n    context.moveTo(0,0);\n    context.lineTo(100,100);\n    context.stroke();\n}\n\n    drawDiagonal(\"diagonal1\");\n    drawDiagonal(\"diagonal2\");\n    drawDiagonal(\"diagonal3\");\n</script>\n","slug":"视网膜屏下的canvas清晰度处理","published":1,"updated":"2017-08-31T13:33:29.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1dk001yf4b4s217rbrd","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近使用图表插件在移动端绘制canvas图表的时候，发现画出来的图很模糊。经过排查和查询相关资料，发现和视网膜屏设备的设备像素比有关。</p>\n<h2 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h2><h3 id=\"canvas的width-和-canvas的style-width\"><a href=\"#canvas的width-和-canvas的style-width\" class=\"headerlink\" title=\"canvas的width 和 canvas的style.width\"></a>canvas的width 和 canvas的style.width</h3><p>style.width是用来设定canvas元素在浏览器中被渲染的宽度（高度同理）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid;width:100px;height:100px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<canvas style=\"border:1px solid;width:100px;height:100px;\"></canvas>\n\n<p>width属性是用来设置canvas元素里面画布的宽度<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid;\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<canvas style=\"border:1px solid;\" width=\"100px\" height=\"100px\"></canvas>\n\n<p>最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 * 画框宽</p>\n<p>可以看到在不同元素宽，画布宽下绘制出来的（0，0）到（100，100）效果是不一样的。</p>\n<canvas id=\"diagonal1\" style=\"border:1px solid;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal2\" style=\"border:1px solid;width:200px;height:200px;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal3\" style=\"border:1px solid;width:200px;height:200px;display:inline-block\"></canvas>\n\n<h3 id=\"视网膜屏幕\"><a href=\"#视网膜屏幕\" class=\"headerlink\" title=\"视网膜屏幕\"></a>视网膜屏幕</h3><ul>\n<li>物理像素(physical pixel)</li>\n</ul>\n<p>物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。</p>\n<ul>\n<li>设备独立像素(density-independent pixel)</li>\n</ul>\n<p>设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说CSS像素)，然后由相关系统转换为物理像素。</p>\n<ul>\n<li>CSS像素</li>\n</ul>\n<p>CSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs</p>\n<ul>\n<li>设备像素比(device pixel ratio)</li>\n</ul>\n<p>设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：</p>\n<pre><code>设备像素比 ＝ 物理像素 / 设备独立像素\n</code></pre><p>视网膜屏幕的dpr是大于1的，比如iphone6为2。</p>\n<p>以iphone6为例，在上面绘制canvas，绘制1px x 1px时，实际上是使用了2物理像素 x 2物理像素，所以看起来会有模糊的效果。</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>将画布先放大dpr倍，画框维持不变，根据公式：最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 <em> 画框宽，可知，此时绘制出来的图像会缩小dpr </em> dpr倍，因为图像缩小了来显示，这样看就是清晰的，但是图像被缩小了。</p>\n<p>再调用canvas.scale(dpr, dpr),将canvas的绘图的值放大dpr * dpr倍，重新绘制,这样呈现出来的图像大小就是和原来一样，而且清晰的。此处理和视网膜屏幕下的1px处理是类似的。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scaleFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">canvas, context, customWidth, customHeight</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!canvas || !context) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must pass in `canvas` and `context`.'</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> width = customWidth ||</div><div class=\"line\">              canvas.width ||</div><div class=\"line\">              canvas.clientWidth;</div><div class=\"line\">  <span class=\"keyword\">var</span> height = customHeight ||</div><div class=\"line\">               canvas.height ||</div><div class=\"line\">               canvas.clientHeight;</div><div class=\"line\">  <span class=\"keyword\">var</span> deviceRatio = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> ratio = deviceRatio;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (ratio !== <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    canvas.width = <span class=\"built_in\">Math</span>.round(width * ratio);</div><div class=\"line\">    canvas.height = <span class=\"built_in\">Math</span>.round(height * ratio);</div><div class=\"line\">    canvas.style.width = width + <span class=\"string\">'px'</span>;</div><div class=\"line\">    canvas.style.height = height + <span class=\"string\">'px'</span>;</div><div class=\"line\">    context.scale(ratio, ratio);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> ratio;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\" target=\"_blank\" rel=\"external\">https://www.html5rocks.com/en/tutorials/canvas/hidpi/</a><br><a href=\"https://www.npmjs.com/package/canvas-dpi-scaler\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/canvas-dpi-scaler</a><br><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=277205\" target=\"_blank\" rel=\"external\">https://bugs.chromium.org/p/chromium/issues/detail?id=277205</a></p>\n<script type=\"text/javascript\">function drawDiagonal(id){var canvas=document.getElementById(id);\n    var context=canvas.getContext(\"2d\");\n    context.beginPath();\n    context.moveTo(0,0);\n    context.lineTo(100,100);\n    context.stroke();\n}\n\n    drawDiagonal(\"diagonal1\");\n    drawDiagonal(\"diagonal2\");\n    drawDiagonal(\"diagonal3\");\n</script>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近使用图表插件在移动端绘制canvas图表的时候，发现画出来的图很模糊。经过排查和查询相关资料，发现和视网膜屏设备的设备像素比有关。</p>\n<h2 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h2><h3 id=\"canvas的width-和-canvas的style-width\"><a href=\"#canvas的width-和-canvas的style-width\" class=\"headerlink\" title=\"canvas的width 和 canvas的style.width\"></a>canvas的width 和 canvas的style.width</h3><p>style.width是用来设定canvas元素在浏览器中被渲染的宽度（高度同理）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid;width:100px;height:100px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<canvas style=\"border:1px solid;width:100px;height:100px;\"></canvas>\n\n<p>width属性是用来设置canvas元素里面画布的宽度<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid;\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<canvas style=\"border:1px solid;\" width=\"100px\" height=\"100px\"></canvas>\n\n<p>最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 * 画框宽</p>\n<p>可以看到在不同元素宽，画布宽下绘制出来的（0，0）到（100，100）效果是不一样的。</p>\n<canvas id=\"diagonal1\" style=\"border:1px solid;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal2\" style=\"border:1px solid;width:200px;height:200px;display:inline-block;margin-right:35px\" width=\"100px\" height=\"100px\"></canvas><canvas id=\"diagonal3\" style=\"border:1px solid;width:200px;height:200px;display:inline-block\"></canvas>\n\n<h3 id=\"视网膜屏幕\"><a href=\"#视网膜屏幕\" class=\"headerlink\" title=\"视网膜屏幕\"></a>视网膜屏幕</h3><ul>\n<li>物理像素(physical pixel)</li>\n</ul>\n<p>物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。</p>\n<ul>\n<li>设备独立像素(density-independent pixel)</li>\n</ul>\n<p>设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说CSS像素)，然后由相关系统转换为物理像素。</p>\n<ul>\n<li>CSS像素</li>\n</ul>\n<p>CSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs</p>\n<ul>\n<li>设备像素比(device pixel ratio)</li>\n</ul>\n<p>设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：</p>\n<pre><code>设备像素比 ＝ 物理像素 / 设备独立像素\n</code></pre><p>视网膜屏幕的dpr是大于1的，比如iphone6为2。</p>\n<p>以iphone6为例，在上面绘制canvas，绘制1px x 1px时，实际上是使用了2物理像素 x 2物理像素，所以看起来会有模糊的效果。</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>将画布先放大dpr倍，画框维持不变，根据公式：最终绘制出来的宽度 = 需要绘制的宽度 / 画布宽 <em> 画框宽，可知，此时绘制出来的图像会缩小dpr </em> dpr倍，因为图像缩小了来显示，这样看就是清晰的，但是图像被缩小了。</p>\n<p>再调用canvas.scale(dpr, dpr),将canvas的绘图的值放大dpr * dpr倍，重新绘制,这样呈现出来的图像大小就是和原来一样，而且清晰的。此处理和视网膜屏幕下的1px处理是类似的。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scaleFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">canvas, context, customWidth, customHeight</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!canvas || !context) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must pass in `canvas` and `context`.'</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> width = customWidth ||</div><div class=\"line\">              canvas.width ||</div><div class=\"line\">              canvas.clientWidth;</div><div class=\"line\">  <span class=\"keyword\">var</span> height = customHeight ||</div><div class=\"line\">               canvas.height ||</div><div class=\"line\">               canvas.clientHeight;</div><div class=\"line\">  <span class=\"keyword\">var</span> deviceRatio = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> ratio = deviceRatio;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (ratio !== <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    canvas.width = <span class=\"built_in\">Math</span>.round(width * ratio);</div><div class=\"line\">    canvas.height = <span class=\"built_in\">Math</span>.round(height * ratio);</div><div class=\"line\">    canvas.style.width = width + <span class=\"string\">'px'</span>;</div><div class=\"line\">    canvas.style.height = height + <span class=\"string\">'px'</span>;</div><div class=\"line\">    context.scale(ratio, ratio);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> ratio;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\">https://www.html5rocks.com/en/tutorials/canvas/hidpi/</a><br><a href=\"https://www.npmjs.com/package/canvas-dpi-scaler\">https://www.npmjs.com/package/canvas-dpi-scaler</a><br><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=277205\">https://bugs.chromium.org/p/chromium/issues/detail?id=277205</a></p>\n<script type=\"text/javascript\">function drawDiagonal(id){var canvas=document.getElementById(id);\n    var context=canvas.getContext(\"2d\");\n    context.beginPath();\n    context.moveTo(0,0);\n    context.lineTo(100,100);\n    context.stroke();\n}\n\n    drawDiagonal(\"diagonal1\");\n    drawDiagonal(\"diagonal2\");\n    drawDiagonal(\"diagonal3\");\n</script>\n"},{"title":"打造属于自己的栅格系统（翻译）","date":"2017-10-04T16:00:00.000Z","_content":"原文地址：[http://j4n.co/blog/Creating-your-own-css-grid-system](http://j4n.co/blog/Creating-your-own-css-grid-system)\n译者：[60kmlh](https://github.com/60kmlh)\n译文：\n\nCSS栅格系统已经面世很久了，经常在一些CSS框架中可以看见它的身影，比如Boostrap。我不并讨厌Boostrap，但是有时候如果你只是需要一个栅格功能而去引入整个框架，就显得小题大做了。接下来，我将从零开始，教你一步步打造属于自己的CSS栅格系统。\n\n## CSS栅格系统的组成元素\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/grid-elements.png)\n\n正如我们所见，基本的栅格包含一下元素：\n* 一个容器\n* 行\n* 列\n* 列与列之间的间隔\n## 容器\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/container.png)\n\n容器的作用是为整个栅格设置宽度。一般将栅格的宽度设置为100%，但是在大屏幕下，也可为其设置一个max-width属性。\n````css\n.grid-container {\n  width: 100%;\n  max-width:1200px\n}\n````\n## 行\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/row.png)\n\n行的作用是保证自身里面的列不会溢出到其他的行。为了实现这一点，我们使用清除技巧来使行内的元素都会显示在行里面。\n````css\n.row:before,\n.row:after {\n  content: '';\n  display: table;\n  clear: both;\n}\n````\n## 列\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column.png)\n\n列无疑是栅格系统里最复杂的部分了。首先，列在CSS里面有几种不同的定位方式，还要考虑到列的不同宽度，同时响应式设计也是要考虑到的因素。在这个教程里，我们主要解决列的定位和宽度问题。响应式我会留一部分到下次再讲。\n\n## 列的定位\nfloat布局，inline-blocks布局，display-table布局，display-flex布局，这些是用来定位列的不同方法。根据我的个人经验，这些方法里面最不容易出错和运用最广泛的是float布局。然而，当列的内容为空的时候，浮动的列将互相堆叠。为了避免这种情况，我们为列设置一个1px的min-height属性，同时设置float属性。\n````css\n[class*='col-'] {\n  foalt: left;\n  min-height: 1px;\n}\n````\n## 列的宽度\n为了找出列的宽度，我们要做的是将容器的总宽度按列的总数来切分。在我们的教程中，行的宽度是100%，我们将一行设置为包含6个列，这样列的宽度就是100%/6=16.66%。\n````css\n[class*='col-'] {\n  float: left;\n  min-height: 1px;\n  width: 16.66%;\n}\n````\n当然这只是第一步，如果我们想要一个2倍列宽的块，我们就需要一个2倍列宽的列。计算也不复杂，如下：\n````css\n.col-1{\n  width: 16.66%; \n}\n.col-2{\n  width: 33.33%; \n}\n.col-3{\n  width: 50%; \n}\n.col-4{\n  width: 66.664%;\n}\n.col-5{\n  width: 83.33%;\n}\n.col-6{\n  width: 100%;\n}\n````\n在使用这些列组合唯一点要注意的是，每一行的列数加起来要等于6（或者任何其他的列总数，根据你之前的切分数而定）。\n## 列与列之间的间隔\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column-gutters.png)\n\n在设置box-sizing属性值为border-box之前，我们为一个宽度为百分比数值的元素设置一个具体的padding值，这个计算过程是很痛苦的。幸运的是，使用border-box模型之后，我们可以很容易地设置列与列之间的间隔。\n````css\n  /*-- 设置网格内的所有元素为border-box模型 --*/\n.grid-container *{\n  box-sizing: border-box; \n}\n\n[class*='col-'] {\n  float: left;\n  min-height: 1px; \n  width: 16.66%; \n  /*-- 列于列的间隔 --*/\n  padding: 12px;\n}\n````\n（就我自己而言，我会在我的CSS样式里使用* {box-sizing: border-box;} ，这样页面里所有的元素都是border-box模型了。）\n## 基本成型栅格系统\n````html\n<div class=\"grid-container outline\">\n  <div class=\"row\">\n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-3\"><p>col-3</p></div> \n    <div class=\"col-3\"><p>col-3</p></div> \n  </div> \n</div>\n````\n````css\n.grid-container{\n  width: 100%; \n  max-width: 1200px;      \n}\n\n/*-- 清除浮动 -- */ \n.row:before, \n.row:after {\n  content:\"\";\n  display: table ;\n  clear:both;\n}\n\n[class*='col-'] {\n  float: left; \n  min-height: 1px; \n  width: 16.66%; \n  /*-- 间隔 -- */\n  padding: 12px; \n  background-color: #FFDCDC;\n}\n\n.col-1{ width: 16.66%; }\n.col-2{ width: 33.33%; }\n.col-3{ width: 50%;    }\n.col-4{ width: 66.66%; }\n.col-5{ width: 83.33%; }\n.col-6{ width: 100%;   }\n\n.outline, .outline *{\n  outline: 1px solid #F6A1A1; \n}\n\n/*-- 一些列的个性化样式 --*/\n[class*='col-'] > p {\n  background-color: #FFC2C2; \n  padding: 0;\n  margin: 0;\n  text-align: center; \n  color: white; \n}\n````\n## 为你的栅格加上响应式\n调整栅格系统以适应移动端布局并不困难，我们要做的只是调整列的宽度。\n\n为了简单起见，在屏幕宽度小于800px时，我将列的宽度进行放大为两倍。\n\n唯一需要注意的例外情况是，有些时候行的最后一列会超出列。比如当.clo-2的列和.col-1的列跟在.col-5的列旁边时，就会出现这种情况。\n\n为了应对这种情况，我们将处于列尾部的.col-1和.col-2的列的宽设置为100%。\n\n````css\n@media all and (max-width:800px){\n  .col-1{ width: 33.33%; }\n  .col-2{ width: 50%;    }\n  .col-3{ width: 83.33%; }\n  .col-4{ width: 100%;   }\n  .col-5{ width: 100%;   }\n  .col-6{ width: 100%;   }\n\n  .row .col-2:last-of-type{\n      width: 100%; \n }\n\n  .row .col-5 ~ .col-1{\n      width: 100%; \n }\n}\n````\n对于远小于800px宽度的屏幕，我们将除了最小列之外的其他列的宽度设置为100%。\n````css\n@media all and (max-width:650px){\n  .col-1{ width: 50%;  }\n  .col-2{ width: 100%; }\n  .col-3{ width: 100%; }\n  .col-4{ width: 100%; }\n  .col-5{ width: 100%; }\n  .col-6{ width: 100%; }\n  }\n````\n````html\n<div class=\"grid-container outline\">\n  <div class=\"row\">\n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-3\"><p>col-3</p></div> \n    <div class=\"col-3\"><p>col-3</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-4\"><p>col-4</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-5\"><p>col-5</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-6\"><p>col-6</p></div> \n  </div> \n</div>\n````\n到此为止，我们已经脱离框架，打造了属于自己的响应式栅格系统。\n\n需要提醒的是，这份教程只是你创建栅格系统的起点，不是一个完整的框架，也不是一个完善的解决方案。但我希望通过这份教程，能为你揭秘CSS栅格系统的创建过程。\n\n\n\n## 译者补充\n\n这份教程简单易懂地介绍了如何一步一步建立CSS栅格系统。参照Boostrap，栅格系统的响应式功能可以进一步扩展。\n\n增加lg和md样式，利用媒体查询，在不同的浏览器尺寸下应用不同的CSS类。\n\n屏幕宽大于768px时，增加样式\n````css\n@media all and (min-width: 768px) {\n  .col-lg-1 {\n    width: 8.33%;\n  }\n  .col-lg-2 {\n    width: 16.66%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-4 {\n    width: 33.33%;\n  }\n  .col-lg-5 {\n    width: 41.66%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-7 {\n    width: 58.33%;\n  }\n  .col-lg-8 {\n    width: 66.66%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-10 {\n    width: 83.33%;\n  }\n  .col-lg-11 {\n    width: 91.66%;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n}\n````\n屏幕宽小于768px时\n````css\n@media all and (max-width: 768px) {\n  .col-md-1 {\n    width: 8.33%;\n  }\n  .col-md-2 {\n    width: 16.66%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-4 {\n    width: 33.33%;\n  }\n  .col-md-5 {\n    width: 41.66%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-7 {\n    width: 58.33%;\n  }\n  .col-md-8 {\n    width: 66.66%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-10 {\n    width: 83.33%;\n  }\n  .col-md-11 {\n    width: 91.66%;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n}\n````\nhtml里面这样使用\n````html\n<body>\n<div class=\"wrap\">\n  <div class=\"row\">\n    <div class=\"col-lg-4 col-md-6\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-4 col-md-6\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-4 col-md-12\">\n      <div class=\"content\"></div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-lg-3 col-md-3\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-6 col-md-6\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-3 col-md-3\">\n      <div class=\"content\"></div>\n    </div>    \n  </div>\n  <div class=\"row\">\n    <div class=\"col-lg-1 col-md-2\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-1 col-md-2\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-2 col-md-8\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-2 col-md-3\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-6 col-md-3\">\n      <div class=\"content\"></div>\n    </div>\n  </div>\n</div>\n</body>\n````\n\n使用css预编译器编写上面的css更加方便\n````stylus\ngetGridWidth(n)\n  n/12*100%\n\n@media all and (min-width:768px)\n  for n in 1..12\n    .col-lg-{n}\n      width getGridWidth(n)\n\n@media all and (max-width:768px)\n  for n in 1..12\n    .col-md-{n}\n      width getGridWidth(n)\n\n````\n\n最终效果展示\n\n[http://60kmlh.ink/css-grid/](http://60kmlh.ink/css-grid/)","source":"_posts/打造属于自己的栅格系统（翻译）.md","raw":"---\ntitle: 打造属于自己的栅格系统（翻译）\ndate: 2017-10-05\ntags: ['css','grid','responsive']\ncategories: ['翻译']\n---\n原文地址：[http://j4n.co/blog/Creating-your-own-css-grid-system](http://j4n.co/blog/Creating-your-own-css-grid-system)\n译者：[60kmlh](https://github.com/60kmlh)\n译文：\n\nCSS栅格系统已经面世很久了，经常在一些CSS框架中可以看见它的身影，比如Boostrap。我不并讨厌Boostrap，但是有时候如果你只是需要一个栅格功能而去引入整个框架，就显得小题大做了。接下来，我将从零开始，教你一步步打造属于自己的CSS栅格系统。\n\n## CSS栅格系统的组成元素\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/grid-elements.png)\n\n正如我们所见，基本的栅格包含一下元素：\n* 一个容器\n* 行\n* 列\n* 列与列之间的间隔\n## 容器\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/container.png)\n\n容器的作用是为整个栅格设置宽度。一般将栅格的宽度设置为100%，但是在大屏幕下，也可为其设置一个max-width属性。\n````css\n.grid-container {\n  width: 100%;\n  max-width:1200px\n}\n````\n## 行\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/row.png)\n\n行的作用是保证自身里面的列不会溢出到其他的行。为了实现这一点，我们使用清除技巧来使行内的元素都会显示在行里面。\n````css\n.row:before,\n.row:after {\n  content: '';\n  display: table;\n  clear: both;\n}\n````\n## 列\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column.png)\n\n列无疑是栅格系统里最复杂的部分了。首先，列在CSS里面有几种不同的定位方式，还要考虑到列的不同宽度，同时响应式设计也是要考虑到的因素。在这个教程里，我们主要解决列的定位和宽度问题。响应式我会留一部分到下次再讲。\n\n## 列的定位\nfloat布局，inline-blocks布局，display-table布局，display-flex布局，这些是用来定位列的不同方法。根据我的个人经验，这些方法里面最不容易出错和运用最广泛的是float布局。然而，当列的内容为空的时候，浮动的列将互相堆叠。为了避免这种情况，我们为列设置一个1px的min-height属性，同时设置float属性。\n````css\n[class*='col-'] {\n  foalt: left;\n  min-height: 1px;\n}\n````\n## 列的宽度\n为了找出列的宽度，我们要做的是将容器的总宽度按列的总数来切分。在我们的教程中，行的宽度是100%，我们将一行设置为包含6个列，这样列的宽度就是100%/6=16.66%。\n````css\n[class*='col-'] {\n  float: left;\n  min-height: 1px;\n  width: 16.66%;\n}\n````\n当然这只是第一步，如果我们想要一个2倍列宽的块，我们就需要一个2倍列宽的列。计算也不复杂，如下：\n````css\n.col-1{\n  width: 16.66%; \n}\n.col-2{\n  width: 33.33%; \n}\n.col-3{\n  width: 50%; \n}\n.col-4{\n  width: 66.664%;\n}\n.col-5{\n  width: 83.33%;\n}\n.col-6{\n  width: 100%;\n}\n````\n在使用这些列组合唯一点要注意的是，每一行的列数加起来要等于6（或者任何其他的列总数，根据你之前的切分数而定）。\n## 列与列之间的间隔\n![](http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column-gutters.png)\n\n在设置box-sizing属性值为border-box之前，我们为一个宽度为百分比数值的元素设置一个具体的padding值，这个计算过程是很痛苦的。幸运的是，使用border-box模型之后，我们可以很容易地设置列与列之间的间隔。\n````css\n  /*-- 设置网格内的所有元素为border-box模型 --*/\n.grid-container *{\n  box-sizing: border-box; \n}\n\n[class*='col-'] {\n  float: left;\n  min-height: 1px; \n  width: 16.66%; \n  /*-- 列于列的间隔 --*/\n  padding: 12px;\n}\n````\n（就我自己而言，我会在我的CSS样式里使用* {box-sizing: border-box;} ，这样页面里所有的元素都是border-box模型了。）\n## 基本成型栅格系统\n````html\n<div class=\"grid-container outline\">\n  <div class=\"row\">\n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-3\"><p>col-3</p></div> \n    <div class=\"col-3\"><p>col-3</p></div> \n  </div> \n</div>\n````\n````css\n.grid-container{\n  width: 100%; \n  max-width: 1200px;      \n}\n\n/*-- 清除浮动 -- */ \n.row:before, \n.row:after {\n  content:\"\";\n  display: table ;\n  clear:both;\n}\n\n[class*='col-'] {\n  float: left; \n  min-height: 1px; \n  width: 16.66%; \n  /*-- 间隔 -- */\n  padding: 12px; \n  background-color: #FFDCDC;\n}\n\n.col-1{ width: 16.66%; }\n.col-2{ width: 33.33%; }\n.col-3{ width: 50%;    }\n.col-4{ width: 66.66%; }\n.col-5{ width: 83.33%; }\n.col-6{ width: 100%;   }\n\n.outline, .outline *{\n  outline: 1px solid #F6A1A1; \n}\n\n/*-- 一些列的个性化样式 --*/\n[class*='col-'] > p {\n  background-color: #FFC2C2; \n  padding: 0;\n  margin: 0;\n  text-align: center; \n  color: white; \n}\n````\n## 为你的栅格加上响应式\n调整栅格系统以适应移动端布局并不困难，我们要做的只是调整列的宽度。\n\n为了简单起见，在屏幕宽度小于800px时，我将列的宽度进行放大为两倍。\n\n唯一需要注意的例外情况是，有些时候行的最后一列会超出列。比如当.clo-2的列和.col-1的列跟在.col-5的列旁边时，就会出现这种情况。\n\n为了应对这种情况，我们将处于列尾部的.col-1和.col-2的列的宽设置为100%。\n\n````css\n@media all and (max-width:800px){\n  .col-1{ width: 33.33%; }\n  .col-2{ width: 50%;    }\n  .col-3{ width: 83.33%; }\n  .col-4{ width: 100%;   }\n  .col-5{ width: 100%;   }\n  .col-6{ width: 100%;   }\n\n  .row .col-2:last-of-type{\n      width: 100%; \n }\n\n  .row .col-5 ~ .col-1{\n      width: 100%; \n }\n}\n````\n对于远小于800px宽度的屏幕，我们将除了最小列之外的其他列的宽度设置为100%。\n````css\n@media all and (max-width:650px){\n  .col-1{ width: 50%;  }\n  .col-2{ width: 100%; }\n  .col-3{ width: 100%; }\n  .col-4{ width: 100%; }\n  .col-5{ width: 100%; }\n  .col-6{ width: 100%; }\n  }\n````\n````html\n<div class=\"grid-container outline\">\n  <div class=\"row\">\n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-3\"><p>col-3</p></div> \n    <div class=\"col-3\"><p>col-3</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-4\"><p>col-4</p></div> \n    <div class=\"col-2\"><p>col-2</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-5\"><p>col-5</p></div> \n    <div class=\"col-1\"><p>col-1</p></div> \n  </div> \n  <div class=\"row\">\n    <div class=\"col-6\"><p>col-6</p></div> \n  </div> \n</div>\n````\n到此为止，我们已经脱离框架，打造了属于自己的响应式栅格系统。\n\n需要提醒的是，这份教程只是你创建栅格系统的起点，不是一个完整的框架，也不是一个完善的解决方案。但我希望通过这份教程，能为你揭秘CSS栅格系统的创建过程。\n\n\n\n## 译者补充\n\n这份教程简单易懂地介绍了如何一步一步建立CSS栅格系统。参照Boostrap，栅格系统的响应式功能可以进一步扩展。\n\n增加lg和md样式，利用媒体查询，在不同的浏览器尺寸下应用不同的CSS类。\n\n屏幕宽大于768px时，增加样式\n````css\n@media all and (min-width: 768px) {\n  .col-lg-1 {\n    width: 8.33%;\n  }\n  .col-lg-2 {\n    width: 16.66%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-4 {\n    width: 33.33%;\n  }\n  .col-lg-5 {\n    width: 41.66%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-7 {\n    width: 58.33%;\n  }\n  .col-lg-8 {\n    width: 66.66%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-10 {\n    width: 83.33%;\n  }\n  .col-lg-11 {\n    width: 91.66%;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n}\n````\n屏幕宽小于768px时\n````css\n@media all and (max-width: 768px) {\n  .col-md-1 {\n    width: 8.33%;\n  }\n  .col-md-2 {\n    width: 16.66%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-4 {\n    width: 33.33%;\n  }\n  .col-md-5 {\n    width: 41.66%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-7 {\n    width: 58.33%;\n  }\n  .col-md-8 {\n    width: 66.66%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-10 {\n    width: 83.33%;\n  }\n  .col-md-11 {\n    width: 91.66%;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n}\n````\nhtml里面这样使用\n````html\n<body>\n<div class=\"wrap\">\n  <div class=\"row\">\n    <div class=\"col-lg-4 col-md-6\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-4 col-md-6\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-4 col-md-12\">\n      <div class=\"content\"></div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-lg-3 col-md-3\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-6 col-md-6\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-3 col-md-3\">\n      <div class=\"content\"></div>\n    </div>    \n  </div>\n  <div class=\"row\">\n    <div class=\"col-lg-1 col-md-2\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-1 col-md-2\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-2 col-md-8\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-2 col-md-3\">\n      <div class=\"content\"></div>\n    </div>\n    <div class=\"col-lg-6 col-md-3\">\n      <div class=\"content\"></div>\n    </div>\n  </div>\n</div>\n</body>\n````\n\n使用css预编译器编写上面的css更加方便\n````stylus\ngetGridWidth(n)\n  n/12*100%\n\n@media all and (min-width:768px)\n  for n in 1..12\n    .col-lg-{n}\n      width getGridWidth(n)\n\n@media all and (max-width:768px)\n  for n in 1..12\n    .col-md-{n}\n      width getGridWidth(n)\n\n````\n\n最终效果展示\n\n[http://60kmlh.ink/css-grid/](http://60kmlh.ink/css-grid/)","slug":"打造属于自己的栅格系统（翻译）","published":1,"updated":"2017-10-08T08:12:28.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1dm0021f4b4cngwygoo","content":"<p>原文地址：<a href=\"http://j4n.co/blog/Creating-your-own-css-grid-system\" target=\"_blank\" rel=\"external\">http://j4n.co/blog/Creating-your-own-css-grid-system</a><br>译者：<a href=\"https://github.com/60kmlh\" target=\"_blank\" rel=\"external\">60kmlh</a><br>译文：</p>\n<p>CSS栅格系统已经面世很久了，经常在一些CSS框架中可以看见它的身影，比如Boostrap。我不并讨厌Boostrap，但是有时候如果你只是需要一个栅格功能而去引入整个框架，就显得小题大做了。接下来，我将从零开始，教你一步步打造属于自己的CSS栅格系统。</p>\n<h2 id=\"CSS栅格系统的组成元素\"><a href=\"#CSS栅格系统的组成元素\" class=\"headerlink\" title=\"CSS栅格系统的组成元素\"></a>CSS栅格系统的组成元素</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/grid-elements.png\" alt=\"\"></p>\n<p>正如我们所见，基本的栅格包含一下元素：</p>\n<ul>\n<li>一个容器</li>\n<li>行</li>\n<li>列</li>\n<li>列与列之间的间隔<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/container.png\" alt=\"\"></li>\n</ul>\n<p>容器的作用是为整个栅格设置宽度。一般将栅格的宽度设置为100%，但是在大屏幕下，也可为其设置一个max-width属性。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.grid-container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>:<span class=\"number\">1200px</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/row.png\" alt=\"\"></p>\n<p>行的作用是保证自身里面的列不会溢出到其他的行。为了实现这一点，我们使用清除技巧来使行内的元素都会显示在行里面。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:before</span>,</div><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: table;</div><div class=\"line\">  <span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column.png\" alt=\"\"></p>\n<p>列无疑是栅格系统里最复杂的部分了。首先，列在CSS里面有几种不同的定位方式，还要考虑到列的不同宽度，同时响应式设计也是要考虑到的因素。在这个教程里，我们主要解决列的定位和宽度问题。响应式我会留一部分到下次再讲。</p>\n<h2 id=\"列的定位\"><a href=\"#列的定位\" class=\"headerlink\" title=\"列的定位\"></a>列的定位</h2><p>float布局，inline-blocks布局，display-table布局，display-flex布局，这些是用来定位列的不同方法。根据我的个人经验，这些方法里面最不容易出错和运用最广泛的是float布局。然而，当列的内容为空的时候，浮动的列将互相堆叠。为了避免这种情况，我们为列设置一个1px的min-height属性，同时设置float属性。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">foalt</span>: left;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"列的宽度\"><a href=\"#列的宽度\" class=\"headerlink\" title=\"列的宽度\"></a>列的宽度</h2><p>为了找出列的宽度，我们要做的是将容器的总宽度按列的总数来切分。在我们的教程中，行的宽度是100%，我们将一行设置为包含6个列，这样列的宽度就是100%/6=16.66%。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当然这只是第一步，如果我们想要一个2倍列宽的块，我们就需要一个2倍列宽的列。计算也不复杂，如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.col-1</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-2</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-3</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-4</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">66.664%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-5</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-6</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在使用这些列组合唯一点要注意的是，每一行的列数加起来要等于6（或者任何其他的列总数，根据你之前的切分数而定）。</p>\n<h2 id=\"列与列之间的间隔\"><a href=\"#列与列之间的间隔\" class=\"headerlink\" title=\"列与列之间的间隔\"></a>列与列之间的间隔</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column-gutters.png\" alt=\"\"></p>\n<p>在设置box-sizing属性值为border-box之前，我们为一个宽度为百分比数值的元素设置一个具体的padding值，这个计算过程是很痛苦的。幸运的是，使用border-box模型之后，我们可以很容易地设置列与列之间的间隔。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">/*-- 设置网格内的所有元素为border-box模型 --*/</span></div><div class=\"line\"><span class=\"selector-class\">.grid-container</span> *&#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>; </div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; </div><div class=\"line\">  <span class=\"comment\">/*-- 列于列的间隔 --*/</span></div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>（就我自己而言，我会在我的CSS样式里使用* {box-sizing: border-box;} ，这样页面里所有的元素都是border-box模型了。）</p>\n<h2 id=\"基本成型栅格系统\"><a href=\"#基本成型栅格系统\" class=\"headerlink\" title=\"基本成型栅格系统\"></a>基本成型栅格系统</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-container outline\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.grid-container</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">1200px</span>;      </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*-- 清除浮动 -- */</span> </div><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:before</span>, </div><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: table ;</div><div class=\"line\">  <span class=\"attribute\">clear</span>:both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left; </div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>; </div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; </div><div class=\"line\">  <span class=\"comment\">/*-- 间隔 -- */</span></div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>; </div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFDCDC</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.col-1</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-2</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-3</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;    &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-4</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">66.66%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-5</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-6</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.outline</span>, <span class=\"selector-class\">.outline</span> *&#123;</div><div class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#F6A1A1</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*-- 一些列的个性化样式 --*/</span></div><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &gt; <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFC2C2</span>; </div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center; </div><div class=\"line\">  <span class=\"attribute\">color</span>: white; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"为你的栅格加上响应式\"><a href=\"#为你的栅格加上响应式\" class=\"headerlink\" title=\"为你的栅格加上响应式\"></a>为你的栅格加上响应式</h2><p>调整栅格系统以适应移动端布局并不困难，我们要做的只是调整列的宽度。</p>\n<p>为了简单起见，在屏幕宽度小于800px时，我将列的宽度进行放大为两倍。</p>\n<p>唯一需要注意的例外情况是，有些时候行的最后一列会超出列。比如当.clo-2的列和.col-1的列跟在.col-5的列旁边时，就会出现这种情况。</p>\n<p>为了应对这种情况，我们将处于列尾部的.col-1和.col-2的列的宽设置为100%。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (max-width:<span class=\"number\">800px</span>)&#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-1</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-2</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;    &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-3</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-4</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-5</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-6</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-class\">.row</span> <span class=\"selector-class\">.col-2</span><span class=\"selector-pseudo\">:last-of-type</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-class\">.row</span> <span class=\"selector-class\">.col-5</span> ~ <span class=\"selector-class\">.col-1</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于远小于800px宽度的屏幕，我们将除了最小列之外的其他列的宽度设置为100%。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (max-width:<span class=\"number\">650px</span>)&#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-1</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-2</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-3</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-4</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-5</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-6</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-container outline\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-5\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-6<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>到此为止，我们已经脱离框架，打造了属于自己的响应式栅格系统。</p>\n<p>需要提醒的是，这份教程只是你创建栅格系统的起点，不是一个完整的框架，也不是一个完善的解决方案。但我希望通过这份教程，能为你揭秘CSS栅格系统的创建过程。</p>\n<h2 id=\"译者补充\"><a href=\"#译者补充\" class=\"headerlink\" title=\"译者补充\"></a>译者补充</h2><p>这份教程简单易懂地介绍了如何一步一步建立CSS栅格系统。参照Boostrap，栅格系统的响应式功能可以进一步扩展。</p>\n<p>增加lg和md样式，利用媒体查询，在不同的浏览器尺寸下应用不同的CSS类。</p>\n<p>屏幕宽大于768px时，增加样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (min-width: <span class=\"number\">768px</span>) &#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-4</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-5</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">41.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-6</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-7</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">58.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-8</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">66.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-9</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-10</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-11</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">91.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-12</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>屏幕宽小于768px时<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (max-width: <span class=\"number\">768px</span>) &#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-4</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-5</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">41.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-6</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-7</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">58.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-8</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">66.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-9</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-10</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-11</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">91.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-12</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>html里面这样使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-4 col-md-6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-4 col-md-6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-4 col-md-12\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-3 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-6 col-md-6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-3 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-1 col-md-2\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-1 col-md-2\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-2 col-md-8\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-2 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-6 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用css预编译器编写上面的css更加方便<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">getGridWidth</span><span class=\"params\">(n)</span></span></div><div class=\"line\">  n/<span class=\"number\">12</span>*<span class=\"number\">100%</span></div><div class=\"line\"></div><div class=\"line\">@media all and (<span class=\"attribute\">min-width</span>:<span class=\"number\">768px</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">12</span></div><div class=\"line\">    .col-lg-&#123;n&#125;</div><div class=\"line\">      <span class=\"attribute\">width</span> getGridWidth(n)</div><div class=\"line\"></div><div class=\"line\">@media all and (<span class=\"attribute\">max-width</span>:<span class=\"number\">768px</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">12</span></div><div class=\"line\">    .col-md-&#123;n&#125;</div><div class=\"line\">      <span class=\"attribute\">width</span> getGridWidth(n)</div></pre></td></tr></table></figure></p>\n<p>最终效果展示</p>\n<p><a href=\"http://60kmlh.ink/css-grid/\" target=\"_blank\" rel=\"external\">http://60kmlh.ink/css-grid/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"http://j4n.co/blog/Creating-your-own-css-grid-system\">http://j4n.co/blog/Creating-your-own-css-grid-system</a><br>译者：<a href=\"https://github.com/60kmlh\">60kmlh</a><br>译文：</p>\n<p>CSS栅格系统已经面世很久了，经常在一些CSS框架中可以看见它的身影，比如Boostrap。我不并讨厌Boostrap，但是有时候如果你只是需要一个栅格功能而去引入整个框架，就显得小题大做了。接下来，我将从零开始，教你一步步打造属于自己的CSS栅格系统。</p>\n<h2 id=\"CSS栅格系统的组成元素\"><a href=\"#CSS栅格系统的组成元素\" class=\"headerlink\" title=\"CSS栅格系统的组成元素\"></a>CSS栅格系统的组成元素</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/grid-elements.png\" alt=\"\"></p>\n<p>正如我们所见，基本的栅格包含一下元素：</p>\n<ul>\n<li>一个容器</li>\n<li>行</li>\n<li>列</li>\n<li>列与列之间的间隔<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/container.png\" alt=\"\"></li>\n</ul>\n<p>容器的作用是为整个栅格设置宽度。一般将栅格的宽度设置为100%，但是在大屏幕下，也可为其设置一个max-width属性。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.grid-container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>:<span class=\"number\">1200px</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/row.png\" alt=\"\"></p>\n<p>行的作用是保证自身里面的列不会溢出到其他的行。为了实现这一点，我们使用清除技巧来使行内的元素都会显示在行里面。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:before</span>,</div><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: table;</div><div class=\"line\">  <span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column.png\" alt=\"\"></p>\n<p>列无疑是栅格系统里最复杂的部分了。首先，列在CSS里面有几种不同的定位方式，还要考虑到列的不同宽度，同时响应式设计也是要考虑到的因素。在这个教程里，我们主要解决列的定位和宽度问题。响应式我会留一部分到下次再讲。</p>\n<h2 id=\"列的定位\"><a href=\"#列的定位\" class=\"headerlink\" title=\"列的定位\"></a>列的定位</h2><p>float布局，inline-blocks布局，display-table布局，display-flex布局，这些是用来定位列的不同方法。根据我的个人经验，这些方法里面最不容易出错和运用最广泛的是float布局。然而，当列的内容为空的时候，浮动的列将互相堆叠。为了避免这种情况，我们为列设置一个1px的min-height属性，同时设置float属性。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">foalt</span>: left;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"列的宽度\"><a href=\"#列的宽度\" class=\"headerlink\" title=\"列的宽度\"></a>列的宽度</h2><p>为了找出列的宽度，我们要做的是将容器的总宽度按列的总数来切分。在我们的教程中，行的宽度是100%，我们将一行设置为包含6个列，这样列的宽度就是100%/6=16.66%。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当然这只是第一步，如果我们想要一个2倍列宽的块，我们就需要一个2倍列宽的列。计算也不复杂，如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.col-1</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-2</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-3</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-4</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">66.664%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-5</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-6</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在使用这些列组合唯一点要注意的是，每一行的列数加起来要等于6（或者任何其他的列总数，根据你之前的切分数而定）。</p>\n<h2 id=\"列与列之间的间隔\"><a href=\"#列与列之间的间隔\" class=\"headerlink\" title=\"列与列之间的间隔\"></a>列与列之间的间隔</h2><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/column-gutters.png\" alt=\"\"></p>\n<p>在设置box-sizing属性值为border-box之前，我们为一个宽度为百分比数值的元素设置一个具体的padding值，这个计算过程是很痛苦的。幸运的是，使用border-box模型之后，我们可以很容易地设置列与列之间的间隔。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">/*-- 设置网格内的所有元素为border-box模型 --*/</span></div><div class=\"line\"><span class=\"selector-class\">.grid-container</span> *&#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>; </div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; </div><div class=\"line\">  <span class=\"comment\">/*-- 列于列的间隔 --*/</span></div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>（就我自己而言，我会在我的CSS样式里使用* {box-sizing: border-box;} ，这样页面里所有的元素都是border-box模型了。）</p>\n<h2 id=\"基本成型栅格系统\"><a href=\"#基本成型栅格系统\" class=\"headerlink\" title=\"基本成型栅格系统\"></a>基本成型栅格系统</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-container outline\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.grid-container</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">1200px</span>;      </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*-- 清除浮动 -- */</span> </div><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:before</span>, </div><div class=\"line\"><span class=\"selector-class\">.row</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: table ;</div><div class=\"line\">  <span class=\"attribute\">clear</span>:both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left; </div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">1px</span>; </div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; </div><div class=\"line\">  <span class=\"comment\">/*-- 间隔 -- */</span></div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>; </div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFDCDC</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.col-1</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-2</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-3</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;    &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-4</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">66.66%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-5</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.col-6</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.outline</span>, <span class=\"selector-class\">.outline</span> *&#123;</div><div class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#F6A1A1</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*-- 一些列的个性化样式 --*/</span></div><div class=\"line\"><span class=\"selector-attr\">[class*='col-']</span> &gt; <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFC2C2</span>; </div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center; </div><div class=\"line\">  <span class=\"attribute\">color</span>: white; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"为你的栅格加上响应式\"><a href=\"#为你的栅格加上响应式\" class=\"headerlink\" title=\"为你的栅格加上响应式\"></a>为你的栅格加上响应式</h2><p>调整栅格系统以适应移动端布局并不困难，我们要做的只是调整列的宽度。</p>\n<p>为了简单起见，在屏幕宽度小于800px时，我将列的宽度进行放大为两倍。</p>\n<p>唯一需要注意的例外情况是，有些时候行的最后一列会超出列。比如当.clo-2的列和.col-1的列跟在.col-5的列旁边时，就会出现这种情况。</p>\n<p>为了应对这种情况，我们将处于列尾部的.col-1和.col-2的列的宽设置为100%。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (max-width:<span class=\"number\">800px</span>)&#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-1</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-2</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;    &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-3</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-4</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-5</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-6</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;   &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-class\">.row</span> <span class=\"selector-class\">.col-2</span><span class=\"selector-pseudo\">:last-of-type</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-class\">.row</span> <span class=\"selector-class\">.col-5</span> ~ <span class=\"selector-class\">.col-1</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于远小于800px宽度的屏幕，我们将除了最小列之外的其他列的宽度设置为100%。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (max-width:<span class=\"number\">650px</span>)&#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-1</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-2</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-3</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-4</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-5</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-6</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-container outline\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-5\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>col-6<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>到此为止，我们已经脱离框架，打造了属于自己的响应式栅格系统。</p>\n<p>需要提醒的是，这份教程只是你创建栅格系统的起点，不是一个完整的框架，也不是一个完善的解决方案。但我希望通过这份教程，能为你揭秘CSS栅格系统的创建过程。</p>\n<h2 id=\"译者补充\"><a href=\"#译者补充\" class=\"headerlink\" title=\"译者补充\"></a>译者补充</h2><p>这份教程简单易懂地介绍了如何一步一步建立CSS栅格系统。参照Boostrap，栅格系统的响应式功能可以进一步扩展。</p>\n<p>增加lg和md样式，利用媒体查询，在不同的浏览器尺寸下应用不同的CSS类。</p>\n<p>屏幕宽大于768px时，增加样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (min-width: <span class=\"number\">768px</span>) &#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-4</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-5</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">41.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-6</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-7</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">58.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-8</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">66.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-9</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-10</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-11</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">91.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-lg-12</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>屏幕宽小于768px时<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> all and (max-width: <span class=\"number\">768px</span>) &#123;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-4</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-5</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">41.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-6</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-7</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">58.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-8</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">66.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-9</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-10</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">83.33%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-11</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">91.66%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.col-md-12</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>html里面这样使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-4 col-md-6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-4 col-md-6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-4 col-md-12\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-3 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-6 col-md-6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-3 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-1 col-md-2\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-1 col-md-2\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-2 col-md-8\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-2 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-lg-6 col-md-3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用css预编译器编写上面的css更加方便<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">getGridWidth</span><span class=\"params\">(n)</span></span></div><div class=\"line\">  n/<span class=\"number\">12</span>*<span class=\"number\">100%</span></div><div class=\"line\"></div><div class=\"line\">@media all and (<span class=\"attribute\">min-width</span>:<span class=\"number\">768px</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">12</span></div><div class=\"line\">    .col-lg-&#123;n&#125;</div><div class=\"line\">      <span class=\"attribute\">width</span> getGridWidth(n)</div><div class=\"line\"></div><div class=\"line\">@media all and (<span class=\"attribute\">max-width</span>:<span class=\"number\">768px</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">12</span></div><div class=\"line\">    .col-md-&#123;n&#125;</div><div class=\"line\">      <span class=\"attribute\">width</span> getGridWidth(n)</div></pre></td></tr></table></figure></p>\n<p>最终效果展示</p>\n<p><a href=\"http://60kmlh.ink/css-grid/\">http://60kmlh.ink/css-grid/</a></p>\n"},{"title":"FormData笔记","date":"2017-05-05T16:00:00.000Z","_content":"之前项目里需要用到传很多参数的表单提交，原生的表单提交过程可控性差，又不想手动拼接很长的参数，于是决定学习和使用FormData进行替代。\n\n# 概念\nXMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。\n#基本使用\n1. 使用new FormData()插件一个FormData对象，调用append()添加字段。\n````javascript\nvar formData = new FormData();\n\nformData.append(\"username\", \"Groucho\");\nformData.append(\"accountnum\", 123456); // 数字 123456 会被立即转换成字符串 \"123456\"\n\n// HTML 文件类型input，由用户选择\nformData.append(\"userfile\", fileInputElement.files[0]);\n\n// JavaScript file-like 对象\nvar content = '<a id=\"a\"><b id=\"b\">hey!</b></a>'; // 新文件的正文...\nvar blob = new Blob([content], { type: \"text/xml\"});\n\nformData.append(\"webmasterfile\", blob);\n\nvar request = new XMLHttpRequest();\nrequest.open(\"POST\", \"http://foo.com/submitform.php\");\nrequest.send(formData);\n````\n2. 构造一个包含Form表单数据的FormData对象，需要在创建FormData对象时传入指定表单的元素\n```javascript\nvar formElement = document.querySelector(\"form\");\nvar formData = new FormData(formElement);\nvar request = new XMLHttpRequest();\nrequest.open(\"POST\", \"submitform.php\");\nformData.append(\"serialnumber\", serialNumber++);\nrequest.send(formData);\n````\n3. 常用api\n* append() 用于添加一个新值到 FormData 对象内的一个已存在的键中，如果键不存在则会添加该键。\n* delete() 用于从 FormData 对象中删除指定 key 和它对应的 value(s)。\n* entries() 用于返回一个 iterator对象 ，此对象可以遍历访问FormData中的键值对。其中键值对的key是一个 USVString 对象；value是一个 USVString , 或者 Blob对象。\n# 配合axios使用\n之前项目是使用axios进行http请求，FormData配合axios使用，请求方法和请求头配置为\n````javascript\naxios.post(url, params, {\n    method: 'post',\n    headers: { 'Content-Type': 'multipart/form-data' }\n})\n````\n# 参考资料\n[https://developer.mozilla.org/zh-CN/docs/Web/API/FormData](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)\n","source":"_posts/FormData笔记.md","raw":"---\ntitle: FormData笔记\ndate: 2017-05-06\ntags: ['FormData']\ncategories: ['笔记']\n---\n之前项目里需要用到传很多参数的表单提交，原生的表单提交过程可控性差，又不想手动拼接很长的参数，于是决定学习和使用FormData进行替代。\n\n# 概念\nXMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。\n#基本使用\n1. 使用new FormData()插件一个FormData对象，调用append()添加字段。\n````javascript\nvar formData = new FormData();\n\nformData.append(\"username\", \"Groucho\");\nformData.append(\"accountnum\", 123456); // 数字 123456 会被立即转换成字符串 \"123456\"\n\n// HTML 文件类型input，由用户选择\nformData.append(\"userfile\", fileInputElement.files[0]);\n\n// JavaScript file-like 对象\nvar content = '<a id=\"a\"><b id=\"b\">hey!</b></a>'; // 新文件的正文...\nvar blob = new Blob([content], { type: \"text/xml\"});\n\nformData.append(\"webmasterfile\", blob);\n\nvar request = new XMLHttpRequest();\nrequest.open(\"POST\", \"http://foo.com/submitform.php\");\nrequest.send(formData);\n````\n2. 构造一个包含Form表单数据的FormData对象，需要在创建FormData对象时传入指定表单的元素\n```javascript\nvar formElement = document.querySelector(\"form\");\nvar formData = new FormData(formElement);\nvar request = new XMLHttpRequest();\nrequest.open(\"POST\", \"submitform.php\");\nformData.append(\"serialnumber\", serialNumber++);\nrequest.send(formData);\n````\n3. 常用api\n* append() 用于添加一个新值到 FormData 对象内的一个已存在的键中，如果键不存在则会添加该键。\n* delete() 用于从 FormData 对象中删除指定 key 和它对应的 value(s)。\n* entries() 用于返回一个 iterator对象 ，此对象可以遍历访问FormData中的键值对。其中键值对的key是一个 USVString 对象；value是一个 USVString , 或者 Blob对象。\n# 配合axios使用\n之前项目是使用axios进行http请求，FormData配合axios使用，请求方法和请求头配置为\n````javascript\naxios.post(url, params, {\n    method: 'post',\n    headers: { 'Content-Type': 'multipart/form-data' }\n})\n````\n# 参考资料\n[https://developer.mozilla.org/zh-CN/docs/Web/API/FormData](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)\n","slug":"FormData笔记","published":1,"updated":"2017-07-09T08:23:39.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjshhi1do0024f4b44etlzxjn","content":"<p>之前项目里需要用到传很多参数的表单提交，原生的表单提交过程可控性差，又不想手动拼接很长的参数，于是决定学习和使用FormData进行替代。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。</p>\n<p>#基本使用</p>\n<ol>\n<li><p>使用new FormData()插件一个FormData对象，调用append()添加字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\"></div><div class=\"line\">formData.append(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"Groucho\"</span>);</div><div class=\"line\">formData.append(<span class=\"string\">\"accountnum\"</span>, <span class=\"number\">123456</span>); <span class=\"comment\">// 数字 123456 会被立即转换成字符串 \"123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// HTML 文件类型input，由用户选择</span></div><div class=\"line\">formData.append(<span class=\"string\">\"userfile\"</span>, fileInputElement.files[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// JavaScript file-like 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class=\"comment\">// 新文件的正文...</span></div><div class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([content], &#123; <span class=\"attr\">type</span>: <span class=\"string\">\"text/xml\"</span>&#125;);</div><div class=\"line\"></div><div class=\"line\">formData.append(<span class=\"string\">\"webmasterfile\"</span>, blob);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">request.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://foo.com/submitform.php\"</span>);</div><div class=\"line\">request.send(formData);</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造一个包含Form表单数据的FormData对象，需要在创建FormData对象时传入指定表单的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formElement = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"form\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(formElement);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">request.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"submitform.php\"</span>);</div><div class=\"line\">formData.append(<span class=\"string\">\"serialnumber\"</span>, serialNumber++);</div><div class=\"line\">request.send(formData);</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>常用api</p>\n</li>\n</ol>\n<ul>\n<li>append() 用于添加一个新值到 FormData 对象内的一个已存在的键中，如果键不存在则会添加该键。</li>\n<li>delete() 用于从 FormData 对象中删除指定 key 和它对应的 value(s)。</li>\n<li>entries() 用于返回一个 iterator对象 ，此对象可以遍历访问FormData中的键值对。其中键值对的key是一个 USVString 对象；value是一个 USVString , 或者 Blob对象。<h1 id=\"配合axios使用\"><a href=\"#配合axios使用\" class=\"headerlink\" title=\"配合axios使用\"></a>配合axios使用</h1>之前项目是使用axios进行http请求，FormData配合axios使用，请求方法和请求头配置为<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.post(url, params, &#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span> &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/API/FormData</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前项目里需要用到传很多参数的表单提交，原生的表单提交过程可控性差，又不想手动拼接很长的参数，于是决定学习和使用FormData进行替代。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。</p>\n<p>#基本使用</p>\n<ol>\n<li><p>使用new FormData()插件一个FormData对象，调用append()添加字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\"></div><div class=\"line\">formData.append(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"Groucho\"</span>);</div><div class=\"line\">formData.append(<span class=\"string\">\"accountnum\"</span>, <span class=\"number\">123456</span>); <span class=\"comment\">// 数字 123456 会被立即转换成字符串 \"123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// HTML 文件类型input，由用户选择</span></div><div class=\"line\">formData.append(<span class=\"string\">\"userfile\"</span>, fileInputElement.files[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// JavaScript file-like 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class=\"comment\">// 新文件的正文...</span></div><div class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([content], &#123; <span class=\"attr\">type</span>: <span class=\"string\">\"text/xml\"</span>&#125;);</div><div class=\"line\"></div><div class=\"line\">formData.append(<span class=\"string\">\"webmasterfile\"</span>, blob);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">request.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://foo.com/submitform.php\"</span>);</div><div class=\"line\">request.send(formData);</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造一个包含Form表单数据的FormData对象，需要在创建FormData对象时传入指定表单的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formElement = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"form\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(formElement);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">request.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"submitform.php\"</span>);</div><div class=\"line\">formData.append(<span class=\"string\">\"serialnumber\"</span>, serialNumber++);</div><div class=\"line\">request.send(formData);</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>常用api</p>\n</li>\n</ol>\n<ul>\n<li>append() 用于添加一个新值到 FormData 对象内的一个已存在的键中，如果键不存在则会添加该键。</li>\n<li>delete() 用于从 FormData 对象中删除指定 key 和它对应的 value(s)。</li>\n<li>entries() 用于返回一个 iterator对象 ，此对象可以遍历访问FormData中的键值对。其中键值对的key是一个 USVString 对象；value是一个 USVString , 或者 Blob对象。<h1 id=\"配合axios使用\"><a href=\"#配合axios使用\" class=\"headerlink\" title=\"配合axios使用\"></a>配合axios使用</h1>之前项目是使用axios进行http请求，FormData配合axios使用，请求方法和请求头配置为<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.post(url, params, &#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span> &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\">https://developer.mozilla.org/zh-CN/docs/Web/API/FormData</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjshhi1bw0006f4b4q78kp0st","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1c6000cf4b46rn0jkr8"},{"post_id":"cjshhi1b80000f4b44qhs0xq4","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1c9000gf4b4s5jcbjz7"},{"post_id":"cjshhi1c10007f4b4f44lnz67","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1ca000if4b4xhc1wibs"},{"post_id":"cjshhi1c4000bf4b4scupyig2","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cd000lf4b4q486dr7v"},{"post_id":"cjshhi1bk0002f4b4xrd4fwfj","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1ce000of4b4fdiuzvfo"},{"post_id":"cjshhi1c6000df4b4ysiuwfck","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cg000rf4b46mzrhwu4"},{"post_id":"cjshhi1c9000hf4b4jy93z7dm","category_id":"cjshhi1c7000ef4b4c0kcps79","_id":"cjshhi1cl000uf4b47h9voru8"},{"post_id":"cjshhi1bq0005f4b4kfsfz7uh","category_id":"cjshhi1c7000ef4b4c0kcps79","_id":"cjshhi1co000wf4b4znapnaub"},{"post_id":"cjshhi1cb000jf4b4fbd0z4cu","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cr000zf4b49gxb4ad0"},{"post_id":"cjshhi1cd000mf4b496h0pppe","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cu0011f4b4dno4s4br"},{"post_id":"cjshhi1cf000pf4b4kbkirjuc","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cw0014f4b47oujdcix"},{"post_id":"cjshhi1ch000tf4b4r3ah21w9","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cx0018f4b4tmxuyh5e"},{"post_id":"cjshhi1cl000vf4b4orsv0638","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1cy001cf4b4xj4d9lnu"},{"post_id":"cjshhi1co000xf4b4gj6j3awt","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1d2001ff4b4zjtw2z1v"},{"post_id":"cjshhi1cr0010f4b4byappbl8","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1d4001jf4b4pfgaa0ae"},{"post_id":"cjshhi1cz001df4b46pg3j7b2","category_id":"cjshhi1cx0017f4b41ay1tvvt","_id":"cjshhi1d7001nf4b4euy64o99"},{"post_id":"cjshhi1cv0012f4b4h8oxaizj","category_id":"cjshhi1cx0017f4b41ay1tvvt","_id":"cjshhi1d9001qf4b4aq7y6q97"},{"post_id":"cjshhi1d2001gf4b4w3z8i1mq","category_id":"cjshhi1cx0017f4b41ay1tvvt","_id":"cjshhi1db001tf4b4ozi0lxgj"},{"post_id":"cjshhi1cw0015f4b4ru7dny46","category_id":"cjshhi1cx0017f4b41ay1tvvt","_id":"cjshhi1dj001xf4b4b70j6eq6"},{"post_id":"cjshhi1d8001of4b4jlthvpjf","category_id":"cjshhi1c7000ef4b4c0kcps79","_id":"cjshhi1dm0020f4b4vepez9wm"},{"post_id":"cjshhi1d9001rf4b4vk9iif46","category_id":"cjshhi1c7000ef4b4c0kcps79","_id":"cjshhi1do0023f4b45f37y82h"},{"post_id":"cjshhi1cx0019f4b427f9brzp","category_id":"cjshhi1d9001pf4b4w94r4i9i","_id":"cjshhi1dr0027f4b4sh5mi9c2"},{"post_id":"cjshhi1dc001vf4b40asrucjx","category_id":"cjshhi1cx0017f4b41ay1tvvt","_id":"cjshhi1dr0029f4b4psn3r7iu"},{"post_id":"cjshhi1dk001yf4b4s217rbrd","category_id":"cjshhi1c7000ef4b4c0kcps79","_id":"cjshhi1ds002bf4b4b6d9n8f1"},{"post_id":"cjshhi1d5001lf4b49ht7r23b","category_id":"cjshhi1dj001wf4b4t7gajtup","_id":"cjshhi1dt002df4b4wq69cwhu"},{"post_id":"cjshhi1do0024f4b44etlzxjn","category_id":"cjshhi1bn0003f4b4qtafup8x","_id":"cjshhi1dt002ff4b4bw391ji7"},{"post_id":"cjshhi1dm0021f4b4cngwygoo","category_id":"cjshhi1dr0026f4b49sx296vb","_id":"cjshhi1du002hf4b4qgpnkm5p"}],"PostTag":[{"post_id":"cjshhi1b80000f4b44qhs0xq4","tag_id":"cjshhi1bq0004f4b4r9q20ge3","_id":"cjshhi1c4000af4b4vyxv2szz"},{"post_id":"cjshhi1bk0002f4b4xrd4fwfj","tag_id":"cjshhi1c20009f4b43mwjwlge","_id":"cjshhi1ce000nf4b4gez33xwe"},{"post_id":"cjshhi1bk0002f4b4xrd4fwfj","tag_id":"cjshhi1c9000ff4b44p3cvive","_id":"cjshhi1cg000qf4b4oow3mp0j"},{"post_id":"cjshhi1bq0005f4b4kfsfz7uh","tag_id":"cjshhi1cc000kf4b4a4q5skwg","_id":"cjshhi1cw0016f4b4a81xp8n3"},{"post_id":"cjshhi1bq0005f4b4kfsfz7uh","tag_id":"cjshhi1ch000sf4b46qypp9lu","_id":"cjshhi1cy001af4b4w8coq80o"},{"post_id":"cjshhi1bq0005f4b4kfsfz7uh","tag_id":"cjshhi1cq000yf4b459yej6fc","_id":"cjshhi1d0001ef4b418f7nwtj"},{"post_id":"cjshhi1bw0006f4b4q78kp0st","tag_id":"cjshhi1cw0013f4b48f976bmw","_id":"cjshhi1d3001if4b4qsokxe7n"},{"post_id":"cjshhi1c10007f4b4f44lnz67","tag_id":"cjshhi1cy001bf4b4o4rz257i","_id":"cjshhi1d7001mf4b4e8n51wgo"},{"post_id":"cjshhi1c4000bf4b4scupyig2","tag_id":"cjshhi1d5001kf4b4pkuzlz5v","_id":"cjshhi1db001uf4b4joyxccef"},{"post_id":"cjshhi1c6000df4b4ysiuwfck","tag_id":"cjshhi1da001sf4b4a44pcmpe","_id":"cjshhi1do0022f4b47sm97q3h"},{"post_id":"cjshhi1c9000hf4b4jy93z7dm","tag_id":"cjshhi1da001sf4b4a44pcmpe","_id":"cjshhi1dr0028f4b4jlafg1t4"},{"post_id":"cjshhi1cb000jf4b4fbd0z4cu","tag_id":"cjshhi1dr0025f4b4owu8a27a","_id":"cjshhi1dt002cf4b4nyvd4g4y"},{"post_id":"cjshhi1cd000mf4b496h0pppe","tag_id":"cjshhi1dr0025f4b4owu8a27a","_id":"cjshhi1du002gf4b4cg0b6xgi"},{"post_id":"cjshhi1cf000pf4b4kbkirjuc","tag_id":"cjshhi1dr0025f4b4owu8a27a","_id":"cjshhi1dv002jf4b4hzslozr9"},{"post_id":"cjshhi1ch000tf4b4r3ah21w9","tag_id":"cjshhi1dr0025f4b4owu8a27a","_id":"cjshhi1dw002lf4b4ab12gtwg"},{"post_id":"cjshhi1cl000vf4b4orsv0638","tag_id":"cjshhi1dr0025f4b4owu8a27a","_id":"cjshhi1dw002nf4b469jbu29b"},{"post_id":"cjshhi1co000xf4b4gj6j3awt","tag_id":"cjshhi1dr0025f4b4owu8a27a","_id":"cjshhi1dw002pf4b4bnd0zri4"},{"post_id":"cjshhi1cr0010f4b4byappbl8","tag_id":"cjshhi1dw002of4b4j2tu53al","_id":"cjshhi1dx002rf4b4shp5lbdc"},{"post_id":"cjshhi1cv0012f4b4h8oxaizj","tag_id":"cjshhi1dx002qf4b4ltb8gfnc","_id":"cjshhi1dy002uf4b45aa5u51g"},{"post_id":"cjshhi1cv0012f4b4h8oxaizj","tag_id":"cjshhi1dy002sf4b4gu7aevk1","_id":"cjshhi1dy002vf4b4xkr5txmq"},{"post_id":"cjshhi1cw0015f4b4ru7dny46","tag_id":"cjshhi1dx002qf4b4ltb8gfnc","_id":"cjshhi1dz002yf4b4e7ox2llb"},{"post_id":"cjshhi1cw0015f4b4ru7dny46","tag_id":"cjshhi1dy002sf4b4gu7aevk1","_id":"cjshhi1e0002zf4b4t0fqlh1g"},{"post_id":"cjshhi1cx0019f4b427f9brzp","tag_id":"cjshhi1dz002xf4b4g35zwzk3","_id":"cjshhi1e00032f4b4vbeljgfx"},{"post_id":"cjshhi1cx0019f4b427f9brzp","tag_id":"cjshhi1da001sf4b4a44pcmpe","_id":"cjshhi1e00033f4b4wix005od"},{"post_id":"cjshhi1cz001df4b46pg3j7b2","tag_id":"cjshhi1e00031f4b4u0w0uttq","_id":"cjshhi1e10036f4b4wxnzcmwp"},{"post_id":"cjshhi1cz001df4b46pg3j7b2","tag_id":"cjshhi1e00034f4b4xlowae0u","_id":"cjshhi1e10037f4b4pha20b3r"},{"post_id":"cjshhi1d2001gf4b4w3z8i1mq","tag_id":"cjshhi1e10035f4b43a7bwjcy","_id":"cjshhi1e2003af4b4o4ameg4c"},{"post_id":"cjshhi1d2001gf4b4w3z8i1mq","tag_id":"cjshhi1e10038f4b4mah0mzeu","_id":"cjshhi1e2003bf4b4ce6wlrqg"},{"post_id":"cjshhi1d5001lf4b49ht7r23b","tag_id":"cjshhi1da001sf4b4a44pcmpe","_id":"cjshhi1e5003gf4b4858uwopa"},{"post_id":"cjshhi1d5001lf4b49ht7r23b","tag_id":"cjshhi1e2003cf4b4gk7pug05","_id":"cjshhi1e5003hf4b4n6q3roae"},{"post_id":"cjshhi1d5001lf4b49ht7r23b","tag_id":"cjshhi1e2003df4b4pagm6p0s","_id":"cjshhi1e6003jf4b42nsjmji7"},{"post_id":"cjshhi1d5001lf4b49ht7r23b","tag_id":"cjshhi1e3003ef4b4o2ec9k1y","_id":"cjshhi1e6003kf4b49b3x53y5"},{"post_id":"cjshhi1d8001of4b4jlthvpjf","tag_id":"cjshhi1e3003ff4b456es5uc4","_id":"cjshhi1e7003mf4b4a88j0790"},{"post_id":"cjshhi1d8001of4b4jlthvpjf","tag_id":"cjshhi1e6003if4b4uaidkggz","_id":"cjshhi1e9003nf4b4c7mvafoe"},{"post_id":"cjshhi1d9001rf4b4vk9iif46","tag_id":"cjshhi1da001sf4b4a44pcmpe","_id":"cjshhi1ea003sf4b4jphfc8oe"},{"post_id":"cjshhi1d9001rf4b4vk9iif46","tag_id":"cjshhi1e9003of4b4u2amq0cs","_id":"cjshhi1eb003tf4b402z1lfvr"},{"post_id":"cjshhi1d9001rf4b4vk9iif46","tag_id":"cjshhi1ea003pf4b4brh9e2te","_id":"cjshhi1eb003vf4b48cz1kcr3"},{"post_id":"cjshhi1d9001rf4b4vk9iif46","tag_id":"cjshhi1ea003qf4b4838lzq7x","_id":"cjshhi1eb003wf4b4apj9w641"},{"post_id":"cjshhi1dc001vf4b40asrucjx","tag_id":"cjshhi1dx002qf4b4ltb8gfnc","_id":"cjshhi1ed003yf4b47nbwjt7c"},{"post_id":"cjshhi1dc001vf4b40asrucjx","tag_id":"cjshhi1eb003uf4b47szu4kf7","_id":"cjshhi1ed003zf4b4e8s7xgzi"},{"post_id":"cjshhi1dk001yf4b4s217rbrd","tag_id":"cjshhi1eb003xf4b4uvntsdqp","_id":"cjshhi1ef0042f4b4svifppqx"},{"post_id":"cjshhi1dk001yf4b4s217rbrd","tag_id":"cjshhi1ed0040f4b40yof5lnh","_id":"cjshhi1ef0043f4b4kj1mht5w"},{"post_id":"cjshhi1dm0021f4b4cngwygoo","tag_id":"cjshhi1ee0041f4b4mt5h5n11","_id":"cjshhi1eg0047f4b4p1quhref"},{"post_id":"cjshhi1dm0021f4b4cngwygoo","tag_id":"cjshhi1ef0044f4b4tc7bblzg","_id":"cjshhi1eg0048f4b4r05cn4br"},{"post_id":"cjshhi1dm0021f4b4cngwygoo","tag_id":"cjshhi1ef0045f4b4ca3ltde6","_id":"cjshhi1eg0049f4b427yyl29x"},{"post_id":"cjshhi1do0024f4b44etlzxjn","tag_id":"cjshhi1ef0046f4b4b6hpzo22","_id":"cjshhi1eg004af4b4fld7rm86"}],"Tag":[{"name":"babel","_id":"cjshhi1bq0004f4b4r9q20ge3"},{"name":"html","_id":"cjshhi1c20009f4b43mwjwlge"},{"name":"语意化","_id":"cjshhi1c9000ff4b44p3cvive"},{"name":"iOS","_id":"cjshhi1cc000kf4b4a4q5skwg"},{"name":"iframe","_id":"cjshhi1ch000sf4b46qypp9lu"},{"name":"bug","_id":"cjshhi1cq000yf4b459yej6fc"},{"name":"object","_id":"cjshhi1cw0013f4b48f976bmw"},{"name":"function","_id":"cjshhi1cy001bf4b4o4rz257i"},{"name":"promise","_id":"cjshhi1d5001kf4b4pkuzlz5v"},{"name":"vue","_id":"cjshhi1da001sf4b4a44pcmpe"},{"name":"http","_id":"cjshhi1dr0025f4b4owu8a27a"},{"name":"正则表达式","_id":"cjshhi1dw002of4b4j2tu53al"},{"name":"gulp","_id":"cjshhi1dx002qf4b4ltb8gfnc"},{"name":"效率","_id":"cjshhi1dy002sf4b4gu7aevk1"},{"name":"react","_id":"cjshhi1dz002xf4b4g35zwzk3"},{"name":"webpack","_id":"cjshhi1e00031f4b4u0w0uttq"},{"name":"性能优化","_id":"cjshhi1e00034f4b4xlowae0u"},{"name":"npm","_id":"cjshhi1e10035f4b43a7bwjcy"},{"name":"版本","_id":"cjshhi1e10038f4b4mah0mzeu"},{"name":"karma","_id":"cjshhi1e2003cf4b4gk7pug05"},{"name":"mocha","_id":"cjshhi1e2003df4b4pagm6p0s"},{"name":"chai","_id":"cjshhi1e3003ef4b4o2ec9k1y"},{"name":"audio","_id":"cjshhi1e3003ff4b456es5uc4"},{"name":"用户体验","_id":"cjshhi1e6003if4b4uaidkggz"},{"name":"vue-router","_id":"cjshhi1e9003of4b4u2amq0cs"},{"name":"管理系统","_id":"cjshhi1ea003pf4b4brh9e2te"},{"name":"权限控制","_id":"cjshhi1ea003qf4b4838lzq7x"},{"name":"‘效率’","_id":"cjshhi1eb003uf4b47szu4kf7"},{"name":"canvas","_id":"cjshhi1eb003xf4b4uvntsdqp"},{"name":"dpr","_id":"cjshhi1ed0040f4b40yof5lnh"},{"name":"css","_id":"cjshhi1ee0041f4b4mt5h5n11"},{"name":"grid","_id":"cjshhi1ef0044f4b4tc7bblzg"},{"name":"responsive","_id":"cjshhi1ef0045f4b4ca3ltde6"},{"name":"FormData","_id":"cjshhi1ef0046f4b4b6hpzo22"}]}}